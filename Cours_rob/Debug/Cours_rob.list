
Cours_rob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800bf38  0800bf38  0001bf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c448  0800c448  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c448  0800c448  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c448  0800c448  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c44c  0800c44c  0001c44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00003018  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200031f0  200031f0  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000169c0  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b42  00000000  00000000  00036c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001500  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000102a  00000000  00000000  0003bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b5e  00000000  00000000  0003cc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a674  00000000  00000000  000607d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d18fa  00000000  00000000  0007ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b3c  00000000  00000000  0014c748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00153284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf20 	.word	0x0800bf20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800bf20 	.word	0x0800bf20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200001f4 	.word	0x200001f4
 8000d34:	20000294 	.word	0x20000294

08000d38 <lcdSendCmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcdSendCmd(char cmd)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (cmd & 0xf0);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd << 4) & 0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | 0x0C;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f043 030c 	orr.w	r3, r3, #12
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | 0x08;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | 0x0C;
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	f043 030c 	orr.w	r3, r3, #12
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | 0x08;
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	72fb      	strb	r3, [r7, #11]

  uint16_t MemAddress = 0;  // Memory address, set to 0 for simplicity
 8000d78:	2300      	movs	r3, #0
 8000d7a:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Write(&hi2c1, SLAVE_ADDRESS_LCD, MemAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data_t, 4, 100);
 8000d7c:	89ba      	ldrh	r2, [r7, #12]
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2304      	movs	r3, #4
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	214e      	movs	r1, #78	; 0x4e
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <lcdSendCmd+0x68>)
 8000d92:	f001 fec9 	bl	8002b28 <HAL_I2C_Mem_Write>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000494 	.word	0x20000494

08000da4 <lcdSendData>:

void lcdSendData(char data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (data & 0xf0);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	73fb      	strb	r3, [r7, #15]
  data_l = ((data << 4) & 0xf0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | 0x0D;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	f043 030d 	orr.w	r3, r3, #13
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | 0x09;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f043 0309 	orr.w	r3, r3, #9
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | 0x0D;
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	f043 030d 	orr.w	r3, r3, #13
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | 0x09;
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	f043 0309 	orr.w	r3, r3, #9
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	72fb      	strb	r3, [r7, #11]

  uint16_t MemAddress = 0;  // Memory address, set to 0 for simplicity
 8000de4:	2300      	movs	r3, #0
 8000de6:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Write(&hi2c1, SLAVE_ADDRESS_LCD, MemAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data_t, 4, 100);
 8000de8:	89ba      	ldrh	r2, [r7, #12]
 8000dea:	2364      	movs	r3, #100	; 0x64
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	2304      	movs	r3, #4
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	214e      	movs	r1, #78	; 0x4e
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <lcdSendData+0x68>)
 8000dfe:	f001 fe93 	bl	8002b28 <HAL_I2C_Mem_Write>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000494 	.word	0x20000494

08000e10 <lcdPutCur>:


void lcdPutCur(int row, int col)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <lcdPutCur+0x18>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <lcdPutCur+0x22>
 8000e26:	e009      	b.n	8000e3c <lcdPutCur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2e:	603b      	str	r3, [r7, #0]
            break;
 8000e30:	e004      	b.n	8000e3c <lcdPutCur+0x2c>
        case 1:
            col |= 0xC0;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e38:	603b      	str	r3, [r7, #0]
            break;
 8000e3a:	bf00      	nop
    }

    lcdSendCmd(col);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff79 	bl	8000d38 <lcdSendCmd>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <lcdInit>:


void lcdInit()
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000e52:	2032      	movs	r0, #50	; 0x32
 8000e54:	f001 f94e 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x30);
 8000e58:	2030      	movs	r0, #48	; 0x30
 8000e5a:	f7ff ff6d 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(5);
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f001 f948 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x30);
 8000e64:	2030      	movs	r0, #48	; 0x30
 8000e66:	f7ff ff67 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 f942 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x30);
 8000e70:	2030      	movs	r0, #48	; 0x30
 8000e72:	f7ff ff61 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(10);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f001 f93c 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x20);
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	f7ff ff5b 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(10);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f001 f936 	bl	80020f4 <HAL_Delay>


	lcdSendCmd(0x28);
 8000e88:	2028      	movs	r0, #40	; 0x28
 8000e8a:	f7ff ff55 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f001 f930 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x08);
 8000e94:	2008      	movs	r0, #8
 8000e96:	f7ff ff4f 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f001 f92a 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x01);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff ff49 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f001 f924 	bl	80020f4 <HAL_Delay>
	HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f001 f921 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x06);
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f7ff ff40 	bl	8000d38 <lcdSendCmd>
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f001 f91b 	bl	80020f4 <HAL_Delay>
	lcdSendCmd(0x0C);
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f7ff ff3a 	bl	8000d38 <lcdSendCmd>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <lcdSendString>:

void lcdSendString(char *str)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData(*str++);
 8000ed0:	e006      	b.n	8000ee0 <lcdSendString+0x18>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff62 	bl	8000da4 <lcdSendData>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <lcdSendString+0xa>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <lcdClear>:
void lcdClear() {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  lcdSendCmd(0x01);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff ff1e 	bl	8000d38 <lcdSendCmd>
    (10);
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <microDelay+0x30>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8000f12:	bf00      	nop
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <microDelay+0x30>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3f9      	bcc.n	8000f14 <microDelay+0x14>
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000534 	.word	0x20000534

08000f34 <DHT22_Start>:
int max_deviation_humidity;
int max_deviation_temp;
int average_temp_value;

uint8_t DHT22_Start (void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DTH22_Pin;
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as output
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	482d      	ldr	r0, [pc, #180]	; (8001018 <DHT22_Start+0xe4>)
 8000f64:	f001 fb7e 	bl	8002664 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (GPIOC, DTH22_Pin, 0);   // pull the pin low
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	482a      	ldr	r0, [pc, #168]	; (8001018 <DHT22_Start+0xe4>)
 8000f70:	f001 fd1a 	bl	80029a8 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 8000f74:	f240 5014 	movw	r0, #1300	; 0x514
 8000f78:	f7ff ffc2 	bl	8000f00 <microDelay>
  HAL_GPIO_WritePin (GPIOC, DTH22_Pin, 1);   // pull the pin high
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4825      	ldr	r0, [pc, #148]	; (8001018 <DHT22_Start+0xe4>)
 8000f84:	f001 fd10 	bl	80029a8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f7ff ffb9 	bl	8000f00 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as input
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481f      	ldr	r0, [pc, #124]	; (8001018 <DHT22_Start+0xe4>)
 8000f9c:	f001 fb62 	bl	8002664 <HAL_GPIO_Init>
  microDelay (40);
 8000fa0:	2028      	movs	r0, #40	; 0x28
 8000fa2:	f7ff ffad 	bl	8000f00 <microDelay>
  if (!(HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)))
 8000fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000faa:	481b      	ldr	r0, [pc, #108]	; (8001018 <DHT22_Start+0xe4>)
 8000fac:	f001 fce4 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <DHT22_Start+0x9c>
  {
    microDelay (80);
 8000fb6:	2050      	movs	r0, #80	; 0x50
 8000fb8:	f7ff ffa2 	bl	8000f00 <microDelay>
    if ((HAL_GPIO_ReadPin (GPIOC, DTH22_Pin))) Response = 1;
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4815      	ldr	r0, [pc, #84]	; (8001018 <DHT22_Start+0xe4>)
 8000fc2:	f001 fcd9 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <DHT22_Start+0x9c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000fd0:	f001 f884 	bl	80020dc <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <DHT22_Start+0xe8>)
 8000fd8:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000fda:	f001 f87f 	bl	80020dc <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <DHT22_Start+0xec>)
 8000fe2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 8000fe4:	e004      	b.n	8000ff0 <DHT22_Start+0xbc>
  {
    cMillis = HAL_GetTick();
 8000fe6:	f001 f879 	bl	80020dc <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <DHT22_Start+0xec>)
 8000fee:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <DHT22_Start+0xe4>)
 8000ff6:	f001 fcbf 	bl	8002978 <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <DHT22_Start+0xda>
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <DHT22_Start+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1c9a      	adds	r2, r3, #2
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <DHT22_Start+0xec>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d8eb      	bhi.n	8000fe6 <DHT22_Start+0xb2>
  }
  return Response;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	48000800 	.word	0x48000800
 800101c:	200005bc 	.word	0x200005bc
 8001020:	200005c0 	.word	0x200005c0

08001024 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e066      	b.n	80010fe <DHT22_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001030:	f001 f854 	bl	80020dc <HAL_GetTick>
 8001034:	4603      	mov	r3, r0
 8001036:	4a36      	ldr	r2, [pc, #216]	; (8001110 <DHT22_Read+0xec>)
 8001038:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800103a:	f001 f84f 	bl	80020dc <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <DHT22_Read+0xf0>)
 8001042:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 8001044:	e004      	b.n	8001050 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001046:	f001 f849 	bl	80020dc <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <DHT22_Read+0xf0>)
 800104e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	4830      	ldr	r0, [pc, #192]	; (8001118 <DHT22_Read+0xf4>)
 8001056:	f001 fc8f 	bl	8002978 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d106      	bne.n	800106e <DHT22_Read+0x4a>
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <DHT22_Read+0xec>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1c9a      	adds	r2, r3, #2
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <DHT22_Read+0xf0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8eb      	bhi.n	8001046 <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f7ff ff46 	bl	8000f00 <microDelay>
    if (!(HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)))   // if the pin is low
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <DHT22_Read+0xf4>)
 800107a:	f001 fc7d 	bl	8002978 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10e      	bne.n	80010a2 <DHT22_Read+0x7e>
      b&= ~(1<<(7-a));
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2201      	movs	r2, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	b25b      	sxtb	r3, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	b25a      	sxtb	r2, r3
 8001096:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800109a:	4013      	ands	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	e00b      	b.n	80010ba <DHT22_Read+0x96>
    else
      b|= (1<<(7-a));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f1c3 0307 	rsb	r3, r3, #7
 80010a8:	2201      	movs	r2, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b25a      	sxtb	r2, r3
 80010b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80010ba:	f001 f80f 	bl	80020dc <HAL_GetTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <DHT22_Read+0xec>)
 80010c2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010c4:	f001 f80a 	bl	80020dc <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <DHT22_Read+0xf0>)
 80010cc:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 80010ce:	e004      	b.n	80010da <DHT22_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80010d0:	f001 f804 	bl	80020dc <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <DHT22_Read+0xf0>)
 80010d8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (GPIOC, DTH22_Pin)) && pMillis + 2 > cMillis)
 80010da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <DHT22_Read+0xf4>)
 80010e0:	f001 fc4a 	bl	8002978 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <DHT22_Read+0xd4>
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <DHT22_Read+0xec>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1c9a      	adds	r2, r3, #2
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <DHT22_Read+0xf0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8eb      	bhi.n	80010d0 <DHT22_Read+0xac>
  for (a=0;a<8;a++)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	3301      	adds	r3, #1
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d995      	bls.n	8001030 <DHT22_Read+0xc>
    }
  }
  return b;
 8001104:	79bb      	ldrb	r3, [r7, #6]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200005bc 	.word	0x200005bc
 8001114:	200005c0 	.word	0x200005c0
 8001118:	48000800 	.word	0x48000800

0800111c <Show_Climat>:

void Show_Climat()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	lcdPutCur(0, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fe74 	bl	8000e10 <lcdPutCur>
	lcdSendString("Temp: ");
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <Show_Climat+0x4c>)
 800112a:	f7ff fecd 	bl	8000ec8 <lcdSendString>
	sprintf(temp_buffer, "%dC", tCelsius);
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <Show_Climat+0x50>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <Show_Climat+0x54>)
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <Show_Climat+0x58>)
 8001138:	f007 fa00 	bl	800853c <siprintf>
	lcdSendString(temp_buffer);
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <Show_Climat+0x58>)
 800113e:	f7ff fec3 	bl	8000ec8 <lcdSendString>
	lcdPutCur(1, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fe63 	bl	8000e10 <lcdPutCur>
	lcdSendString("Humidity: ");
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <Show_Climat+0x5c>)
 800114c:	f7ff febc 	bl	8000ec8 <lcdSendString>
	sprintf (humidity_buffer, "%d%c", RH,'%');
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <Show_Climat+0x60>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2325      	movs	r3, #37	; 0x25
 8001156:	490a      	ldr	r1, [pc, #40]	; (8001180 <Show_Climat+0x64>)
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <Show_Climat+0x68>)
 800115a:	f007 f9ef 	bl	800853c <siprintf>
	lcdSendString(humidity_buffer);
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <Show_Climat+0x68>)
 8001160:	f7ff feb2 	bl	8000ec8 <lcdSendString>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0800bf38 	.word	0x0800bf38
 800116c:	200005c4 	.word	0x200005c4
 8001170:	0800bf40 	.word	0x0800bf40
 8001174:	200005a8 	.word	0x200005a8
 8001178:	0800bf44 	.word	0x0800bf44
 800117c:	200005cc 	.word	0x200005cc
 8001180:	0800bf50 	.word	0x0800bf50
 8001184:	20000594 	.word	0x20000594

08001188 <DTH22_Work>:

void DTH22_Work(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if(DHT22_Start())
 800118c:	f7ff fed2 	bl	8000f34 <DHT22_Start>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8099 	beq.w	80012ca <DTH22_Work+0x142>
		      {
		        RH1 = DHT22_Read(); // First 8bits of humidity
 8001198:	f7ff ff44 	bl	8001024 <DHT22_Read>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <DTH22_Work+0x148>)
 80011a2:	701a      	strb	r2, [r3, #0]
		        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 80011a4:	f7ff ff3e 	bl	8001024 <DHT22_Read>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <DTH22_Work+0x14c>)
 80011ae:	701a      	strb	r2, [r3, #0]
		        TC1 = DHT22_Read(); // First 8bits of Celsius
 80011b0:	f7ff ff38 	bl	8001024 <DHT22_Read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <DTH22_Work+0x150>)
 80011ba:	701a      	strb	r2, [r3, #0]
		        TC2 = DHT22_Read(); // Second 8bits of Celsius
 80011bc:	f7ff ff32 	bl	8001024 <DHT22_Read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b45      	ldr	r3, [pc, #276]	; (80012dc <DTH22_Work+0x154>)
 80011c6:	701a      	strb	r2, [r3, #0]
		        SUM = DHT22_Read(); // Check sum
 80011c8:	f7ff ff2c 	bl	8001024 <DHT22_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <DTH22_Work+0x158>)
 80011d2:	701a      	strb	r2, [r3, #0]
		        CHECK = RH1 + RH2 + TC1 + TC2;
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <DTH22_Work+0x148>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <DTH22_Work+0x14c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <DTH22_Work+0x150>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <DTH22_Work+0x154>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b3c      	ldr	r3, [pc, #240]	; (80012e4 <DTH22_Work+0x15c>)
 80011f2:	701a      	strb	r2, [r3, #0]
		        if (CHECK == SUM)
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <DTH22_Work+0x15c>)
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <DTH22_Work+0x158>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d164      	bne.n	80012ca <DTH22_Work+0x142>
		        {
		          if (TC1>127) // If TC1=10000000, negative temperature
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <DTH22_Work+0x150>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	da12      	bge.n	8001230 <DTH22_Work+0xa8>
		          {
		            tCelsius = (float)TC2/10*(-1);
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <DTH22_Work+0x154>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001216:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121e:	eef1 7a67 	vneg.f32	s15, s15
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 2a90 	vmov	r2, s15
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <DTH22_Work+0x160>)
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e013      	b.n	8001258 <DTH22_Work+0xd0>
		          }
		          else
		          {
		            tCelsius = (float)((TC1<<8)|TC2)/10;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <DTH22_Work+0x150>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	4a29      	ldr	r2, [pc, #164]	; (80012dc <DTH22_Work+0x154>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001244:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001250:	ee17 2a90 	vmov	r2, s15
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <DTH22_Work+0x160>)
 8001256:	601a      	str	r2, [r3, #0]
		          }
		          tFahrenheit = tCelsius * 9/5 + 32;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <DTH22_Work+0x160>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <DTH22_Work+0x164>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	1052      	asrs	r2, r2, #1
 800126a:	17db      	asrs	r3, r3, #31
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	3320      	adds	r3, #32
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <DTH22_Work+0x168>)
 8001272:	6013      	str	r3, [r2, #0]
		          RH = (float) ((RH1<<8)|RH2)/10;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <DTH22_Work+0x148>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <DTH22_Work+0x14c>)
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 2a90 	vmov	r2, s15
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <DTH22_Work+0x16c>)
 800129a:	601a      	str	r2, [r3, #0]
		          if(i == 0){
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <DTH22_Work+0x170>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d112      	bne.n	80012ca <DTH22_Work+0x142>
		          		arr_temp[i] = tCelsius;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <DTH22_Work+0x170>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <DTH22_Work+0x160>)
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	4913      	ldr	r1, [pc, #76]	; (80012fc <DTH22_Work+0x174>)
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		          		arr_humidity[i] = RH;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <DTH22_Work+0x170>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <DTH22_Work+0x16c>)
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	4911      	ldr	r1, [pc, #68]	; (8001300 <DTH22_Work+0x178>)
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		                  i++;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <DTH22_Work+0x170>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <DTH22_Work+0x170>)
 80012c8:	6013      	str	r3, [r2, #0]
		          		}
		        }
		      }

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000058c 	.word	0x2000058c
 80012d4:	2000058d 	.word	0x2000058d
 80012d8:	2000058e 	.word	0x2000058e
 80012dc:	2000058f 	.word	0x2000058f
 80012e0:	20000590 	.word	0x20000590
 80012e4:	20000591 	.word	0x20000591
 80012e8:	200005c4 	.word	0x200005c4
 80012ec:	66666667 	.word	0x66666667
 80012f0:	200005c8 	.word	0x200005c8
 80012f4:	200005cc 	.word	0x200005cc
 80012f8:	200007b0 	.word	0x200007b0
 80012fc:	200005d0 	.word	0x200005d0
 8001300:	200006c0 	.word	0x200006c0

08001304 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	clear = TRUE;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_GPIO_EXTI_Callback+0x34>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
	flag = (flag+1)%2;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_GPIO_EXTI_Callback+0x38>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_GPIO_EXTI_Callback+0x38>)
 8001328:	701a      	strb	r2, [r3, #0]

}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000592 	.word	0x20000592
 800133c:	20000593 	.word	0x20000593

08001340 <calculate_deviation_value>:
void calculate_deviation_value()
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
	   float sum_temp_value = arr_temp[0];
 8001348:	4b8c      	ldr	r3, [pc, #560]	; (800157c <calculate_deviation_value+0x23c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	edc7 7a05 	vstr	s15, [r7, #20]
	   float sum_humidity_value = arr_humidity[0];
 8001358:	4b89      	ldr	r3, [pc, #548]	; (8001580 <calculate_deviation_value+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	edc7 7a04 	vstr	s15, [r7, #16]
		 max_temp = arr_temp[0];
 8001368:	4b84      	ldr	r3, [pc, #528]	; (800157c <calculate_deviation_value+0x23c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a85      	ldr	r2, [pc, #532]	; (8001584 <calculate_deviation_value+0x244>)
 800136e:	6013      	str	r3, [r2, #0]
		 max_humidity = arr_humidity[0];
 8001370:	4b83      	ldr	r3, [pc, #524]	; (8001580 <calculate_deviation_value+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a84      	ldr	r2, [pc, #528]	; (8001588 <calculate_deviation_value+0x248>)
 8001376:	6013      	str	r3, [r2, #0]
		 min_temp = arr_temp[0];
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <calculate_deviation_value+0x23c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	; (800158c <calculate_deviation_value+0x24c>)
 800137e:	6013      	str	r3, [r2, #0]
		 min_humidity = arr_humidity[0];
 8001380:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <calculate_deviation_value+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a82      	ldr	r2, [pc, #520]	; (8001590 <calculate_deviation_value+0x250>)
 8001386:	6013      	str	r3, [r2, #0]
		 //average_humidity_value;
		 //max_deviation_humidity;
		 //max_deviation_temp;
		 //average_temp_value;

	   for(int b = 1;b<i;b++){
 8001388:	2301      	movs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e056      	b.n	800143c <calculate_deviation_value+0xfc>

			if(max_temp<arr_temp[b]){
 800138e:	4a7b      	ldr	r2, [pc, #492]	; (800157c <calculate_deviation_value+0x23c>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001396:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <calculate_deviation_value+0x244>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	dd05      	ble.n	80013aa <calculate_deviation_value+0x6a>
				max_temp = arr_temp[b];
 800139e:	4a77      	ldr	r2, [pc, #476]	; (800157c <calculate_deviation_value+0x23c>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	4a77      	ldr	r2, [pc, #476]	; (8001584 <calculate_deviation_value+0x244>)
 80013a8:	6013      	str	r3, [r2, #0]
				}
			if (min_temp>arr_temp[b]){
 80013aa:	4a74      	ldr	r2, [pc, #464]	; (800157c <calculate_deviation_value+0x23c>)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <calculate_deviation_value+0x24c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	da05      	bge.n	80013c6 <calculate_deviation_value+0x86>
				min_temp = arr_temp[b];
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <calculate_deviation_value+0x23c>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	4a72      	ldr	r2, [pc, #456]	; (800158c <calculate_deviation_value+0x24c>)
 80013c4:	6013      	str	r3, [r2, #0]
				}
			if(max_humidity<arr_humidity[b]){
 80013c6:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <calculate_deviation_value+0x240>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <calculate_deviation_value+0x248>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd05      	ble.n	80013e2 <calculate_deviation_value+0xa2>
				max_humidity = arr_humidity[b];
 80013d6:	4a6a      	ldr	r2, [pc, #424]	; (8001580 <calculate_deviation_value+0x240>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	4a6a      	ldr	r2, [pc, #424]	; (8001588 <calculate_deviation_value+0x248>)
 80013e0:	6013      	str	r3, [r2, #0]
				}
			if(min_humidity>arr_humidity[b]){
 80013e2:	4a67      	ldr	r2, [pc, #412]	; (8001580 <calculate_deviation_value+0x240>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <calculate_deviation_value+0x250>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	da05      	bge.n	80013fe <calculate_deviation_value+0xbe>
				min_humidity = arr_humidity[b];
 80013f2:	4a63      	ldr	r2, [pc, #396]	; (8001580 <calculate_deviation_value+0x240>)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	4a65      	ldr	r2, [pc, #404]	; (8001590 <calculate_deviation_value+0x250>)
 80013fc:	6013      	str	r3, [r2, #0]
				}
			sum_temp_value += arr_temp[b];
 80013fe:	4a5f      	ldr	r2, [pc, #380]	; (800157c <calculate_deviation_value+0x23c>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a05 	vstr	s15, [r7, #20]
			sum_humidity_value += arr_humidity[b];
 800141a:	4a59      	ldr	r2, [pc, #356]	; (8001580 <calculate_deviation_value+0x240>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ed97 7a04 	vldr	s14, [r7, #16]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	edc7 7a04 	vstr	s15, [r7, #16]
	   for(int b = 1;b<i;b++){
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <calculate_deviation_value+0x254>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	429a      	cmp	r2, r3
 8001444:	dba3      	blt.n	800138e <calculate_deviation_value+0x4e>
			}
	    average_temp_value = sum_temp_value/i;
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <calculate_deviation_value+0x254>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	edd7 6a05 	vldr	s13, [r7, #20]
 8001456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145e:	ee17 2a90 	vmov	r2, s15
 8001462:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <calculate_deviation_value+0x258>)
 8001464:	601a      	str	r2, [r3, #0]
		average_humidity_value = sum_humidity_value/i;
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <calculate_deviation_value+0x254>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	edd7 6a04 	vldr	s13, [r7, #16]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 2a90 	vmov	r2, s15
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <calculate_deviation_value+0x25c>)
 8001484:	601a      	str	r2, [r3, #0]

		if(fabs(average_temp_value - max_temp)>(average_temp_value - min_temp)){
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <calculate_deviation_value+0x258>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <calculate_deviation_value+0x244>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f84f 	bl	8000534 <__aeabi_i2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	603a      	str	r2, [r7, #0]
 800149c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <calculate_deviation_value+0x258>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <calculate_deviation_value+0x24c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f841 	bl	8000534 <__aeabi_i2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ba:	f7ff fb35 	bl	8000b28 <__aeabi_dcmpgt>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d014      	beq.n	80014ee <calculate_deviation_value+0x1ae>
			 max_deviation_temp = fabs(average_temp_value - max_temp);
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <calculate_deviation_value+0x258>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <calculate_deviation_value+0x244>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f830 	bl	8000534 <__aeabi_i2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4692      	mov	sl, r2
 80014da:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80014de:	4650      	mov	r0, sl
 80014e0:	4659      	mov	r1, fp
 80014e2:	f7ff fb41 	bl	8000b68 <__aeabi_d2iz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <calculate_deviation_value+0x260>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e006      	b.n	80014fc <calculate_deviation_value+0x1bc>
		} else  max_deviation_temp = average_temp_value - min_temp;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <calculate_deviation_value+0x258>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <calculate_deviation_value+0x24c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <calculate_deviation_value+0x260>)
 80014fa:	6013      	str	r3, [r2, #0]

		if(fabs(average_humidity_value - max_humidity)>(average_humidity_value - min_humidity)){
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <calculate_deviation_value+0x25c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <calculate_deviation_value+0x248>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f814 	bl	8000534 <__aeabi_i2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4690      	mov	r8, r2
 8001512:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <calculate_deviation_value+0x25c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <calculate_deviation_value+0x250>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f807 	bl	8000534 <__aeabi_i2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4640      	mov	r0, r8
 800152c:	4649      	mov	r1, r9
 800152e:	f7ff fafb 	bl	8000b28 <__aeabi_dcmpgt>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d014      	beq.n	8001562 <calculate_deviation_value+0x222>
			   max_deviation_humidity = fabs(average_humidity_value - max_humidity);
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <calculate_deviation_value+0x25c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <calculate_deviation_value+0x248>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fff6 	bl	8000534 <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7ff fb07 	bl	8000b68 <__aeabi_d2iz>
 800155a:	4603      	mov	r3, r0
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <calculate_deviation_value+0x264>)
 800155e:	6013      	str	r3, [r2, #0]
		} else max_deviation_humidity = average_humidity_value - min_humidity;

}
 8001560:	e006      	b.n	8001570 <calculate_deviation_value+0x230>
		} else max_deviation_humidity = average_humidity_value - min_humidity;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <calculate_deviation_value+0x25c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <calculate_deviation_value+0x250>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <calculate_deviation_value+0x264>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800157a:	bf00      	nop
 800157c:	200005d0 	.word	0x200005d0
 8001580:	200006c0 	.word	0x200006c0
 8001584:	200007b4 	.word	0x200007b4
 8001588:	200007b8 	.word	0x200007b8
 800158c:	200007bc 	.word	0x200007bc
 8001590:	200007c0 	.word	0x200007c0
 8001594:	200007b0 	.word	0x200007b0
 8001598:	200007d0 	.word	0x200007d0
 800159c:	200007c4 	.word	0x200007c4
 80015a0:	200007cc 	.word	0x200007cc
 80015a4:	200007c8 	.word	0x200007c8

080015a8 <second_screen>:
void second_screen(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	calculate_deviation_value();
 80015ac:	f7ff fec8 	bl	8001340 <calculate_deviation_value>
	lcdPutCur(0, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fc2c 	bl	8000e10 <lcdPutCur>
	lcdSendString("dev_t:");
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <second_screen+0x50>)
 80015ba:	f7ff fc85 	bl	8000ec8 <lcdSendString>
	sprintf(temp_buffer, "%dC", max_deviation_temp);
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <second_screen+0x54>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	490e      	ldr	r1, [pc, #56]	; (8001600 <second_screen+0x58>)
 80015c6:	480f      	ldr	r0, [pc, #60]	; (8001604 <second_screen+0x5c>)
 80015c8:	f006 ffb8 	bl	800853c <siprintf>
	lcdSendString(temp_buffer);
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <second_screen+0x5c>)
 80015ce:	f7ff fc7b 	bl	8000ec8 <lcdSendString>

	lcdPutCur(1, 0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fc1b 	bl	8000e10 <lcdPutCur>
	lcdSendString("dev_h:");
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <second_screen+0x60>)
 80015dc:	f7ff fc74 	bl	8000ec8 <lcdSendString>
	sprintf (humidity_buffer, "%d%c", max_deviation_humidity,'%');
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <second_screen+0x64>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2325      	movs	r3, #37	; 0x25
 80015e6:	490a      	ldr	r1, [pc, #40]	; (8001610 <second_screen+0x68>)
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <second_screen+0x6c>)
 80015ea:	f006 ffa7 	bl	800853c <siprintf>
	lcdSendString(humidity_buffer);
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <second_screen+0x6c>)
 80015f0:	f7ff fc6a 	bl	8000ec8 <lcdSendString>

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	0800bf58 	.word	0x0800bf58
 80015fc:	200007cc 	.word	0x200007cc
 8001600:	0800bf40 	.word	0x0800bf40
 8001604:	200005a8 	.word	0x200005a8
 8001608:	0800bf60 	.word	0x0800bf60
 800160c:	200007c8 	.word	0x200007c8
 8001610:	0800bf50 	.word	0x0800bf50
 8001614:	20000594 	.word	0x20000594

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b096      	sub	sp, #88	; 0x58
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fd33 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f85b 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f000 f981 	bl	800192c <MX_GPIO_Init>
  MX_TIM6_Init();
 800162a:	f000 f949 	bl	80018c0 <MX_TIM6_Init>
  MX_I2C1_Init();
 800162e:	f000 f8b7 	bl	80017a0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001632:	f000 f8f5 	bl	8001820 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcdInit();
 8001636:	f7ff fc0a 	bl	8000e4e <lcdInit>
  HAL_TIM_Base_Start(&htim6);
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <main+0xa4>)
 800163c:	f004 f928 	bl	8005890 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <main+0xa8>)
 8001642:	f004 f98d 	bl	8005960 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 2, 128);
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <main+0xac>)
 8001648:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800164c:	461d      	mov	r5, r3
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800165a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fdfe 	bl	8006262 <osThreadCreate>
 8001666:	4603      	mov	r3, r0
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <main+0xb0>)
 800166a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 1, 128);
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <main+0xb4>)
 800166e:	f107 0420 	add.w	r4, r7, #32
 8001672:	461d      	mov	r5, r3
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fdeb 	bl	8006262 <osThreadCreate>
 800168c:	4603      	mov	r3, r0
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <main+0xb8>)
 8001690:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <main+0xbc>)
 8001694:	1d3c      	adds	r4, r7, #4
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fdda 	bl	8006262 <osThreadCreate>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <main+0xc0>)
 80016b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016b4:	f004 fdce 	bl	8006254 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0xa0>
 80016ba:	bf00      	nop
 80016bc:	20000534 	.word	0x20000534
 80016c0:	200004e8 	.word	0x200004e8
 80016c4:	0800bf74 	.word	0x0800bf74
 80016c8:	20000580 	.word	0x20000580
 80016cc:	0800bf9c 	.word	0x0800bf9c
 80016d0:	20000584 	.word	0x20000584
 80016d4:	0800bfc4 	.word	0x0800bfc4
 80016d8:	20000588 	.word	0x20000588

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0a6      	sub	sp, #152	; 0x98
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e6:	2228      	movs	r2, #40	; 0x28
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 ff89 	bl	8008602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2258      	movs	r2, #88	; 0x58
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f006 ff7b 	bl	8008602 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800170c:	2302      	movs	r3, #2
 800170e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001714:	2310      	movs	r3, #16
 8001716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001728:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800172c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fb98 	bl	8003e70 <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001746:	f000 f9d7 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	230f      	movs	r3, #15
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174e:	2302      	movs	r3, #2
 8001750:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001764:	2102      	movs	r1, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fbd6 	bl	8004f18 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001772:	f000 f9c1 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM2;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <SystemClock_Config+0xc0>)
 8001778:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800177e:	2300      	movs	r3, #0
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fe0d 	bl	80053a4 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001790:	f000 f9b2 	bl	8001af8 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3798      	adds	r7, #152	; 0x98
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	00100020 	.word	0x00100020

080017a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_I2C1_Init+0x74>)
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <MX_I2C1_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_I2C1_Init+0x74>)
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <MX_I2C1_Init+0x7c>)
 80017ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_I2C1_Init+0x74>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_I2C1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_I2C1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_I2C1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <MX_I2C1_Init+0x74>)
 80017dc:	f001 f914 	bl	8002a08 <HAL_I2C_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e6:	f000 f987 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <MX_I2C1_Init+0x74>)
 80017ee:	f002 fa8d 	bl	8003d0c <HAL_I2CEx_ConfigAnalogFilter>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f8:	f000 f97e 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_I2C1_Init+0x74>)
 8001800:	f002 facf 	bl	8003da2 <HAL_I2CEx_ConfigDigitalFilter>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800180a:	f000 f975 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000494 	.word	0x20000494
 8001818:	40005400 	.word	0x40005400
 800181c:	2000090e 	.word	0x2000090e

08001820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001844:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 599;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001848:	f240 2257 	movw	r2, #599	; 0x257
 800184c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7158599;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001856:	4a19      	ldr	r2, [pc, #100]	; (80018bc <MX_TIM2_Init+0x9c>)
 8001858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_TIM2_Init+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001868:	f003 ffba 	bl	80057e0 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001872:	f000 f941 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001884:	f004 f9fb 	bl	8005c7e <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800188e:	f000 f933 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM2_Init+0x98>)
 80018a0:	f004 fc16 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018aa:	f000 f925 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200004e8 	.word	0x200004e8
 80018bc:	006d3b47 	.word	0x006d3b47

080018c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_TIM6_Init+0x64>)
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <MX_TIM6_Init+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_TIM6_Init+0x64>)
 80018d8:	2247      	movs	r2, #71	; 0x47
 80018da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_TIM6_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_TIM6_Init+0x64>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_TIM6_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_TIM6_Init+0x64>)
 80018f2:	f003 ff75 	bl	80057e0 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018fc:	f000 f8fc 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_TIM6_Init+0x64>)
 800190e:	f004 fbdf 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001918:	f000 f8ee 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000534 	.word	0x20000534
 8001928:	40001000 	.word	0x40001000

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_GPIO_Init+0xd4>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001964:	6153      	str	r3, [r2, #20]
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	6153      	str	r3, [r2, #20]
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_GPIO_Init+0xd4>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_GPIO_Init+0xd4>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTH22_GPIO_Port, DTH22_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_GPIO_Init+0xd8>)
 80019aa:	f000 fffd 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	480f      	ldr	r0, [pc, #60]	; (8001a04 <MX_GPIO_Init+0xd8>)
 80019c6:	f000 fe4d 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTH22_Pin */
  GPIO_InitStruct.Pin = DTH22_Pin;
 80019ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DTH22_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <MX_GPIO_Init+0xd8>)
 80019e4:	f000 fe3e 	bl	8002664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2105      	movs	r1, #5
 80019ec:	2028      	movs	r0, #40	; 0x28
 80019ee:	f000 fc5d 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019f2:	2028      	movs	r0, #40	; 0x28
 80019f4:	f000 fc76 	bl	80022e4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000800 	.word	0x48000800

08001a08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	DTH22_Work();
 8001a10:	f7ff fbba 	bl	8001188 <DTH22_Work>
	vTaskDelay(100);
 8001a14:	2064      	movs	r0, #100	; 0x64
 8001a16:	f004 fec5 	bl	80067a4 <vTaskDelay>
	DTH22_Work();
 8001a1a:	e7f9      	b.n	8001a10 <StartDefaultTask+0x8>

08001a1c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(clear){
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <StartTask02+0x3c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <StartTask02+0x1a>
		  lcdClear();
 8001a2c:	f7ff fa61 	bl	8000ef2 <lcdClear>
		  clear = FALSE;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <StartTask02+0x3c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	  }
		if(flag == 0){
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <StartTask02+0x40>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <StartTask02+0x28>
		Show_Climat();
 8001a3e:	f7ff fb6d 	bl	800111c <Show_Climat>
 8001a42:	e005      	b.n	8001a50 <StartTask02+0x34>
		}
		else if(flag == 1){
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <StartTask02+0x40>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <StartTask02+0x34>
		second_screen();
 8001a4c:	f7ff fdac 	bl	80015a8 <second_screen>
		}
		vTaskDelay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f004 fea7 	bl	80067a4 <vTaskDelay>
	  if(clear){
 8001a56:	e7e5      	b.n	8001a24 <StartTask02+0x8>
 8001a58:	20000592 	.word	0x20000592
 8001a5c:	20000593 	.word	0x20000593

08001a60 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
 8001a68:	e7fe      	b.n	8001a68 <StartTask03+0x8>
	...

08001a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
    if (htim->Instance == TIM2 && i>0){
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d123      	bne.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dd1f      	ble.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x5a>
	arr_temp[i] = tCelsius;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4915      	ldr	r1, [pc, #84]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	arr_humidity[i] = RH;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4913      	ldr	r1, [pc, #76]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i+1)%60;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8001aae:	4413      	add	r3, r2
 8001ab0:	1159      	asrs	r1, r3, #5
 8001ab2:	17d3      	asrs	r3, r2, #31
 8001ab4:	1ac9      	subs	r1, r1, r3
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	1a5b      	subs	r3, r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	1ad1      	subs	r1, r2, r3
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ac2:	6019      	str	r1, [r3, #0]
	    HAL_IncTick();
	}
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac4:	e006      	b.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0x68>
	else if (htim->Instance == TIM7){
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0x68>
	    HAL_IncTick();
 8001ad0:	f000 faf0 	bl	80020b4 <HAL_IncTick>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200007b0 	.word	0x200007b0
 8001ae0:	200005c4 	.word	0x200005c4
 8001ae4:	200005d0 	.word	0x200005d0
 8001ae8:	200005cc 	.word	0x200005cc
 8001aec:	200006c0 	.word	0x200006c0
 8001af0:	88888889 	.word	0x88888889
 8001af4:	40001400 	.word	0x40001400

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_MspInit+0x8c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	f06f 0001 	mvn.w	r0, #1
 8001b42:	f000 fbb3 	bl	80022ac <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fbae 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fbc7 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	2004      	movs	r0, #4
 8001b5c:	f000 fba6 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f000 fbbf 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f000 fb9e 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b70:	2005      	movs	r0, #5
 8001b72:	f000 fbb7 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	2051      	movs	r0, #81	; 0x51
 8001b7c:	f000 fb96 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001b80:	2051      	movs	r0, #81	; 0x51
 8001b82:	f000 fbaf 	bl	80022e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_I2C_MspInit+0x9c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d138      	bne.n	8001c28 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4813      	ldr	r0, [pc, #76]	; (8001c38 <HAL_I2C_MspInit+0xa4>)
 8001bec:	f000 fd3a 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfa:	61d3      	str	r3, [r2, #28]
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_I2C_MspInit+0xa0>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	201f      	movs	r0, #31
 8001c0e:	f000 fb4d 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c12:	201f      	movs	r0, #31
 8001c14:	f000 fb66 	bl	80022e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	2020      	movs	r0, #32
 8001c1e:	f000 fb45 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c22:	2020      	movs	r0, #32
 8001c24:	f000 fb5e 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d114      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	201c      	movs	r0, #28
 8001c6c:	f000 fb1e 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c70:	201c      	movs	r0, #28
 8001c72:	f000 fb37 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c76:	e018      	b.n	8001caa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d113      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	2036      	movs	r0, #54	; 0x36
 8001ca0:	f000 fb04 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ca4:	2036      	movs	r0, #54	; 0x36
 8001ca6:	f000 fb1d 	bl	80022e4 <HAL_NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40001000 	.word	0x40001000

08001cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_InitTick+0xe0>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <HAL_InitTick+0xe0>)
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_InitTick+0xe0>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fb26 	bl	8005340 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cfe:	f003 fafd 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8001d02:	6378      	str	r0, [r7, #52]	; 0x34
 8001d04:	e004      	b.n	8001d10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d06:	f003 faf9 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d12:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <HAL_InitTick+0xe4>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_InitTick+0xec>)
 8001d22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d2a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001d44:	4817      	ldr	r0, [pc, #92]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d46:	f003 fd4b 	bl	80057e0 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11b      	bne.n	8001d90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001d58:	4812      	ldr	r0, [pc, #72]	; (8001da4 <HAL_InitTick+0xe8>)
 8001d5a:	f003 fe01 	bl	8005960 <HAL_TIM_Base_Start_IT>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d6c:	2037      	movs	r0, #55	; 0x37
 8001d6e:	f000 fab9 	bl	80022e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d808      	bhi.n	8001d8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	2037      	movs	r0, #55	; 0x37
 8001d7e:	f000 fa95 	bl	80022ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_InitTick+0xf0>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e002      	b.n	8001d90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	200007d4 	.word	0x200007d4
 8001da8:	40001400 	.word	0x40001400
 8001dac:	20000004 	.word	0x20000004

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <NMI_Handler+0x4>

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001de0:	f002 f82c 	bl	8003e3c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001dec:	f000 fad4 	bl	8002398 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM2_IRQHandler+0x10>)
 8001e0a:	f003 fe19 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200004e8 	.word	0x200004e8

08001e18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <I2C1_EV_IRQHandler+0x10>)
 8001e1e:	f000 ff97 	bl	8002d50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000494 	.word	0x20000494

08001e2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <I2C1_ER_IRQHandler+0x10>)
 8001e32:	f000 ffa7 	bl	8002d84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000494 	.word	0x20000494

08001e40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001e44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e48:	f000 fdc6 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM6_DAC_IRQHandler+0x10>)
 8001e56:	f003 fdf3 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000534 	.word	0x20000534

08001e64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM7_IRQHandler+0x10>)
 8001e6a:	f003 fde9 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200007d4 	.word	0x200007d4

08001e78 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return 1;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_kill>:

int _kill(int pid, int sig)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea0:	f006 fc58 	bl	8008754 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_exit>:

void _exit (int status)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffe7 	bl	8001e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec8:	e7fe      	b.n	8001ec8 <_exit+0x12>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf0      	blt.n	8001edc <_read+0x12>
  }

  return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e009      	b.n	8001f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbf1      	blt.n	8001f16 <_write+0x12>
  }
  return len;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_close>:

int _close(int file)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f64:	605a      	str	r2, [r3, #4]
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_isatty>:

int _isatty(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f006 fbbe 	bl	8008754 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20010000 	.word	0x20010000
 8002004:	00000400 	.word	0x00000400
 8002008:	20000820 	.word	0x20000820
 800200c:	200031f0 	.word	0x200031f0

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002038:	f7ff ffea 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <LoopForever+0x6>)
  ldr r1, =_edata
 800203e:	490d      	ldr	r1, [pc, #52]	; (8002074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <LoopForever+0xe>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002054:	4c0a      	ldr	r4, [pc, #40]	; (8002080 <LoopForever+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002062:	f006 fb7d 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002066:	f7ff fad7 	bl	8001618 <main>

0800206a <LoopForever>:

LoopForever:
    b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800206c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002078:	0800c450 	.word	0x0800c450
  ldr r2, =_sbss
 800207c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002080:	200031f0 	.word	0x200031f0

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>
	...

08002088 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 f8fc 	bl	8002296 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	200f      	movs	r0, #15
 80020a0:	f7ff fe0c 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fd2e 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x20>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x24>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_IncTick+0x24>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000824 	.word	0x20000824

080020dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return uwTick;  
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_GetTick+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000824 	.word	0x20000824

080020f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff ffee 	bl	80020dc <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d005      	beq.n	800211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_Delay+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800211a:	bf00      	nop
 800211c:	f7ff ffde 	bl	80020dc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f7      	bhi.n	800211c <HAL_Delay+0x28>
  {
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff4c 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022be:	f7ff ff61 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f7ff ffb1 	bl	8002230 <NVIC_EncodePriority>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff80 	bl	80021dc <__NVIC_SetPriority>
}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff54 	bl	80021a0 <__NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002312:	2b02      	cmp	r3, #2
 8002314:	d005      	beq.n	8002322 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e027      	b.n	8002372 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020e 	bic.w	r2, r2, #14
 8002330:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
    } 
  }
  return status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d005      	beq.n	80023ba <HAL_FLASH_IRQHandler+0x22>
 80023ae:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d10e      	bne.n	80023d8 <HAL_FLASH_IRQHandler+0x40>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80023ba:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80023c2:	f04f 32ff 	mov.w	r2, #4294967295
 80023c6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80023c8:	f000 f8fa 	bl	80025c0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8d1 	bl	8002574 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 80a0 	bne.w	8002526 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80023e8:	2220      	movs	r2, #32
 80023ea:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80023ec:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8097 	beq.w	8002526 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80023f8:	4b58      	ldr	r3, [pc, #352]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12d      	bne.n	800245e <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a54      	ldr	r2, [pc, #336]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800240a:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8a0 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002420:	4b4e      	ldr	r3, [pc, #312]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002428:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800242a:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002430:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 8002436:	f023 0302 	bic.w	r3, r3, #2
 800243a:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8f1 	bl	8002624 <FLASH_PageErase>
 8002442:	e070      	b.n	8002526 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4a44      	ldr	r2, [pc, #272]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f882 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
 800245c:	e063      	b.n	8002526 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d10c      	bne.n	8002482 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4a3a      	ldr	r2, [pc, #232]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6113      	str	r3, [r2, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002474:	2000      	movs	r0, #0
 8002476:	f000 f873 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e051      	b.n	8002526 <HAL_FLASH_IRQHandler+0x18e>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002482:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800248a:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d024      	beq.n	80024de <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	3302      	adds	r3, #2
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800249c:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	0c02      	lsrs	r2, r0, #16
 80024b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024b8:	0c0b      	lsrs	r3, r1, #16
 80024ba:	4928      	ldr	r1, [pc, #160]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024d2:	b293      	uxth	r3, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f856 	bl	8002588 <FLASH_Program_HalfWord>
 80024dc:	e023      	b.n	8002526 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d105      	bne.n	80024f4 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f837 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
 80024f2:	e011      	b.n	8002518 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d106      	bne.n	800250c <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	3b02      	subs	r3, #2
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f82b 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
 800250a:	e005      	b.n	8002518 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	3b06      	subs	r3, #6
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f824 	bl	8002560 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10e      	bne.n	800254e <HAL_FLASH_IRQHandler+0x1b6>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <HAL_FLASH_IRQHandler+0x1c0>)
 8002542:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8002546:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_FLASH_IRQHandler+0x1c4>)
 800254a:	2200      	movs	r2, #0
 800254c:	761a      	strb	r2, [r3, #24]
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	20000828 	.word	0x20000828

08002560 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <FLASH_Program_HalfWord+0x30>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <FLASH_Program_HalfWord+0x34>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <FLASH_Program_HalfWord+0x34>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	801a      	strh	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	20000828 	.word	0x20000828
 80025bc:	40022000 	.word	0x40022000

080025c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <FLASH_SetErrorCode+0x5c>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d109      	bne.n	80025ea <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <FLASH_SetErrorCode+0x60>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <FLASH_SetErrorCode+0x60>)
 80025e0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <FLASH_SetErrorCode+0x5c>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d109      	bne.n	800260a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <FLASH_SetErrorCode+0x60>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <FLASH_SetErrorCode+0x60>)
 8002600:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <FLASH_SetErrorCode+0x5c>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60d3      	str	r3, [r2, #12]
}  
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40022000 	.word	0x40022000
 8002620:	20000828 	.word	0x20000828

08002624 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <FLASH_PageErase+0x38>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <FLASH_PageErase+0x3c>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <FLASH_PageErase+0x3c>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <FLASH_PageErase+0x3c>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <FLASH_PageErase+0x3c>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4a05      	ldr	r2, [pc, #20]	; (8002660 <FLASH_PageErase+0x3c>)
 800264a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264e:	6113      	str	r3, [r2, #16]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	20000828 	.word	0x20000828
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002672:	e160      	b.n	8002936 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8152 	beq.w	8002930 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d005      	beq.n	80026a4 <HAL_GPIO_Init+0x40>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d130      	bne.n	8002706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026da:	2201      	movs	r2, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0201 	and.w	r2, r3, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b03      	cmp	r3, #3
 8002710:	d017      	beq.n	8002742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d123      	bne.n	8002796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0203 	and.w	r2, r3, #3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80ac 	beq.w	8002930 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d8:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f0:	4a59      	ldr	r2, [pc, #356]	; (8002958 <HAL_GPIO_Init+0x2f4>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800281a:	d025      	beq.n	8002868 <HAL_GPIO_Init+0x204>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x2f8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01f      	beq.n	8002864 <HAL_GPIO_Init+0x200>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d019      	beq.n	8002860 <HAL_GPIO_Init+0x1fc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x300>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_GPIO_Init+0x1f8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1f4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_GPIO_Init+0x308>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1f0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_GPIO_Init+0x30c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1ec>
 800284c:	2306      	movs	r3, #6
 800284e:	e00c      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002850:	2307      	movs	r3, #7
 8002852:	e00a      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002854:	2305      	movs	r3, #5
 8002856:	e008      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002858:	2304      	movs	r3, #4
 800285a:	e006      	b.n	800286a <HAL_GPIO_Init+0x206>
 800285c:	2303      	movs	r3, #3
 800285e:	e004      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002860:	2302      	movs	r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_GPIO_Init+0x206>
 8002868:	2300      	movs	r3, #0
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	f002 0203 	and.w	r2, r2, #3
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4093      	lsls	r3, r2
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800287a:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_GPIO_Init+0x2f4>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_GPIO_Init+0x310>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_GPIO_Init+0x310>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_GPIO_Init+0x310>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028d6:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_GPIO_Init+0x310>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_GPIO_Init+0x310>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_GPIO_Init+0x310>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f ae97 	bne.w	8002674 <HAL_GPIO_Init+0x10>
  }
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000
 800295c:	48000400 	.word	0x48000400
 8002960:	48000800 	.word	0x48000800
 8002964:	48000c00 	.word	0x48000c00
 8002968:	48001000 	.word	0x48001000
 800296c:	48001400 	.word	0x48001400
 8002970:	48001800 	.word	0x48001800
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e001      	b.n	800299a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fc84 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e081      	b.n	8002b1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff f8b0 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e006      	b.n	8002a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d104      	bne.n	8002aa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69d9      	ldr	r1, [r3, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	813b      	strh	r3, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	f040 80f9 	bne.w	8002d42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x34>
 8002b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0ed      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Mem_Write+0x4e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e0e6      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b7e:	f7ff faad 	bl	80020dc <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2319      	movs	r3, #25
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fe72 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0d1      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc8:	88f8      	ldrh	r0, [r7, #6]
 8002bca:	893a      	ldrh	r2, [r7, #8]
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fa67 	bl	80030ac <I2C_RequestMemoryWrite>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0a9      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2bff      	cmp	r3, #255	; 0xff
 8002bf8:	d90e      	bls.n	8002c18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 ffeb 	bl	8003bec <I2C_TransferConfig>
 8002c16:	e00f      	b.n	8002c38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	8979      	ldrh	r1, [r7, #10]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 ffda 	bl	8003bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fe6b 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e07b      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d034      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x1c8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d130      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fdee 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e04d      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d90e      	bls.n	8002cd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 ff8f 	bl	8003bec <I2C_TransferConfig>
 8002cce:	e00f      	b.n	8002cf0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 ff7e 	bl	8003bec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d19e      	bne.n	8002c38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fe51 	bl	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01a      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_I2C_Mem_Write+0x224>)
 8002d22:	400b      	ands	r3, r1
 8002d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00f      	beq.n	8002dc6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f043 0208 	orr.w	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00f      	beq.n	8002e1a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e18:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 030b 	and.w	r3, r3, #11
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fbcb 	bl	80035c8 <I2C_ITError>
  }
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	70fb      	strb	r3, [r7, #3]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <I2C_Slave_ISR_IT+0x24>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0e1      	b.n	80030a2 <I2C_Slave_ISR_IT+0x1e8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002efa:	6939      	ldr	r1, [r7, #16]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fa09 	bl	8003314 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d04b      	beq.n	8002fa4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d046      	beq.n	8002fa4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d128      	bne.n	8002f72 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b28      	cmp	r3, #40	; 0x28
 8002f2a:	d108      	bne.n	8002f3e <I2C_Slave_ISR_IT+0x84>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f32:	d104      	bne.n	8002f3e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f34:	6939      	ldr	r1, [r7, #16]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 faf2 	bl	8003520 <I2C_ITListenCplt>
 8002f3c:	e031      	b.n	8002fa2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b29      	cmp	r3, #41	; 0x29
 8002f48:	d10e      	bne.n	8002f68 <I2C_Slave_ISR_IT+0xae>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f50:	d00a      	beq.n	8002f68 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2210      	movs	r2, #16
 8002f58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc4b 	bl	80037f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f97b 	bl	800325c <I2C_ITSlaveSeqCplt>
 8002f66:	e01c      	b.n	8002fa2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f70:	e08f      	b.n	8003092 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2210      	movs	r2, #16
 8002f78:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f043 0204 	orr.w	r2, r3, #4
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <I2C_Slave_ISR_IT+0xda>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f92:	d17e      	bne.n	8003092 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	4619      	mov	r1, r3
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fb14 	bl	80035c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002fa0:	e077      	b.n	8003092 <I2C_Slave_ISR_IT+0x1d8>
 8002fa2:	e076      	b.n	8003092 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02f      	beq.n	800300e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02a      	beq.n	800300e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d14b      	bne.n	8003096 <I2C_Slave_ISR_IT+0x1dc>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003004:	d047      	beq.n	8003096 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f928 	bl	800325c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800300c:	e043      	b.n	8003096 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f895 	bl	8003154 <I2C_ITAddrCplt>
 800302a:	e035      	b.n	8003098 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d030      	beq.n	8003098 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02b      	beq.n	8003098 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
 800307a:	e00d      	b.n	8003098 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003082:	d002      	beq.n	800308a <I2C_Slave_ISR_IT+0x1d0>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f8e6 	bl	800325c <I2C_ITSlaveSeqCplt>
 8003090:	e002      	b.n	8003098 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003096:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <I2C_RequestMemoryWrite+0xa4>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fd89 	bl	8003bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fc1a 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e02c      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	e015      	b.n	800312c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fc00 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e012      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2200      	movs	r2, #0
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fb9f 	bl	800387a <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	80002000 	.word	0x80002000

08003154 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800316a:	2b28      	cmp	r3, #40	; 0x28
 800316c:	d16a      	bne.n	8003244 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	b29b      	uxth	r3, r3
 8003188:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800318c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031a8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d138      	bne.n	8003224 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80031b2:	897b      	ldrh	r3, [r7, #10]
 80031b4:	09db      	lsrs	r3, r3, #7
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	89bb      	ldrh	r3, [r7, #12]
 80031ba:	4053      	eors	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f003 0306 	and.w	r3, r3, #6
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11c      	bne.n	8003200 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d13b      	bne.n	8003254 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031f2:	89ba      	ldrh	r2, [r7, #12]
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fe32 	bl	8002e62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031fe:	e029      	b.n	8003254 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fd21 	bl	8003c50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003216:	89ba      	ldrh	r2, [r7, #12]
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fe20 	bl	8002e62 <HAL_I2C_AddrCallback>
}
 8003222:	e017      	b.n	8003254 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fd11 	bl	8003c50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003236:	89ba      	ldrh	r2, [r7, #12]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fe10 	bl	8002e62 <HAL_I2C_AddrCallback>
}
 8003242:	e007      	b.n	8003254 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2208      	movs	r2, #8
 800324a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e00c      	b.n	80032aa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b29      	cmp	r3, #41	; 0x29
 80032b4:	d112      	bne.n	80032dc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2228      	movs	r2, #40	; 0x28
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c4:	2101      	movs	r1, #1
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fcc2 	bl	8003c50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fdb0 	bl	8002e3a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032da:	e017      	b.n	800330c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b2a      	cmp	r3, #42	; 0x2a
 80032e6:	d111      	bne.n	800330c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2228      	movs	r2, #40	; 0x28
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2222      	movs	r2, #34	; 0x22
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032f6:	2102      	movs	r1, #2
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fca9 	bl	8003c50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fda1 	bl	8002e4e <HAL_I2C_SlaveRxCpltCallback>
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b21      	cmp	r3, #33	; 0x21
 800333e:	d002      	beq.n	8003346 <I2C_ITSlaveCplt+0x32>
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b29      	cmp	r3, #41	; 0x29
 8003344:	d108      	bne.n	8003358 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003346:	f248 0101 	movw	r1, #32769	; 0x8001
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fc80 	bl	8003c50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
 8003356:	e00d      	b.n	8003374 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b22      	cmp	r3, #34	; 0x22
 800335c:	d002      	beq.n	8003364 <I2C_ITSlaveCplt+0x50>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b2a      	cmp	r3, #42	; 0x2a
 8003362:	d107      	bne.n	8003374 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003364:	f248 0102 	movw	r1, #32770	; 0x8002
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fc71 	bl	8003c50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2222      	movs	r2, #34	; 0x22
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003382:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b62      	ldr	r3, [pc, #392]	; (8003518 <I2C_ITSlaveCplt+0x204>)
 8003390:	400b      	ands	r3, r1
 8003392:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fa2e 	bl	80037f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ca:	e017      	b.n	80033fc <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8a4 	bl	80035c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b28      	cmp	r3, #40	; 0x28
 800348a:	d141      	bne.n	8003510 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800348c:	6979      	ldr	r1, [r7, #20]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f846 	bl	8003520 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003494:	e03c      	b.n	8003510 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800349e:	d014      	beq.n	80034ca <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fedb 	bl	800325c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <I2C_ITSlaveCplt+0x208>)
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fcdb 	bl	8002e7e <HAL_I2C_ListenCpltCallback>
}
 80034c8:	e022      	b.n	8003510 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b22      	cmp	r3, #34	; 0x22
 80034d4:	d10e      	bne.n	80034f4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fcae 	bl	8002e4e <HAL_I2C_SlaveRxCpltCallback>
}
 80034f2:	e00d      	b.n	8003510 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fc95 	bl	8002e3a <HAL_I2C_SlaveTxCpltCallback>
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	fe00e800 	.word	0xfe00e800
 800351c:	ffff0000 	.word	0xffff0000

08003520 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <I2C_ITListenCplt+0xa4>)
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d022      	beq.n	800359c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800359c:	f248 0103 	movw	r1, #32771	; 0x8003
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb55 	bl	8003c50 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2210      	movs	r2, #16
 80035ac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fc61 	bl	8002e7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	ffff0000 	.word	0xffff0000

080035c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a6d      	ldr	r2, [pc, #436]	; (800379c <I2C_ITError+0x1d4>)
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b28      	cmp	r3, #40	; 0x28
 80035fe:	d005      	beq.n	800360c <I2C_ITError+0x44>
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b29      	cmp	r3, #41	; 0x29
 8003604:	d002      	beq.n	800360c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b2a      	cmp	r3, #42	; 0x2a
 800360a:	d10b      	bne.n	8003624 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800360c:	2103      	movs	r1, #3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fb1e 	bl	8003c50 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2228      	movs	r2, #40	; 0x28
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <I2C_ITError+0x1d8>)
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
 8003622:	e030      	b.n	8003686 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003624:	f248 0103 	movw	r1, #32771	; 0x8003
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fb11 	bl	8003c50 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8e1 	bl	80037f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b60      	cmp	r3, #96	; 0x60
 800363e:	d01f      	beq.n	8003680 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d114      	bne.n	8003680 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d109      	bne.n	8003678 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2210      	movs	r2, #16
 800366a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2220      	movs	r2, #32
 800367e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d039      	beq.n	8003708 <I2C_ITError+0x140>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b11      	cmp	r3, #17
 8003698:	d002      	beq.n	80036a0 <I2C_ITError+0xd8>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b21      	cmp	r3, #33	; 0x21
 800369e:	d133      	bne.n	8003708 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d107      	bne.n	80036c0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fe59 	bl	800237c <HAL_DMA_GetState>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d017      	beq.n	8003700 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <I2C_ITError+0x1dc>)
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe fe0b 	bl	8002300 <HAL_DMA_Abort_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d04d      	beq.n	800378c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036fa:	4610      	mov	r0, r2
 80036fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036fe:	e045      	b.n	800378c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f851 	bl	80037a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003706:	e041      	b.n	800378c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d039      	beq.n	8003784 <I2C_ITError+0x1bc>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b12      	cmp	r3, #18
 8003714:	d002      	beq.n	800371c <I2C_ITError+0x154>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b22      	cmp	r3, #34	; 0x22
 800371a:	d133      	bne.n	8003784 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372a:	d107      	bne.n	800373c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fe1b 	bl	800237c <HAL_DMA_GetState>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d017      	beq.n	800377c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <I2C_ITError+0x1dc>)
 8003752:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fdcd 	bl	8002300 <HAL_DMA_Abort_IT>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003776:	4610      	mov	r0, r2
 8003778:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800377a:	e009      	b.n	8003790 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f813 	bl	80037a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003782:	e005      	b.n	8003790 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f80f 	bl	80037a8 <I2C_TreatErrorCallback>
  }
}
 800378a:	e002      	b.n	8003792 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003790:	bf00      	nop
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	ffff0000 	.word	0xffff0000
 80037a0:	08002ebb 	.word	0x08002ebb
 80037a4:	0800383f 	.word	0x0800383f

080037a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b60      	cmp	r3, #96	; 0x60
 80037ba:	d10e      	bne.n	80037da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fb67 	bl	8002ea6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037d8:	e009      	b.n	80037ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fb52 	bl	8002e92 <HAL_I2C_ErrorCallback>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d103      	bne.n	8003814 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d007      	beq.n	8003832 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	619a      	str	r2, [r3, #24]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff ff9b 	bl	80037a8 <I2C_TreatErrorCallback>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388a:	e031      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d02d      	beq.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7fe fc22 	bl	80020dc <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d122      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d113      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00f      	b.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	429a      	cmp	r2, r3
 800390c:	d0be      	beq.n	800388c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003924:	e033      	b.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f87e 	bl	8003a2c <I2C_IsErrorOccurred>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d025      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe fbcb 	bl	80020dc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d013      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d1c4      	bne.n	8003926 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b2:	e02f      	b.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f837 	bl	8003a2c <I2C_IsErrorOccurred>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fe fb88 	bl	80020dc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11a      	bne.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d013      	beq.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d1c8      	bne.n	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d068      	beq.n	8003b2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a60:	e049      	b.n	8003af6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d045      	beq.n	8003af6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fb37 	bl	80020dc <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_IsErrorOccurred+0x54>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13a      	bne.n	8003af6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa2:	d121      	bne.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aaa:	d01d      	beq.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d01a      	beq.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ac2:	f7fe fb0b 	bl	80020dc <HAL_GetTick>
 8003ac6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac8:	e00e      	b.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aca:	f7fe fb07 	bl	80020dc <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b19      	cmp	r3, #25
 8003ad6:	d907      	bls.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ae6:	e006      	b.n	8003af6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d1e9      	bne.n	8003aca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d003      	beq.n	8003b0c <I2C_IsErrorOccurred+0xe0>
 8003b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0aa      	beq.n	8003a62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f043 0304 	orr.w	r3, r3, #4
 8003b22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff fe28 	bl	80037f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <I2C_IsErrorOccurred+0x1bc>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	fe00e800 	.word	0xfe00e800

08003bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c04:	7a7b      	ldrb	r3, [r7, #9]
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0d5b      	lsrs	r3, r3, #21
 8003c26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <I2C_TransferConfig+0x60>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	ea02 0103 	and.w	r1, r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	03ff63ff 	.word	0x03ff63ff

08003c50 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c70:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c7e:	2b28      	cmp	r3, #40	; 0x28
 8003c80:	d003      	beq.n	8003c8a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003c9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca8:	2b28      	cmp	r3, #40	; 0x28
 8003caa:	d003      	beq.n	8003cb4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cb2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da03      	bge.n	8003cc4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d103      	bne.n	8003cd2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d103      	bne.n	8003ce0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f043 0320 	orr.w	r3, r3, #32
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d103      	bne.n	8003cee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d138      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e032      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d139      	bne.n	8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e033      	b.n	8003e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	; 0x24
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003df4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003e4c:	f000 f808 	bl	8003e60 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e56:	615a      	str	r2, [r3, #20]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40010400 	.word	0x40010400

08003e60 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f001 b83a 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 816f 	beq.w	800418a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003eac:	4bb5      	ldr	r3, [pc, #724]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d00c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003eb8:	4bb2      	ldr	r3, [pc, #712]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d15c      	bne.n	8003f7e <HAL_RCC_OscConfig+0x10e>
 8003ec4:	4baf      	ldr	r3, [pc, #700]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d155      	bne.n	8003f7e <HAL_RCC_OscConfig+0x10e>
 8003ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ee6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x94>
 8003efe:	4ba1      	ldr	r3, [pc, #644]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e015      	b.n	8003f30 <HAL_RCC_OscConfig+0xc0>
 8003f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003f20:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f2c:	4b95      	ldr	r3, [pc, #596]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f34:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003f38:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003f3c:	fa92 f2a2 	rbit	r2, r2
 8003f40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003f44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8111 	beq.w	8004188 <HAL_RCC_OscConfig+0x318>
 8003f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8108 	bne.w	8004188 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f000 bfc6 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x12e>
 8003f90:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7b      	ldr	r2, [pc, #492]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e036      	b.n	800400c <HAL_RCC_OscConfig+0x19c>
 8003f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x158>
 8003fae:	4b75      	ldr	r3, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b72      	ldr	r3, [pc, #456]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a71      	ldr	r2, [pc, #452]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e021      	b.n	800400c <HAL_RCC_OscConfig+0x19c>
 8003fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x184>
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a69      	ldr	r2, [pc, #420]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a66      	ldr	r2, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x19c>
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a62      	ldr	r2, [pc, #392]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b60      	ldr	r3, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5f      	ldr	r2, [pc, #380]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d059      	beq.n	80040d0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fe f85e 	bl	80020dc <HAL_GetTick>
 8004020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004026:	f7fe f859 	bl	80020dc <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d902      	bls.n	800403c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f000 bf67 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 800403c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004040:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004050:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0x1fe>
 8004068:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0x22a>
 800406e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004072:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004086:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800408a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80040a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80040a6:	fa92 f2a2 	rbit	r2, r2
 80040aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80040ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80040b2:	fab2 f282 	clz	r2, r2
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f042 0220 	orr.w	r2, r2, #32
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f002 021f 	and.w	r2, r2, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ab      	beq.n	8004026 <HAL_RCC_OscConfig+0x1b6>
 80040ce:	e05c      	b.n	800418a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe f804 	bl	80020dc <HAL_GetTick>
 80040d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040da:	f7fd ffff 	bl	80020dc <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d902      	bls.n	80040f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	f000 bf0d 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 80040f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004104:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0x2b2>
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e015      	b.n	800414e <HAL_RCC_OscConfig+0x2de>
 8004122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800413a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800413e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RCC_OscConfig+0x314>)
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004152:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004156:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800415a:	fa92 f2a2 	rbit	r2, r2
 800415e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004162:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004166:	fab2 f282 	clz	r2, r2
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	f042 0220 	orr.w	r2, r2, #32
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	f002 021f 	and.w	r2, r2, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f202 	lsl.w	r2, r1, r2
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ab      	bne.n	80040da <HAL_RCC_OscConfig+0x26a>
 8004182:	e002      	b.n	800418a <HAL_RCC_OscConfig+0x31a>
 8004184:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 817f 	beq.w	800449e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041a0:	4ba7      	ldr	r3, [pc, #668]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00c      	beq.n	80041c6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041ac:	4ba4      	ldr	r3, [pc, #656]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d173      	bne.n	80042a0 <HAL_RCC_OscConfig+0x430>
 80041b8:	4ba1      	ldr	r3, [pc, #644]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	d16c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x430>
 80041c6:	2302      	movs	r3, #2
 80041c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80041d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_RCC_OscConfig+0x386>
 80041f0:	4b93      	ldr	r3, [pc, #588]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	e013      	b.n	800421e <HAL_RCC_OscConfig+0x3ae>
 80041f6:	2302      	movs	r3, #2
 80041f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004208:	2302      	movs	r3, #2
 800420a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800420e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800421a:	4b89      	ldr	r3, [pc, #548]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2202      	movs	r2, #2
 8004220:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004224:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004230:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004234:	fab2 f282 	clz	r2, r2
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	f042 0220 	orr.w	r2, r2, #32
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	f002 021f 	and.w	r2, r2, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCC_OscConfig+0x3f6>
 8004250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004254:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f000 be52 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b76      	ldr	r3, [pc, #472]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	21f8      	movs	r1, #248	; 0xf8
 800427c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004284:	fa91 f1a1 	rbit	r1, r1
 8004288:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800428c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004290:	fab1 f181 	clz	r1, r1
 8004294:	b2c9      	uxtb	r1, r1
 8004296:	408b      	lsls	r3, r1
 8004298:	4969      	ldr	r1, [pc, #420]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	e0fe      	b.n	800449e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8088 	beq.w	80043c2 <HAL_RCC_OscConfig+0x552>
 80042b2:	2301      	movs	r3, #1
 80042b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80042c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	2301      	movs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd fefd 	bl	80020dc <HAL_GetTick>
 80042e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fd fef8 	bl	80020dc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d902      	bls.n	80042fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	f000 be06 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 80042fe:	2302      	movs	r3, #2
 8004300:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004310:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0x4be>
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	e013      	b.n	8004356 <HAL_RCC_OscConfig+0x4e6>
 800432e:	2302      	movs	r3, #2
 8004330:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004340:	2302      	movs	r3, #2
 8004342:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004346:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2202      	movs	r2, #2
 8004358:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800435c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004360:	fa92 f2a2 	rbit	r2, r2
 8004364:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004368:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	f042 0220 	orr.w	r2, r2, #32
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f002 021f 	and.w	r2, r2, #31
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0af      	beq.n	80042e8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	21f8      	movs	r1, #248	; 0xf8
 800439e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80043a6:	fa91 f1a1 	rbit	r1, r1
 80043aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80043ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80043b2:	fab1 f181 	clz	r1, r1
 80043b6:	b2c9      	uxtb	r1, r1
 80043b8:	408b      	lsls	r3, r1
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
 80043c0:	e06d      	b.n	800449e <HAL_RCC_OscConfig+0x62e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80043d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	2300      	movs	r3, #0
 80043ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fd fe75 	bl	80020dc <HAL_GetTick>
 80043f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fd fe70 	bl	80020dc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	f000 bd7e 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 800440e:	2302      	movs	r3, #2
 8004410:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0x5d4>
 8004438:	4b01      	ldr	r3, [pc, #4]	; (8004440 <HAL_RCC_OscConfig+0x5d0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	e016      	b.n	800446c <HAL_RCC_OscConfig+0x5fc>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004456:	2302      	movs	r3, #2
 8004458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800445c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004468:	4bbf      	ldr	r3, [pc, #764]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2202      	movs	r2, #2
 800446e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004472:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004476:	fa92 f2a2 	rbit	r2, r2
 800447a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800447e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ac      	bne.n	80043f8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8113 	beq.w	80046da <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d07c      	beq.n	80045be <HAL_RCC_OscConfig+0x74e>
 80044c4:	2301      	movs	r3, #1
 80044c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80044d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	4ba2      	ldr	r3, [pc, #648]	; (800476c <HAL_RCC_OscConfig+0x8fc>)
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	461a      	mov	r2, r3
 80044ea:	2301      	movs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fd fdf5 	bl	80020dc <HAL_GetTick>
 80044f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f8:	f7fd fdf0 	bl	80020dc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d902      	bls.n	800450e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	f000 bcfe 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 800450e:	2302      	movs	r3, #2
 8004510:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004518:	fa93 f2a3 	rbit	r2, r3
 800451c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004520:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800452a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800452e:	2202      	movs	r2, #2
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fa93 f2a3 	rbit	r2, r3
 8004540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800454e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004552:	2202      	movs	r2, #2
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	fa93 f2a3 	rbit	r2, r3
 8004564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004568:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800456c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 8004570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800457a:	2102      	movs	r1, #2
 800457c:	6019      	str	r1, [r3, #0]
 800457e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004582:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f1a3 	rbit	r1, r3
 800458c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004594:	6019      	str	r1, [r3, #0]
  return result;
 8004596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d09d      	beq.n	80044f8 <HAL_RCC_OscConfig+0x688>
 80045bc:	e08d      	b.n	80046da <HAL_RCC_OscConfig+0x86a>
 80045be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	fa93 f2a3 	rbit	r2, r3
 80045d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80045e0:	601a      	str	r2, [r3, #0]
  return result;
 80045e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80045ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_RCC_OscConfig+0x8fc>)
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fd fd6c 	bl	80020dc <HAL_GetTick>
 8004604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460a:	f7fd fd67 	bl	80020dc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	f000 bc75 	b.w	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004624:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004630:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800463e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800464c:	2202      	movs	r2, #2
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800466c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004678:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	fa93 f2a3 	rbit	r2, r3
 8004682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004686:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800468a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 800468e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004698:	2102      	movs	r1, #2
 800469a:	6019      	str	r1, [r3, #0]
 800469c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f1a3 	rbit	r1, r3
 80046aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80046b2:	6019      	str	r1, [r3, #0]
  return result;
 80046b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2101      	movs	r1, #1
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d197      	bne.n	800460a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 81a5 	beq.w	8004a3a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d116      	bne.n	8004730 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <HAL_RCC_OscConfig+0x8f8>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004728:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCC_OscConfig+0x900>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d121      	bne.n	8004780 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x900>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x900>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004748:	f7fd fcc8 	bl	80020dc <HAL_GetTick>
 800474c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e010      	b.n	8004774 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd fcc3 	bl	80020dc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d908      	bls.n	8004774 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e3d1      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	10908120 	.word	0x10908120
 8004770:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	4b8d      	ldr	r3, [pc, #564]	; (80049ac <HAL_RCC_OscConfig+0xb3c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0e8      	beq.n	8004752 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x92e>
 8004790:	4b87      	ldr	r3, [pc, #540]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a86      	ldr	r2, [pc, #536]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e035      	b.n	800480a <HAL_RCC_OscConfig+0x99a>
 800479e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x958>
 80047ae:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a7f      	ldr	r2, [pc, #508]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6213      	str	r3, [r2, #32]
 80047ba:	4b7d      	ldr	r3, [pc, #500]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a7c      	ldr	r2, [pc, #496]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	6213      	str	r3, [r2, #32]
 80047c6:	e020      	b.n	800480a <HAL_RCC_OscConfig+0x99a>
 80047c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x982>
 80047d8:	4b75      	ldr	r3, [pc, #468]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a74      	ldr	r2, [pc, #464]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6213      	str	r3, [r2, #32]
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	4a71      	ldr	r2, [pc, #452]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6213      	str	r3, [r2, #32]
 80047f0:	e00b      	b.n	800480a <HAL_RCC_OscConfig+0x99a>
 80047f2:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4a6b      	ldr	r2, [pc, #428]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800480e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8081 	beq.w	800491e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481c:	f7fd fc5e 	bl	80020dc <HAL_GetTick>
 8004820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004824:	e00b      	b.n	800483e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fd fc59 	bl	80020dc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e365      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004846:	2202      	movs	r2, #2
 8004848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800484e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	fa93 f2a3 	rbit	r2, r3
 8004858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004866:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800486a:	2202      	movs	r2, #2
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004872:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f2a3 	rbit	r2, r3
 800487c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004880:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004884:	601a      	str	r2, [r3, #0]
  return result;
 8004886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800488e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_OscConfig+0xa3a>
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	e013      	b.n	80048d2 <HAL_RCC_OscConfig+0xa62>
 80048aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048b2:	2202      	movs	r2, #2
 80048b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048da:	2102      	movs	r1, #2
 80048dc:	6011      	str	r1, [r2, #0]
 80048de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	fa92 f1a2 	rbit	r1, r2
 80048ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048f0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80048f4:	6011      	str	r1, [r2, #0]
  return result;
 80048f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048fa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	fab2 f282 	clz	r2, r2
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	f002 021f 	and.w	r2, r2, #31
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f202 	lsl.w	r2, r1, r2
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d084      	beq.n	8004826 <HAL_RCC_OscConfig+0x9b6>
 800491c:	e083      	b.n	8004a26 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fd fbdd 	bl	80020dc <HAL_GetTick>
 8004922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd fbd8 	bl	80020dc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e2e4      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004944:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004948:	2202      	movs	r2, #2
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004950:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fa93 f2a3 	rbit	r2, r3
 800495a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004968:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800496c:	2202      	movs	r2, #2
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004974:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	fa93 f2a3 	rbit	r2, r3
 800497e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004982:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004986:	601a      	str	r2, [r3, #0]
  return result;
 8004988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800498c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004990:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0xb44>
 80049a6:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <HAL_RCC_OscConfig+0xb40>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	e017      	b.n	80049dc <HAL_RCC_OscConfig+0xb6c>
 80049ac:	40007000 	.word	0x40007000
 80049b0:	40021000 	.word	0x40021000
 80049b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049bc:	2202      	movs	r2, #2
 80049be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	fa93 f2a3 	rbit	r2, r3
 80049ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	4bb3      	ldr	r3, [pc, #716]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049e4:	2102      	movs	r1, #2
 80049e6:	6011      	str	r1, [r2, #0]
 80049e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	fa92 f1a2 	rbit	r1, r2
 80049f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049fa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80049fe:	6011      	str	r1, [r2, #0]
  return result;
 8004a00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a04:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f002 021f 	and.w	r2, r2, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d180      	bne.n	8004928 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a26:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d105      	bne.n	8004a3a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2e:	4b9e      	ldr	r3, [pc, #632]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	4a9d      	ldr	r2, [pc, #628]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 825e 	beq.w	8004f08 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a4c:	4b96      	ldr	r3, [pc, #600]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	f000 821f 	beq.w	8004e98 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	f040 8170 	bne.w	8004d4c <HAL_RCC_OscConfig+0xedc>
 8004a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a7e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	fa93 f2a3 	rbit	r2, r3
 8004a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a90:	601a      	str	r2, [r3, #0]
  return result;
 8004a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a9a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004aa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fb13 	bl	80020dc <HAL_GetTick>
 8004ab6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aba:	e009      	b.n	8004ad0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fb0e 	bl	80020dc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e21c      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f2a3 	rbit	r2, r3
 8004aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004af4:	601a      	str	r2, [r3, #0]
  return result;
 8004af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004afe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d102      	bne.n	8004b1a <HAL_RCC_OscConfig+0xcaa>
 8004b14:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e027      	b.n	8004b6a <HAL_RCC_OscConfig+0xcfa>
 8004b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b2c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	fa93 f2a3 	rbit	r2, r3
 8004b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b76:	6011      	str	r1, [r2, #0]
 8004b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	fa92 f1a2 	rbit	r1, r2
 8004b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b8a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004b8e:	6011      	str	r1, [r2, #0]
  return result;
 8004b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b94:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	fab2 f282 	clz	r2, r2
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d182      	bne.n	8004abc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb6:	4b3c      	ldr	r3, [pc, #240]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f023 020f 	bic.w	r2, r3, #15
 8004bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	4937      	ldr	r1, [pc, #220]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004bd0:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a19      	ldr	r1, [r3, #32]
 8004be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	492d      	ldr	r1, [pc, #180]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c0a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	fa93 f2a3 	rbit	r2, r3
 8004c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c18:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c1c:	601a      	str	r2, [r3, #0]
  return result;
 8004c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c28:	fab3 f383 	clz	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fa4d 	bl	80020dc <HAL_GetTick>
 8004c42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c46:	e009      	b.n	8004c5c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fd fa48 	bl	80020dc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e156      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fa93 f2a3 	rbit	r2, r3
 8004c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c80:	601a      	str	r2, [r3, #0]
  return result;
 8004c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCC_OscConfig+0xe3c>
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <HAL_RCC_OscConfig+0xe38>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	e02a      	b.n	8004cfc <HAL_RCC_OscConfig+0xe8c>
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	fa93 f2a3 	rbit	r2, r3
 8004cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ccc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fa93 f2a3 	rbit	r2, r3
 8004cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b86      	ldr	r3, [pc, #536]	; (8004f14 <HAL_RCC_OscConfig+0x10a4>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	fa92 f1a2 	rbit	r1, r2
 8004d18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d1c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004d20:	6011      	str	r1, [r2, #0]
  return result;
 8004d22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d26:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	fab2 f282 	clz	r2, r2
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	f042 0220 	orr.w	r2, r2, #32
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	f002 021f 	and.w	r2, r2, #31
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f43f af7f 	beq.w	8004c48 <HAL_RCC_OscConfig+0xdd8>
 8004d4a:	e0dd      	b.n	8004f08 <HAL_RCC_OscConfig+0x1098>
 8004d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d50:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	fa93 f2a3 	rbit	r2, r3
 8004d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d70:	601a      	str	r2, [r3, #0]
  return result;
 8004d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d7a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd f9a3 	bl	80020dc <HAL_GetTick>
 8004d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	e009      	b.n	8004db0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fd f99e 	bl	80020dc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0ac      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
 8004db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f2a3 	rbit	r2, r3
 8004dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dd4:	601a      	str	r2, [r3, #0]
  return result;
 8004dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_OscConfig+0xf8a>
 8004df4:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_OscConfig+0x10a4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e027      	b.n	8004e4a <HAL_RCC_OscConfig+0xfda>
 8004dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dfe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	fa93 f2a3 	rbit	r2, r3
 8004e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e40:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <HAL_RCC_OscConfig+0x10a4>)
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	fa92 f1a2 	rbit	r1, r2
 8004e66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e6a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004e6e:	6011      	str	r1, [r2, #0]
  return result;
 8004e70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e74:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	fab2 f282 	clz	r2, r2
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	f042 0220 	orr.w	r2, r2, #32
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	f002 021f 	and.w	r2, r2, #31
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d182      	bne.n	8004d9c <HAL_RCC_OscConfig+0xf2c>
 8004e96:	e037      	b.n	8004f08 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e02e      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_OscConfig+0x10a4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004eb4:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_RCC_OscConfig+0x10a4>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ebc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ec0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d117      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004ed4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b09e      	sub	sp, #120	; 0x78
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e162      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b90      	ldr	r3, [pc, #576]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d910      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b8d      	ldr	r3, [pc, #564]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 0207 	bic.w	r2, r3, #7
 8004f46:	498b      	ldr	r1, [pc, #556]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b89      	ldr	r3, [pc, #548]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e14a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b82      	ldr	r3, [pc, #520]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	497f      	ldr	r1, [pc, #508]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80dc 	beq.w	8005144 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d13c      	bne.n	800500e <HAL_RCC_ClockConfig+0xf6>
 8004f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xa6>
 8004fb8:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	e00f      	b.n	8004fde <HAL_RCC_ClockConfig+0xc6>
 8004fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	667b      	str	r3, [r7, #100]	; 0x64
 8004fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fda:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fe6:	fa92 f2a2 	rbit	r2, r2
 8004fea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fee:	fab2 f282 	clz	r2, r2
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	f042 0220 	orr.w	r2, r2, #32
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	f002 021f 	and.w	r2, r2, #31
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f202 	lsl.w	r2, r1, r2
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d17b      	bne.n	8005102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0f3      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d13c      	bne.n	8005090 <HAL_RCC_ClockConfig+0x178>
 8005016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501e:	fa93 f3a3 	rbit	r3, r3
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HAL_RCC_ClockConfig+0x128>
 800503a:	4b4f      	ldr	r3, [pc, #316]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	e00f      	b.n	8005060 <HAL_RCC_ClockConfig+0x148>
 8005040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005044:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	647b      	str	r3, [r7, #68]	; 0x44
 800504e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505c:	4b46      	ldr	r3, [pc, #280]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005064:	63ba      	str	r2, [r7, #56]	; 0x38
 8005066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005068:	fa92 f2a2 	rbit	r2, r2
 800506c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800506e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	f042 0220 	orr.w	r2, r2, #32
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	f002 021f 	and.w	r2, r2, #31
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f202 	lsl.w	r2, r1, r2
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d13a      	bne.n	8005102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0b2      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
 8005090:	2302      	movs	r3, #2
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x1a0>
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	e00d      	b.n	80050d4 <HAL_RCC_ClockConfig+0x1bc>
 80050b8:	2302      	movs	r3, #2
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	2302      	movs	r3, #2
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2202      	movs	r2, #2
 80050d6:	61ba      	str	r2, [r7, #24]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	fa92 f2a2 	rbit	r2, r2
 80050de:	617a      	str	r2, [r7, #20]
  return result;
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fab2 f282 	clz	r2, r2
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f002 021f 	and.w	r2, r2, #31
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f202 	lsl.w	r2, r1, r2
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e079      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	491a      	ldr	r1, [pc, #104]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fc ffe2 	bl	80020dc <HAL_GetTick>
 8005118:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fc ffde 	bl	80020dc <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e061      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_RCC_ClockConfig+0x260>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d214      	bcs.n	800517c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	4906      	ldr	r1, [pc, #24]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b04      	ldr	r3, [pc, #16]	; (8005174 <HAL_RCC_ClockConfig+0x25c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e040      	b.n	80051f6 <HAL_RCC_ClockConfig+0x2de>
 8005174:	40022000 	.word	0x40022000
 8005178:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCC_ClockConfig+0x2e8>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	491a      	ldr	r1, [pc, #104]	; (8005200 <HAL_RCC_ClockConfig+0x2e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <HAL_RCC_ClockConfig+0x2e8>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4912      	ldr	r1, [pc, #72]	; (8005200 <HAL_RCC_ClockConfig+0x2e8>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051ba:	f000 f829 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 80051be:	4601      	mov	r1, r0
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_RCC_ClockConfig+0x2e8>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c8:	22f0      	movs	r2, #240	; 0xf0
 80051ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	fa92 f2a2 	rbit	r2, r2
 80051d2:	60fa      	str	r2, [r7, #12]
  return result;
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	fab2 f282 	clz	r2, r2
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	40d3      	lsrs	r3, r2
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x2ec>)
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	fa21 f303 	lsr.w	r3, r1, r3
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <HAL_RCC_ClockConfig+0x2f0>)
 80051e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <HAL_RCC_ClockConfig+0x2f4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc fd64 	bl	8001cbc <HAL_InitTick>
  
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3778      	adds	r7, #120	; 0x78
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
 8005204:	0800bfe8 	.word	0x0800bfe8
 8005208:	20000000 	.word	0x20000000
 800520c:	20000004 	.word	0x20000004

08005210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005210:	b480      	push	{r7}
 8005212:	b08b      	sub	sp, #44	; 0x2c
 8005214:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800522a:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d002      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x30>
 800523a:	2b08      	cmp	r3, #8
 800523c:	d003      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x36>
 800523e:	e03f      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005242:	623b      	str	r3, [r7, #32]
      break;
 8005244:	e03f      	b.n	80052c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800524c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005250:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	fa92 f2a2 	rbit	r2, r2
 8005258:	607a      	str	r2, [r7, #4]
  return result;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	fab2 f282 	clz	r2, r2
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	40d3      	lsrs	r3, r2
 8005264:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	220f      	movs	r2, #15
 8005274:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	fa92 f2a2 	rbit	r2, r2
 800527c:	60fa      	str	r2, [r7, #12]
  return result;
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	fab2 f282 	clz	r2, r2
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	40d3      	lsrs	r3, r2
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005298:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
 80052a8:	e007      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052aa:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	623b      	str	r3, [r7, #32]
      break;
 80052be:	e002      	b.n	80052c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052c2:	623b      	str	r3, [r7, #32]
      break;
 80052c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c6:	6a3b      	ldr	r3, [r7, #32]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	372c      	adds	r7, #44	; 0x2c
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40021000 	.word	0x40021000
 80052d8:	007a1200 	.word	0x007a1200
 80052dc:	0800c000 	.word	0x0800c000
 80052e0:	0800c010 	.word	0x0800c010

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000000 	.word	0x20000000

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005302:	f7ff ffef 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005306:	4601      	mov	r1, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005310:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005314:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	fa92 f2a2 	rbit	r2, r2
 800531c:	603a      	str	r2, [r7, #0]
  return result;
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	fab2 f282 	clz	r2, r2
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	40d3      	lsrs	r3, r2
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_RCC_GetPCLK1Freq+0x40>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40021000 	.word	0x40021000
 800533c:	0800bff8 	.word	0x0800bff8

08005340 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	220f      	movs	r2, #15
 800534e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005350:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCC_GetClockConfig+0x5c>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0203 	and.w	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_RCC_GetClockConfig+0x5c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_RCC_GetClockConfig+0x5c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCC_GetClockConfig+0x5c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	08db      	lsrs	r3, r3, #3
 800537a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <HAL_RCC_GetClockConfig+0x60>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	40022000 	.word	0x40022000

080053a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b092      	sub	sp, #72	; 0x48
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80d4 	beq.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c8:	4b4e      	ldr	r3, [pc, #312]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10e      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	4a4a      	ldr	r2, [pc, #296]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053de:	61d3      	str	r3, [r2, #28]
 80053e0:	4b48      	ldr	r3, [pc, #288]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b45      	ldr	r3, [pc, #276]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d118      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fe:	4b42      	ldr	r3, [pc, #264]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a41      	ldr	r2, [pc, #260]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540a:	f7fc fe67 	bl	80020dc <HAL_GetTick>
 800540e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	e008      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005412:	f7fc fe63 	bl	80020dc <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b64      	cmp	r3, #100	; 0x64
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e1d6      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005424:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8084 	beq.w	800554a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800544c:	429a      	cmp	r2, r3
 800544e:	d07c      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005450:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800545a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	461a      	mov	r2, r3
 800547a:	2301      	movs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fc fe13 	bl	80020dc <HAL_GetTick>
 80054b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	e00a      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fc fe0f 	bl	80020dc <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e180      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80054d0:	2302      	movs	r3, #2
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	fa93 f3a3 	rbit	r3, r3
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
 80054dc:	2302      	movs	r3, #2
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	61fb      	str	r3, [r7, #28]
  return result;
 80054e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ea:	fab3 f383 	clz	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d108      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80054fe:	4b01      	ldr	r3, [pc, #4]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	e00d      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005504:	40021000 	.word	0x40021000
 8005508:	40007000 	.word	0x40007000
 800550c:	10908100 	.word	0x10908100
 8005510:	2302      	movs	r3, #2
 8005512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	4b9a      	ldr	r3, [pc, #616]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	2202      	movs	r2, #2
 8005522:	613a      	str	r2, [r7, #16]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	fa92 f2a2 	rbit	r2, r2
 800552a:	60fa      	str	r2, [r7, #12]
  return result;
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	fab2 f282 	clz	r2, r2
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	f002 021f 	and.w	r2, r2, #31
 800553e:	2101      	movs	r1, #1
 8005540:	fa01 f202 	lsl.w	r2, r1, r2
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0b7      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800554a:	4b8f      	ldr	r3, [pc, #572]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	498c      	ldr	r1, [pc, #560]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800555c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b88      	ldr	r3, [pc, #544]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4a87      	ldr	r2, [pc, #540]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800557c:	4b82      	ldr	r3, [pc, #520]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f023 0203 	bic.w	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	497f      	ldr	r1, [pc, #508]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800559a:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4978      	ldr	r1, [pc, #480]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055b8:	4b73      	ldr	r3, [pc, #460]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	4970      	ldr	r1, [pc, #448]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d6:	4b6c      	ldr	r3, [pc, #432]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f023 0210 	bic.w	r2, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4969      	ldr	r1, [pc, #420]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055f4:	4b64      	ldr	r3, [pc, #400]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	4961      	ldr	r1, [pc, #388]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f023 0220 	bic.w	r2, r3, #32
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	495a      	ldr	r1, [pc, #360]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005630:	4b55      	ldr	r3, [pc, #340]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	4952      	ldr	r1, [pc, #328]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800564e:	4b4e      	ldr	r3, [pc, #312]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	494b      	ldr	r1, [pc, #300]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800566c:	4b46      	ldr	r3, [pc, #280]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	4943      	ldr	r1, [pc, #268]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800568a:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	493c      	ldr	r1, [pc, #240]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056a8:	4b37      	ldr	r3, [pc, #220]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	4934      	ldr	r1, [pc, #208]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	492d      	ldr	r1, [pc, #180]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	4925      	ldr	r1, [pc, #148]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005702:	4b21      	ldr	r3, [pc, #132]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	491e      	ldr	r1, [pc, #120]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	4916      	ldr	r1, [pc, #88]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	490f      	ldr	r1, [pc, #60]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800574c:	4313      	orrs	r3, r2
 800574e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005768:	4907      	ldr	r1, [pc, #28]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	e002      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	4913      	ldr	r1, [pc, #76]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	490b      	ldr	r1, [pc, #44]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	4904      	ldr	r1, [pc, #16]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3748      	adds	r7, #72	; 0x48
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e049      	b.n	8005886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc fa18 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fb1e 	bl	8005e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e047      	b.n	8005938 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a23      	ldr	r2, [pc, #140]	; (8005944 <HAL_TIM_Base_Start+0xb4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c2:	d018      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_TIM_Base_Start+0xb8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_TIM_Base_Start+0xbc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <HAL_TIM_Base_Start+0xc0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_TIM_Base_Start+0xc4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIM_Base_Start+0x66>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a19      	ldr	r2, [pc, #100]	; (8005958 <HAL_TIM_Base_Start+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d115      	bne.n	8005922 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4b17      	ldr	r3, [pc, #92]	; (800595c <HAL_TIM_Base_Start+0xcc>)
 80058fe:	4013      	ands	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d015      	beq.n	8005934 <HAL_TIM_Base_Start+0xa4>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590e:	d011      	beq.n	8005934 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	e008      	b.n	8005934 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e000      	b.n	8005936 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40013400 	.word	0x40013400
 8005954:	40014000 	.word	0x40014000
 8005958:	40015000 	.word	0x40015000
 800595c:	00010007 	.word	0x00010007

08005960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e04f      	b.n	8005a18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d018      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_TIM_Base_Start_IT+0x76>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d115      	bne.n	8005a02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d015      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0xb4>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ee:	d011      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	e008      	b.n	8005a14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40015000 	.word	0x40015000
 8005a3c:	00010007 	.word	0x00010007

08005a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9ce 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9c0 	bl	8005e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9d1 	bl	8005e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0204 	mvn.w	r2, #4
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f9a4 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f996 	bl	8005e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f9a7 	bl	8005e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f97a 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f96c 	bl	8005e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f97d 	bl	8005e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f950 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f942 	bl	8005e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f953 	bl	8005e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb ff54 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fb06 	bl	80061fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d10e      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 faf9 	bl	8006210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d10e      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f901 	bl	8005e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d10e      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0220 	mvn.w	r2, #32
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fab9 	bl	80061e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_ConfigClockSource+0x1c>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0b6      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x18a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	d03e      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0xd8>
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cdc:	f200 8087 	bhi.w	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	f000 8086 	beq.w	8005df4 <HAL_TIM_ConfigClockSource+0x176>
 8005ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cec:	d87f      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005cee:	2b70      	cmp	r3, #112	; 0x70
 8005cf0:	d01a      	beq.n	8005d28 <HAL_TIM_ConfigClockSource+0xaa>
 8005cf2:	2b70      	cmp	r3, #112	; 0x70
 8005cf4:	d87b      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005cf6:	2b60      	cmp	r3, #96	; 0x60
 8005cf8:	d050      	beq.n	8005d9c <HAL_TIM_ConfigClockSource+0x11e>
 8005cfa:	2b60      	cmp	r3, #96	; 0x60
 8005cfc:	d877      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005cfe:	2b50      	cmp	r3, #80	; 0x50
 8005d00:	d03c      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0xfe>
 8005d02:	2b50      	cmp	r3, #80	; 0x50
 8005d04:	d873      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d058      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x13e>
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d86f      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005d0e:	2b30      	cmp	r3, #48	; 0x30
 8005d10:	d064      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x15e>
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d86b      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d060      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x15e>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d867      	bhi.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d05c      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x15e>
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d05a      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x15e>
 8005d26:	e062      	b.n	8005dee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	f000 f9aa 	bl	8006090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	609a      	str	r2, [r3, #8]
      break;
 8005d54:	e04f      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d66:	f000 f993 	bl	8006090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d78:	609a      	str	r2, [r3, #8]
      break;
 8005d7a:	e03c      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f000 f907 	bl	8005f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2150      	movs	r1, #80	; 0x50
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f960 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005d9a:	e02c      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da8:	461a      	mov	r2, r3
 8005daa:	f000 f926 	bl	8005ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2160      	movs	r1, #96	; 0x60
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f950 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005dba:	e01c      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f000 f8e7 	bl	8005f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2140      	movs	r1, #64	; 0x40
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 f940 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005dda:	e00c      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f000 f937 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005dec:	e003      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
      break;
 8005df2:	e000      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a42      	ldr	r2, [pc, #264]	; (8005f7c <TIM_Base_SetConfig+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d00f      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3f      	ldr	r2, [pc, #252]	; (8005f80 <TIM_Base_SetConfig+0x120>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a3e      	ldr	r2, [pc, #248]	; (8005f84 <TIM_Base_SetConfig+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a3d      	ldr	r2, [pc, #244]	; (8005f88 <TIM_Base_SetConfig+0x128>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a3c      	ldr	r2, [pc, #240]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d108      	bne.n	8005eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <TIM_Base_SetConfig+0x11c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01f      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <TIM_Base_SetConfig+0x120>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <TIM_Base_SetConfig+0x124>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	; (8005f88 <TIM_Base_SetConfig+0x128>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2c      	ldr	r2, [pc, #176]	; (8005f90 <TIM_Base_SetConfig+0x130>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	; (8005f94 <TIM_Base_SetConfig+0x134>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <TIM_Base_SetConfig+0x138>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0x9a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a12      	ldr	r2, [pc, #72]	; (8005f7c <TIM_Base_SetConfig+0x11c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <TIM_Base_SetConfig+0x100>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <TIM_Base_SetConfig+0x128>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00f      	beq.n	8005f60 <TIM_Base_SetConfig+0x100>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <TIM_Base_SetConfig+0x130>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_Base_SetConfig+0x100>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <TIM_Base_SetConfig+0x134>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_Base_SetConfig+0x100>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <TIM_Base_SetConfig+0x138>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0x100>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a0c      	ldr	r2, [pc, #48]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d103      	bne.n	8005f68 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	615a      	str	r2, [r3, #20]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40015000 	.word	0x40015000
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400
 8005f98:	40014800 	.word	0x40014800

08005f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 030a 	bic.w	r3, r3, #10
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f023 0210 	bic.w	r2, r3, #16
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	031b      	lsls	r3, r3, #12
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	f043 0307 	orr.w	r3, r3, #7
 800607c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e06d      	b.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2d      	ldr	r2, [pc, #180]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800612c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d01d      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d018      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40015000 	.word	0x40015000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40014000 	.word	0x40014000

080061e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006236:	2b84      	cmp	r3, #132	; 0x84
 8006238:	d005      	beq.n	8006246 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800623a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	3303      	adds	r3, #3
 8006244:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006258:	f000 fad8 	bl	800680c <vTaskStartScheduler>
  
  return osOK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	bd80      	pop	{r7, pc}

08006262 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006264:	b089      	sub	sp, #36	; 0x24
 8006266:	af04      	add	r7, sp, #16
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <osThreadCreate+0x54>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01c      	beq.n	80062b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685c      	ldr	r4, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691e      	ldr	r6, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ffc8 	bl	8006224 <makeFreeRtosPriority>
 8006294:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800629e:	9202      	str	r2, [sp, #8]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	9100      	str	r1, [sp, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4632      	mov	r2, r6
 80062a8:	4629      	mov	r1, r5
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f8d9 	bl	8006462 <xTaskCreateStatic>
 80062b0:	4603      	mov	r3, r0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e01c      	b.n	80062f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685c      	ldr	r4, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ffaa 	bl	8006224 <makeFreeRtosPriority>
 80062d0:	4602      	mov	r2, r0
 80062d2:	f107 030c 	add.w	r3, r7, #12
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9200      	str	r2, [sp, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	4632      	mov	r2, r6
 80062de:	4629      	mov	r1, r5
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f91a 	bl	800651a <xTaskCreate>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d001      	beq.n	80062f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0208 	add.w	r2, r3, #8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0208 	add.w	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e00c      	b.n	80063d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3308      	adds	r3, #8
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e002      	b.n	80063ca <vListInsert+0x2e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d2f6      	bcs.n	80063c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6892      	ldr	r2, [r2, #8]
 8006424:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6852      	ldr	r2, [r2, #4]
 800642e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d103      	bne.n	8006442 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	1e5a      	subs	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006462:	b580      	push	{r7, lr}
 8006464:	b08e      	sub	sp, #56	; 0x38
 8006466:	af04      	add	r7, sp, #16
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	61fb      	str	r3, [r7, #28]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064a8:	23a0      	movs	r3, #160	; 0xa0
 80064aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2ba0      	cmp	r3, #160	; 0xa0
 80064b0:	d00a      	beq.n	80064c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	61bb      	str	r3, [r7, #24]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01e      	beq.n	800650c <xTaskCreateStatic+0xaa>
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064e6:	2300      	movs	r3, #0
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	9302      	str	r3, [sp, #8]
 80064ee:	f107 0314 	add.w	r3, r7, #20
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f850 	bl	80065a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006506:	f000 f8e3 	bl	80066d0 <prvAddNewTaskToReadyList>
 800650a:	e001      	b.n	8006510 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006510:	697b      	ldr	r3, [r7, #20]
	}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800651a:	b580      	push	{r7, lr}
 800651c:	b08c      	sub	sp, #48	; 0x30
 800651e:	af04      	add	r7, sp, #16
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fef2 	bl	8007318 <pvPortMalloc>
 8006534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800653c:	20a0      	movs	r0, #160	; 0xa0
 800653e:	f000 feeb 	bl	8007318 <pvPortMalloc>
 8006542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
 8006550:	e005      	b.n	800655e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006552:	6978      	ldr	r0, [r7, #20]
 8006554:	f000 ffa4 	bl	80074a0 <vPortFree>
 8006558:	e001      	b.n	800655e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	2300      	movs	r3, #0
 8006570:	9303      	str	r3, [sp, #12]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f80e 	bl	80065a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006588:	69f8      	ldr	r0, [r7, #28]
 800658a:	f000 f8a1 	bl	80066d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800658e:	2301      	movs	r3, #1
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e002      	b.n	800659a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800659a:	69bb      	ldr	r3, [r7, #24]
	}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065bc:	3b01      	subs	r3, #1
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	617b      	str	r3, [r7, #20]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e012      	b.n	8006618 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	7819      	ldrb	r1, [r3, #0]
 80065fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	3334      	adds	r3, #52	; 0x34
 8006602:	460a      	mov	r2, r1
 8006604:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	3301      	adds	r3, #1
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d9e9      	bls.n	80065f2 <prvInitialiseNewTask+0x4e>
 800661e:	e000      	b.n	8006622 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006620:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2b06      	cmp	r3, #6
 800662e:	d901      	bls.n	8006634 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006630:	2306      	movs	r3, #6
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fe75 	bl	800633a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fe70 	bl	800633a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f1c3 0207 	rsb	r2, r3, #7
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2200      	movs	r2, #0
 800667c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	334c      	adds	r3, #76	; 0x4c
 8006684:	224c      	movs	r2, #76	; 0x4c
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f001 ffba 	bl	8008602 <memset>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <prvInitialiseNewTask+0x120>)
 8006692:	651a      	str	r2, [r3, #80]	; 0x50
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	4a0c      	ldr	r2, [pc, #48]	; (80066c8 <prvInitialiseNewTask+0x124>)
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <prvInitialiseNewTask+0x128>)
 800669e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	69b8      	ldr	r0, [r7, #24]
 80066a6:	f000 fc2b 	bl	8006f00 <pxPortInitialiseStack>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066bc:	bf00      	nop
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200030a4 	.word	0x200030a4
 80066c8:	2000310c 	.word	0x2000310c
 80066cc:	20003174 	.word	0x20003174

080066d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066d8:	f000 fd3c 	bl	8007154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066dc:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <prvAddNewTaskToReadyList+0xb8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a29      	ldr	r2, [pc, #164]	; (8006788 <prvAddNewTaskToReadyList+0xb8>)
 80066e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066e6:	4b29      	ldr	r3, [pc, #164]	; (800678c <prvAddNewTaskToReadyList+0xbc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <prvAddNewTaskToReadyList+0xbc>)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <prvAddNewTaskToReadyList+0xb8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d110      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066fc:	f000 fad2 	bl	8006ca4 <prvInitialiseTaskLists>
 8006700:	e00d      	b.n	800671e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006702:	4b23      	ldr	r3, [pc, #140]	; (8006790 <prvAddNewTaskToReadyList+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800670a:	4b20      	ldr	r3, [pc, #128]	; (800678c <prvAddNewTaskToReadyList+0xbc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	429a      	cmp	r2, r3
 8006716:	d802      	bhi.n	800671e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006718:	4a1c      	ldr	r2, [pc, #112]	; (800678c <prvAddNewTaskToReadyList+0xbc>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 8006726:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	2201      	movs	r2, #1
 800672e:	409a      	lsls	r2, r3
 8006730:	4b19      	ldr	r3, [pc, #100]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	4a18      	ldr	r2, [pc, #96]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <prvAddNewTaskToReadyList+0xcc>)
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7ff fdff 	bl	8006354 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006756:	f000 fd2d 	bl	80071b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800675a:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <prvAddNewTaskToReadyList+0xc0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <prvAddNewTaskToReadyList+0xbc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	429a      	cmp	r2, r3
 800676e:	d207      	bcs.n	8006780 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000948 	.word	0x20000948
 800678c:	20000848 	.word	0x20000848
 8006790:	20000954 	.word	0x20000954
 8006794:	20000964 	.word	0x20000964
 8006798:	20000950 	.word	0x20000950
 800679c:	2000084c 	.word	0x2000084c
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d017      	beq.n	80067e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067b6:	4b13      	ldr	r3, [pc, #76]	; (8006804 <vTaskDelay+0x60>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <vTaskDelay+0x30>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60bb      	str	r3, [r7, #8]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067d4:	f000 f884 	bl	80068e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb2a 	bl	8006e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067e0:	f000 f88c 	bl	80068fc <xTaskResumeAll>
 80067e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <vTaskDelay+0x64>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000970 	.word	0x20000970
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800681a:	463a      	mov	r2, r7
 800681c:	1d39      	adds	r1, r7, #4
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	4618      	mov	r0, r3
 8006824:	f7fa fa6e 	bl	8000d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	9202      	str	r2, [sp, #8]
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	2300      	movs	r3, #0
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	2300      	movs	r3, #0
 8006838:	460a      	mov	r2, r1
 800683a:	4921      	ldr	r1, [pc, #132]	; (80068c0 <vTaskStartScheduler+0xb4>)
 800683c:	4821      	ldr	r0, [pc, #132]	; (80068c4 <vTaskStartScheduler+0xb8>)
 800683e:	f7ff fe10 	bl	8006462 <xTaskCreateStatic>
 8006842:	4603      	mov	r3, r0
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <vTaskStartScheduler+0xbc>)
 8006846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006848:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <vTaskStartScheduler+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e001      	b.n	800685a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d11b      	bne.n	8006898 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <vTaskStartScheduler+0xc0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	334c      	adds	r3, #76	; 0x4c
 800687a:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <vTaskStartScheduler+0xc4>)
 800687c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <vTaskStartScheduler+0xc8>)
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vTaskStartScheduler+0xcc>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <vTaskStartScheduler+0xd0>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006892:	f000 fbbd 	bl	8007010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006896:	e00e      	b.n	80068b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d10a      	bne.n	80068b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60fb      	str	r3, [r7, #12]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <vTaskStartScheduler+0xa8>
}
 80068b6:	bf00      	nop
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	0800bfe0 	.word	0x0800bfe0
 80068c4:	08006c75 	.word	0x08006c75
 80068c8:	2000096c 	.word	0x2000096c
 80068cc:	20000848 	.word	0x20000848
 80068d0:	20000068 	.word	0x20000068
 80068d4:	20000968 	.word	0x20000968
 80068d8:	20000954 	.word	0x20000954
 80068dc:	2000094c 	.word	0x2000094c

080068e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <vTaskSuspendAll+0x18>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	4a03      	ldr	r2, [pc, #12]	; (80068f8 <vTaskSuspendAll+0x18>)
 80068ec:	6013      	str	r3, [r2, #0]
}
 80068ee:	bf00      	nop
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000970 	.word	0x20000970

080068fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800690a:	4b41      	ldr	r3, [pc, #260]	; (8006a10 <xTaskResumeAll+0x114>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xTaskResumeAll+0x2c>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	603b      	str	r3, [r7, #0]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006928:	f000 fc14 	bl	8007154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800692c:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <xTaskResumeAll+0x114>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	4a37      	ldr	r2, [pc, #220]	; (8006a10 <xTaskResumeAll+0x114>)
 8006934:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006936:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <xTaskResumeAll+0x114>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d161      	bne.n	8006a02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800693e:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <xTaskResumeAll+0x118>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d05d      	beq.n	8006a02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006946:	e02e      	b.n	80069a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006948:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <xTaskResumeAll+0x11c>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3318      	adds	r3, #24
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fd5a 	bl	800640e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fd55 	bl	800640e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	2201      	movs	r2, #1
 800696a:	409a      	lsls	r2, r3
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <xTaskResumeAll+0x120>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <xTaskResumeAll+0x120>)
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <xTaskResumeAll+0x124>)
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7ff fce1 	bl	8006354 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <xTaskResumeAll+0x128>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d302      	bcc.n	80069a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069a0:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <xTaskResumeAll+0x11c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1cc      	bne.n	8006948 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b4:	f000 fa18 	bl	8006de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <xTaskResumeAll+0x130>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c4:	f000 f836 	bl	8006a34 <xTaskIncrementTick>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069ce:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f1      	bne.n	80069c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <xTaskResumeAll+0x130>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069f2:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <xTaskResumeAll+0x134>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a02:	f000 fbd7 	bl	80071b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a06:	68bb      	ldr	r3, [r7, #8]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000970 	.word	0x20000970
 8006a14:	20000948 	.word	0x20000948
 8006a18:	20000908 	.word	0x20000908
 8006a1c:	20000950 	.word	0x20000950
 8006a20:	2000084c 	.word	0x2000084c
 8006a24:	20000848 	.word	0x20000848
 8006a28:	2000095c 	.word	0x2000095c
 8006a2c:	20000958 	.word	0x20000958
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3e:	4b51      	ldr	r3, [pc, #324]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 808d 	bne.w	8006b62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a48:	4b4f      	ldr	r3, [pc, #316]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a50:	4a4d      	ldr	r2, [pc, #308]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d120      	bne.n	8006a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a5c:	4b4b      	ldr	r3, [pc, #300]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xTaskIncrementTick+0x46>
 8006a7c:	4b43      	ldr	r3, [pc, #268]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	4b43      	ldr	r3, [pc, #268]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a41      	ldr	r2, [pc, #260]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4a41      	ldr	r2, [pc, #260]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b40      	ldr	r3, [pc, #256]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3301      	adds	r3, #1
 8006a96:	4a3f      	ldr	r2, [pc, #252]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	f000 f9a5 	bl	8006de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a9e:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d34d      	bcc.n	8006b44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa8:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <xTaskIncrementTick+0x82>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <xTaskIncrementTick+0x84>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	601a      	str	r2, [r3, #0]
					break;
 8006ac4:	e03e      	b.n	8006b44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ac6:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d203      	bcs.n	8006ae6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ade:	4a2e      	ldr	r2, [pc, #184]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6013      	str	r3, [r2, #0]
						break;
 8006ae4:	e02e      	b.n	8006b44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fc8f 	bl	800640e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3318      	adds	r3, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fc86 	bl	800640e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	2201      	movs	r2, #1
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <xTaskIncrementTick+0x16c>)
 8006b22:	441a      	add	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7ff fc12 	bl	8006354 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3b4      	bcc.n	8006aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b42:	e7b1      	b.n	8006aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	4915      	ldr	r1, [pc, #84]	; (8006ba0 <xTaskIncrementTick+0x16c>)
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d907      	bls.n	8006b6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e004      	b.n	8006b6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <xTaskIncrementTick+0x174>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a0f      	ldr	r2, [pc, #60]	; (8006ba8 <xTaskIncrementTick+0x174>)
 8006b6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <xTaskIncrementTick+0x178>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b78:	697b      	ldr	r3, [r7, #20]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000970 	.word	0x20000970
 8006b88:	2000094c 	.word	0x2000094c
 8006b8c:	20000900 	.word	0x20000900
 8006b90:	20000904 	.word	0x20000904
 8006b94:	20000960 	.word	0x20000960
 8006b98:	20000968 	.word	0x20000968
 8006b9c:	20000950 	.word	0x20000950
 8006ba0:	2000084c 	.word	0x2000084c
 8006ba4:	20000848 	.word	0x20000848
 8006ba8:	20000958 	.word	0x20000958
 8006bac:	2000095c 	.word	0x2000095c

08006bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <vTaskSwitchContext+0xac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bbe:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <vTaskSwitchContext+0xb0>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bc4:	e044      	b.n	8006c50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <vTaskSwitchContext+0xb0>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <vTaskSwitchContext+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	fab3 f383 	clz	r3, r3
 8006bd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	f1c3 031f 	rsb	r3, r3, #31
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	4921      	ldr	r1, [pc, #132]	; (8006c68 <vTaskSwitchContext+0xb8>)
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	607b      	str	r3, [r7, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vTaskSwitchContext+0x5a>
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <vTaskSwitchContext+0xb8>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d104      	bne.n	8006c3c <vTaskSwitchContext+0x8c>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <vTaskSwitchContext+0xbc>)
 8006c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <vTaskSwitchContext+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	334c      	adds	r3, #76	; 0x4c
 8006c4c:	4a08      	ldr	r2, [pc, #32]	; (8006c70 <vTaskSwitchContext+0xc0>)
 8006c4e:	6013      	str	r3, [r2, #0]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000970 	.word	0x20000970
 8006c60:	2000095c 	.word	0x2000095c
 8006c64:	20000950 	.word	0x20000950
 8006c68:	2000084c 	.word	0x2000084c
 8006c6c:	20000848 	.word	0x20000848
 8006c70:	20000068 	.word	0x20000068

08006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c7c:	f000 f852 	bl	8006d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvIdleTask+0x28>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d9f9      	bls.n	8006c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <prvIdleTask+0x2c>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c98:	e7f0      	b.n	8006c7c <prvIdleTask+0x8>
 8006c9a:	bf00      	nop
 8006c9c:	2000084c 	.word	0x2000084c
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	e00c      	b.n	8006cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <prvInitialiseTaskLists+0x60>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fb1b 	bl	80062fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b06      	cmp	r3, #6
 8006cce:	d9ef      	bls.n	8006cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cd0:	480d      	ldr	r0, [pc, #52]	; (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cd2:	f7ff fb12 	bl	80062fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cd6:	480d      	ldr	r0, [pc, #52]	; (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cd8:	f7ff fb0f 	bl	80062fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cdc:	480c      	ldr	r0, [pc, #48]	; (8006d10 <prvInitialiseTaskLists+0x6c>)
 8006cde:	f7ff fb0c 	bl	80062fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ce2:	480c      	ldr	r0, [pc, #48]	; (8006d14 <prvInitialiseTaskLists+0x70>)
 8006ce4:	f7ff fb09 	bl	80062fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ce8:	480b      	ldr	r0, [pc, #44]	; (8006d18 <prvInitialiseTaskLists+0x74>)
 8006cea:	f7ff fb06 	bl	80062fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <prvInitialiseTaskLists+0x78>)
 8006cf0:	4a05      	ldr	r2, [pc, #20]	; (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <prvInitialiseTaskLists+0x7c>)
 8006cf6:	4a05      	ldr	r2, [pc, #20]	; (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000084c 	.word	0x2000084c
 8006d08:	200008d8 	.word	0x200008d8
 8006d0c:	200008ec 	.word	0x200008ec
 8006d10:	20000908 	.word	0x20000908
 8006d14:	2000091c 	.word	0x2000091c
 8006d18:	20000934 	.word	0x20000934
 8006d1c:	20000900 	.word	0x20000900
 8006d20:	20000904 	.word	0x20000904

08006d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d2a:	e019      	b.n	8006d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d2c:	f000 fa12 	bl	8007154 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d30:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <prvCheckTasksWaitingTermination+0x50>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fb66 	bl	800640e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d56:	f000 fa2d 	bl	80071b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f810 	bl	8006d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e1      	bne.n	8006d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000091c 	.word	0x2000091c
 8006d78:	20000948 	.word	0x20000948
 8006d7c:	20000930 	.word	0x20000930

08006d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	334c      	adds	r3, #76	; 0x4c
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 fc55 	bl	800863c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fb7d 	bl	80074a0 <vPortFree>
				vPortFree( pxTCB );
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fb7a 	bl	80074a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dac:	e018      	b.n	8006de0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d103      	bne.n	8006dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fb71 	bl	80074a0 <vPortFree>
	}
 8006dbe:	e00f      	b.n	8006de0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d00a      	beq.n	8006de0 <prvDeleteTCB+0x60>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <prvDeleteTCB+0x5e>
	}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <prvResetNextTaskUnblockTime+0x44>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <prvResetNextTaskUnblockTime+0x14>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <prvResetNextTaskUnblockTime+0x16>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <prvResetNextTaskUnblockTime+0x48>)
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e0a:	e008      	b.n	8006e1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <prvResetNextTaskUnblockTime+0x44>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4a05      	ldr	r2, [pc, #20]	; (8006e30 <prvResetNextTaskUnblockTime+0x48>)
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000900 	.word	0x20000900
 8006e30:	20000968 	.word	0x20000968

08006e34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e44:	4b28      	ldr	r3, [pc, #160]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fadf 	bl	800640e <uxListRemove>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10b      	bne.n	8006e6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	43da      	mvns	r2, r3
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	4a20      	ldr	r2, [pc, #128]	; (8006eec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d10a      	bne.n	8006e8c <prvAddCurrentTaskToDelayedList+0x58>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	481a      	ldr	r0, [pc, #104]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e86:	f7ff fa65 	bl	8006354 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e8a:	e026      	b.n	8006eda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e94:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d209      	bcs.n	8006eb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea4:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7ff fa73 	bl	800639c <vListInsert>
}
 8006eb6:	e010      	b.n	8006eda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7ff fa69 	bl	800639c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d202      	bcs.n	8006eda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ed4:	4a09      	ldr	r2, [pc, #36]	; (8006efc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	6013      	str	r3, [r2, #0]
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	2000094c 	.word	0x2000094c
 8006ee8:	20000848 	.word	0x20000848
 8006eec:	20000950 	.word	0x20000950
 8006ef0:	20000934 	.word	0x20000934
 8006ef4:	20000904 	.word	0x20000904
 8006ef8:	20000900 	.word	0x20000900
 8006efc:	20000968 	.word	0x20000968

08006f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f30:	4a0c      	ldr	r2, [pc, #48]	; (8006f64 <pxPortInitialiseStack+0x64>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3b14      	subs	r3, #20
 8006f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3b04      	subs	r3, #4
 8006f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f06f 0202 	mvn.w	r2, #2
 8006f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b20      	subs	r3, #32
 8006f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f56:	68fb      	ldr	r3, [r7, #12]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	08006f69 	.word	0x08006f69

08006f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <prvTaskExitError+0x54>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d00a      	beq.n	8006f92 <prvTaskExitError+0x2a>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60fb      	str	r3, [r7, #12]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <prvTaskExitError+0x28>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60bb      	str	r3, [r7, #8]
}
 8006fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fa6:	bf00      	nop
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0fc      	beq.n	8006fa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c

08006fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pxCurrentTCBConst2>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f380 8809 	msr	PSP, r0
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	4770      	bx	lr
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst2>:
 8006fe0:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fe8:	4808      	ldr	r0, [pc, #32]	; (800700c <prvPortStartFirstTask+0x24>)
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f380 8808 	msr	MSP, r0
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8814 	msr	CONTROL, r0
 8006ffa:	b662      	cpsie	i
 8006ffc:	b661      	cpsie	f
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	df00      	svc	0
 8007008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800700a:	bf00      	nop
 800700c:	e000ed08 	.word	0xe000ed08

08007010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007016:	4b46      	ldr	r3, [pc, #280]	; (8007130 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a46      	ldr	r2, [pc, #280]	; (8007134 <xPortStartScheduler+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x26>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	613b      	str	r3, [r7, #16]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007036:	4b3e      	ldr	r3, [pc, #248]	; (8007130 <xPortStartScheduler+0x120>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3f      	ldr	r2, [pc, #252]	; (8007138 <xPortStartScheduler+0x128>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10a      	bne.n	8007056 <xPortStartScheduler+0x46>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007056:	4b39      	ldr	r3, [pc, #228]	; (800713c <xPortStartScheduler+0x12c>)
 8007058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <xPortStartScheduler+0x130>)
 800707c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xPortStartScheduler+0x134>)
 8007080:	2207      	movs	r2, #7
 8007082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007084:	e009      	b.n	800709a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3b01      	subs	r3, #1
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <xPortStartScheduler+0x134>)
 800708e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d0ef      	beq.n	8007086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <xPortStartScheduler+0x134>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1c3 0307 	rsb	r3, r3, #7
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00a      	beq.n	80070c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60bb      	str	r3, [r7, #8]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <xPortStartScheduler+0x134>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <xPortStartScheduler+0x134>)
 80070d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xPortStartScheduler+0x134>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <xPortStartScheduler+0x134>)
 80070dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070e6:	4b18      	ldr	r3, [pc, #96]	; (8007148 <xPortStartScheduler+0x138>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <xPortStartScheduler+0x138>)
 80070ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <xPortStartScheduler+0x138>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a14      	ldr	r2, [pc, #80]	; (8007148 <xPortStartScheduler+0x138>)
 80070f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070fe:	f000 f8dd 	bl	80072bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <xPortStartScheduler+0x13c>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007108:	f000 f8fc 	bl	8007304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800710c:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xPortStartScheduler+0x140>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <xPortStartScheduler+0x140>)
 8007112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007118:	f7ff ff66 	bl	8006fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800711c:	f7ff fd48 	bl	8006bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007120:	f7ff ff22 	bl	8006f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00
 8007134:	410fc271 	.word	0x410fc271
 8007138:	410fc270 	.word	0x410fc270
 800713c:	e000e400 	.word	0xe000e400
 8007140:	20000974 	.word	0x20000974
 8007144:	20000978 	.word	0x20000978
 8007148:	e000ed20 	.word	0xe000ed20
 800714c:	2000000c 	.word	0x2000000c
 8007150:	e000ef34 	.word	0xe000ef34

08007154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	607b      	str	r3, [r7, #4]
}
 800716c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <vPortEnterCritical+0x58>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <vPortEnterCritical+0x58>)
 8007176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <vPortEnterCritical+0x58>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d10f      	bne.n	80071a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <vPortEnterCritical+0x5c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	603b      	str	r3, [r7, #0]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <vPortEnterCritical+0x4a>
	}
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	2000000c 	.word	0x2000000c
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <vPortExitCritical+0x50>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <vPortExitCritical+0x24>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <vPortExitCritical+0x50>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <vPortExitCritical+0x50>)
 80071e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <vPortExitCritical+0x50>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <vPortExitCritical+0x42>
 80071ea:	2300      	movs	r3, #0
 80071ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	2000000c 	.word	0x2000000c
	...

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007234:	f380 8811 	msr	BASEPRI, r0
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f7ff fcb6 	bl	8006bb0 <vTaskSwitchContext>
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f380 8811 	msr	BASEPRI, r0
 800724c:	bc09      	pop	{r0, r3}
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	f01e 0f10 	tst.w	lr, #16
 800725a:	bf08      	it	eq
 800725c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007260:	f380 8809 	msr	PSP, r0
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst>:
 8007270:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007292:	f7ff fbcf 	bl	8006a34 <xTaskIncrementTick>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <SysTick_Handler+0x40>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f383 8811 	msr	BASEPRI, r3
}
 80072ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <vPortSetupTimerInterrupt+0x38>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <vPortSetupTimerInterrupt+0x3c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <vPortSetupTimerInterrupt+0x40>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <vPortSetupTimerInterrupt+0x44>)
 80072da:	3b01      	subs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072de:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000e010 	.word	0xe000e010
 80072f4:	e000e018 	.word	0xe000e018
 80072f8:	20000000 	.word	0x20000000
 80072fc:	10624dd3 	.word	0x10624dd3
 8007300:	e000e014 	.word	0xe000e014

08007304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007314 <vPortEnableVFP+0x10>
 8007308:	6801      	ldr	r1, [r0, #0]
 800730a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800730e:	6001      	str	r1, [r0, #0]
 8007310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007312:	bf00      	nop
 8007314:	e000ed88 	.word	0xe000ed88

08007318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007324:	f7ff fadc 	bl	80068e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007328:	4b58      	ldr	r3, [pc, #352]	; (800748c <pvPortMalloc+0x174>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007330:	f000 f910 	bl	8007554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007334:	4b56      	ldr	r3, [pc, #344]	; (8007490 <pvPortMalloc+0x178>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 808e 	bne.w	800745e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01d      	beq.n	8007384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007348:	2208      	movs	r2, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <pvPortMalloc+0x6c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	617b      	str	r3, [r7, #20]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d069      	beq.n	800745e <pvPortMalloc+0x146>
 800738a:	4b42      	ldr	r3, [pc, #264]	; (8007494 <pvPortMalloc+0x17c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d864      	bhi.n	800745e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007394:	4b40      	ldr	r3, [pc, #256]	; (8007498 <pvPortMalloc+0x180>)
 8007396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007398:	4b3f      	ldr	r3, [pc, #252]	; (8007498 <pvPortMalloc+0x180>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739e:	e004      	b.n	80073aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <pvPortMalloc+0xa4>
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073bc:	4b33      	ldr	r3, [pc, #204]	; (800748c <pvPortMalloc+0x174>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d04b      	beq.n	800745e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2208      	movs	r2, #8
 80073cc:	4413      	add	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2308      	movs	r3, #8
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d91f      	bls.n	8007428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <pvPortMalloc+0xf8>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	613b      	str	r3, [r7, #16]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f000 f8f8 	bl	8007618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007428:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <pvPortMalloc+0x17c>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <pvPortMalloc+0x17c>)
 8007434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007436:	4b17      	ldr	r3, [pc, #92]	; (8007494 <pvPortMalloc+0x17c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <pvPortMalloc+0x184>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007442:	4b14      	ldr	r3, [pc, #80]	; (8007494 <pvPortMalloc+0x17c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <pvPortMalloc+0x184>)
 8007448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <pvPortMalloc+0x178>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	431a      	orrs	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800745e:	f7ff fa4d 	bl	80068fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <pvPortMalloc+0x16a>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60fb      	str	r3, [r7, #12]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <pvPortMalloc+0x168>
	return pvReturn;
 8007482:	69fb      	ldr	r3, [r7, #28]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20003094 	.word	0x20003094
 8007490:	200030a0 	.word	0x200030a0
 8007494:	20003098 	.word	0x20003098
 8007498:	2000308c 	.word	0x2000308c
 800749c:	2000309c 	.word	0x2000309c

080074a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d048      	beq.n	8007544 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074b2:	2308      	movs	r3, #8
 80074b4:	425b      	negs	r3, r3
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	4b21      	ldr	r3, [pc, #132]	; (800754c <vPortFree+0xac>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <vPortFree+0x44>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <vPortFree+0x62>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	60bb      	str	r3, [r7, #8]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <vPortFree+0xac>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4013      	ands	r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d019      	beq.n	8007544 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d115      	bne.n	8007544 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <vPortFree+0xac>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	43db      	mvns	r3, r3
 8007522:	401a      	ands	r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007528:	f7ff f9da 	bl	80068e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <vPortFree+0xb0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4413      	add	r3, r2
 8007536:	4a06      	ldr	r2, [pc, #24]	; (8007550 <vPortFree+0xb0>)
 8007538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f000 f86c 	bl	8007618 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007540:	f7ff f9dc 	bl	80068fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007544:	bf00      	nop
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200030a0 	.word	0x200030a0
 8007550:	20003098 	.word	0x20003098

08007554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800755a:	f242 7310 	movw	r3, #10000	; 0x2710
 800755e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <prvHeapInit+0xac>)
 8007562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3307      	adds	r3, #7
 8007572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <prvHeapInit+0xac>)
 8007584:	4413      	add	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <prvHeapInit+0xb0>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <prvHeapInit+0xb0>)
 8007594:	2200      	movs	r2, #0
 8007596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075a0:	2208      	movs	r2, #8
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a15      	ldr	r2, [pc, #84]	; (8007608 <prvHeapInit+0xb4>)
 80075b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <prvHeapInit+0xb4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <prvHeapInit+0xb4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <prvHeapInit+0xb4>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <prvHeapInit+0xb8>)
 80075e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a09      	ldr	r2, [pc, #36]	; (8007610 <prvHeapInit+0xbc>)
 80075ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <prvHeapInit+0xc0>)
 80075ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075f2:	601a      	str	r2, [r3, #0]
}
 80075f4:	bf00      	nop
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	2000097c 	.word	0x2000097c
 8007604:	2000308c 	.word	0x2000308c
 8007608:	20003094 	.word	0x20003094
 800760c:	2000309c 	.word	0x2000309c
 8007610:	20003098 	.word	0x20003098
 8007614:	200030a0 	.word	0x200030a0

08007618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007620:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <prvInsertBlockIntoFreeList+0xac>)
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <prvInsertBlockIntoFreeList+0x14>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	429a      	cmp	r2, r3
 8007634:	d8f7      	bhi.n	8007626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	4413      	add	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d108      	bne.n	800765a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d118      	bne.n	80076a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d00d      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	441a      	add	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e008      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e003      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d002      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000308c 	.word	0x2000308c
 80076c8:	20003094 	.word	0x20003094

080076cc <__cvt>:
 80076cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	ec55 4b10 	vmov	r4, r5, d0
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	460e      	mov	r6, r1
 80076d8:	4619      	mov	r1, r3
 80076da:	462b      	mov	r3, r5
 80076dc:	bfbb      	ittet	lt
 80076de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076e2:	461d      	movlt	r5, r3
 80076e4:	2300      	movge	r3, #0
 80076e6:	232d      	movlt	r3, #45	; 0x2d
 80076e8:	700b      	strb	r3, [r1, #0]
 80076ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f0:	4691      	mov	r9, r2
 80076f2:	f023 0820 	bic.w	r8, r3, #32
 80076f6:	bfbc      	itt	lt
 80076f8:	4622      	movlt	r2, r4
 80076fa:	4614      	movlt	r4, r2
 80076fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007700:	d005      	beq.n	800770e <__cvt+0x42>
 8007702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007706:	d100      	bne.n	800770a <__cvt+0x3e>
 8007708:	3601      	adds	r6, #1
 800770a:	2102      	movs	r1, #2
 800770c:	e000      	b.n	8007710 <__cvt+0x44>
 800770e:	2103      	movs	r1, #3
 8007710:	ab03      	add	r3, sp, #12
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	ab02      	add	r3, sp, #8
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	ec45 4b10 	vmov	d0, r4, r5
 800771c:	4653      	mov	r3, sl
 800771e:	4632      	mov	r2, r6
 8007720:	f001 f8e2 	bl	80088e8 <_dtoa_r>
 8007724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007728:	4607      	mov	r7, r0
 800772a:	d102      	bne.n	8007732 <__cvt+0x66>
 800772c:	f019 0f01 	tst.w	r9, #1
 8007730:	d022      	beq.n	8007778 <__cvt+0xac>
 8007732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007736:	eb07 0906 	add.w	r9, r7, r6
 800773a:	d110      	bne.n	800775e <__cvt+0x92>
 800773c:	783b      	ldrb	r3, [r7, #0]
 800773e:	2b30      	cmp	r3, #48	; 0x30
 8007740:	d10a      	bne.n	8007758 <__cvt+0x8c>
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800774e:	b918      	cbnz	r0, 8007758 <__cvt+0x8c>
 8007750:	f1c6 0601 	rsb	r6, r6, #1
 8007754:	f8ca 6000 	str.w	r6, [sl]
 8007758:	f8da 3000 	ldr.w	r3, [sl]
 800775c:	4499      	add	r9, r3
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f9 f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800776a:	b108      	cbz	r0, 8007770 <__cvt+0xa4>
 800776c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007770:	2230      	movs	r2, #48	; 0x30
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	454b      	cmp	r3, r9
 8007776:	d307      	bcc.n	8007788 <__cvt+0xbc>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800777c:	1bdb      	subs	r3, r3, r7
 800777e:	4638      	mov	r0, r7
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	b004      	add	sp, #16
 8007784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e7f0      	b.n	8007772 <__cvt+0xa6>

08007790 <__exponent>:
 8007790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007792:	4603      	mov	r3, r0
 8007794:	2900      	cmp	r1, #0
 8007796:	bfb8      	it	lt
 8007798:	4249      	neglt	r1, r1
 800779a:	f803 2b02 	strb.w	r2, [r3], #2
 800779e:	bfb4      	ite	lt
 80077a0:	222d      	movlt	r2, #45	; 0x2d
 80077a2:	222b      	movge	r2, #43	; 0x2b
 80077a4:	2909      	cmp	r1, #9
 80077a6:	7042      	strb	r2, [r0, #1]
 80077a8:	dd2a      	ble.n	8007800 <__exponent+0x70>
 80077aa:	f10d 0207 	add.w	r2, sp, #7
 80077ae:	4617      	mov	r7, r2
 80077b0:	260a      	movs	r6, #10
 80077b2:	4694      	mov	ip, r2
 80077b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80077b8:	fb06 1415 	mls	r4, r6, r5, r1
 80077bc:	3430      	adds	r4, #48	; 0x30
 80077be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80077c2:	460c      	mov	r4, r1
 80077c4:	2c63      	cmp	r4, #99	; 0x63
 80077c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80077ca:	4629      	mov	r1, r5
 80077cc:	dcf1      	bgt.n	80077b2 <__exponent+0x22>
 80077ce:	3130      	adds	r1, #48	; 0x30
 80077d0:	f1ac 0402 	sub.w	r4, ip, #2
 80077d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077d8:	1c41      	adds	r1, r0, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	42ba      	cmp	r2, r7
 80077de:	d30a      	bcc.n	80077f6 <__exponent+0x66>
 80077e0:	f10d 0209 	add.w	r2, sp, #9
 80077e4:	eba2 020c 	sub.w	r2, r2, ip
 80077e8:	42bc      	cmp	r4, r7
 80077ea:	bf88      	it	hi
 80077ec:	2200      	movhi	r2, #0
 80077ee:	4413      	add	r3, r2
 80077f0:	1a18      	subs	r0, r3, r0
 80077f2:	b003      	add	sp, #12
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80077fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80077fe:	e7ed      	b.n	80077dc <__exponent+0x4c>
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	3130      	adds	r1, #48	; 0x30
 8007804:	7083      	strb	r3, [r0, #2]
 8007806:	70c1      	strb	r1, [r0, #3]
 8007808:	1d03      	adds	r3, r0, #4
 800780a:	e7f1      	b.n	80077f0 <__exponent+0x60>

0800780c <_printf_float>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	ed2d 8b02 	vpush	{d8}
 8007814:	b08d      	sub	sp, #52	; 0x34
 8007816:	460c      	mov	r4, r1
 8007818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800781c:	4616      	mov	r6, r2
 800781e:	461f      	mov	r7, r3
 8007820:	4605      	mov	r5, r0
 8007822:	f000 fef7 	bl	8008614 <_localeconv_r>
 8007826:	f8d0 a000 	ldr.w	sl, [r0]
 800782a:	4650      	mov	r0, sl
 800782c:	f7f8 fd28 	bl	8000280 <strlen>
 8007830:	2300      	movs	r3, #0
 8007832:	930a      	str	r3, [sp, #40]	; 0x28
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	9305      	str	r3, [sp, #20]
 8007838:	f8d8 3000 	ldr.w	r3, [r8]
 800783c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007840:	3307      	adds	r3, #7
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	f103 0208 	add.w	r2, r3, #8
 800784a:	f8c8 2000 	str.w	r2, [r8]
 800784e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	f8cd 8018 	str.w	r8, [sp, #24]
 800785c:	ee08 0a10 	vmov	s16, r0
 8007860:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007868:	4b9e      	ldr	r3, [pc, #632]	; (8007ae4 <_printf_float+0x2d8>)
 800786a:	f04f 32ff 	mov.w	r2, #4294967295
 800786e:	f7f9 f965 	bl	8000b3c <__aeabi_dcmpun>
 8007872:	bb88      	cbnz	r0, 80078d8 <_printf_float+0xcc>
 8007874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007878:	4b9a      	ldr	r3, [pc, #616]	; (8007ae4 <_printf_float+0x2d8>)
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	f7f9 f93f 	bl	8000b00 <__aeabi_dcmple>
 8007882:	bb48      	cbnz	r0, 80078d8 <_printf_float+0xcc>
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4640      	mov	r0, r8
 800788a:	4649      	mov	r1, r9
 800788c:	f7f9 f92e 	bl	8000aec <__aeabi_dcmplt>
 8007890:	b110      	cbz	r0, 8007898 <_printf_float+0x8c>
 8007892:	232d      	movs	r3, #45	; 0x2d
 8007894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007898:	4a93      	ldr	r2, [pc, #588]	; (8007ae8 <_printf_float+0x2dc>)
 800789a:	4b94      	ldr	r3, [pc, #592]	; (8007aec <_printf_float+0x2e0>)
 800789c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078a0:	bf94      	ite	ls
 80078a2:	4690      	movls	r8, r2
 80078a4:	4698      	movhi	r8, r3
 80078a6:	2303      	movs	r3, #3
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	9b05      	ldr	r3, [sp, #20]
 80078ac:	f023 0304 	bic.w	r3, r3, #4
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	9700      	str	r7, [sp, #0]
 80078b8:	4633      	mov	r3, r6
 80078ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f9da 	bl	8007c78 <_printf_common>
 80078c4:	3001      	adds	r0, #1
 80078c6:	f040 8090 	bne.w	80079ea <_printf_float+0x1de>
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b00d      	add	sp, #52	; 0x34
 80078d0:	ecbd 8b02 	vpop	{d8}
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	4640      	mov	r0, r8
 80078de:	4649      	mov	r1, r9
 80078e0:	f7f9 f92c 	bl	8000b3c <__aeabi_dcmpun>
 80078e4:	b140      	cbz	r0, 80078f8 <_printf_float+0xec>
 80078e6:	464b      	mov	r3, r9
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfbc      	itt	lt
 80078ec:	232d      	movlt	r3, #45	; 0x2d
 80078ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078f2:	4a7f      	ldr	r2, [pc, #508]	; (8007af0 <_printf_float+0x2e4>)
 80078f4:	4b7f      	ldr	r3, [pc, #508]	; (8007af4 <_printf_float+0x2e8>)
 80078f6:	e7d1      	b.n	800789c <_printf_float+0x90>
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078fe:	9206      	str	r2, [sp, #24]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	d13f      	bne.n	8007984 <_printf_float+0x178>
 8007904:	2306      	movs	r3, #6
 8007906:	6063      	str	r3, [r4, #4]
 8007908:	9b05      	ldr	r3, [sp, #20]
 800790a:	6861      	ldr	r1, [r4, #4]
 800790c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007910:	2300      	movs	r3, #0
 8007912:	9303      	str	r3, [sp, #12]
 8007914:	ab0a      	add	r3, sp, #40	; 0x28
 8007916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800791a:	ab09      	add	r3, sp, #36	; 0x24
 800791c:	ec49 8b10 	vmov	d0, r8, r9
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007928:	4628      	mov	r0, r5
 800792a:	f7ff fecf 	bl	80076cc <__cvt>
 800792e:	9b06      	ldr	r3, [sp, #24]
 8007930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007932:	2b47      	cmp	r3, #71	; 0x47
 8007934:	4680      	mov	r8, r0
 8007936:	d108      	bne.n	800794a <_printf_float+0x13e>
 8007938:	1cc8      	adds	r0, r1, #3
 800793a:	db02      	blt.n	8007942 <_printf_float+0x136>
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	4299      	cmp	r1, r3
 8007940:	dd41      	ble.n	80079c6 <_printf_float+0x1ba>
 8007942:	f1ab 0302 	sub.w	r3, fp, #2
 8007946:	fa5f fb83 	uxtb.w	fp, r3
 800794a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800794e:	d820      	bhi.n	8007992 <_printf_float+0x186>
 8007950:	3901      	subs	r1, #1
 8007952:	465a      	mov	r2, fp
 8007954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007958:	9109      	str	r1, [sp, #36]	; 0x24
 800795a:	f7ff ff19 	bl	8007790 <__exponent>
 800795e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007960:	1813      	adds	r3, r2, r0
 8007962:	2a01      	cmp	r2, #1
 8007964:	4681      	mov	r9, r0
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	dc02      	bgt.n	8007970 <_printf_float+0x164>
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	07d2      	lsls	r2, r2, #31
 800796e:	d501      	bpl.n	8007974 <_printf_float+0x168>
 8007970:	3301      	adds	r3, #1
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007978:	2b00      	cmp	r3, #0
 800797a:	d09c      	beq.n	80078b6 <_printf_float+0xaa>
 800797c:	232d      	movs	r3, #45	; 0x2d
 800797e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007982:	e798      	b.n	80078b6 <_printf_float+0xaa>
 8007984:	9a06      	ldr	r2, [sp, #24]
 8007986:	2a47      	cmp	r2, #71	; 0x47
 8007988:	d1be      	bne.n	8007908 <_printf_float+0xfc>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1bc      	bne.n	8007908 <_printf_float+0xfc>
 800798e:	2301      	movs	r3, #1
 8007990:	e7b9      	b.n	8007906 <_printf_float+0xfa>
 8007992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007996:	d118      	bne.n	80079ca <_printf_float+0x1be>
 8007998:	2900      	cmp	r1, #0
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	dd0b      	ble.n	80079b6 <_printf_float+0x1aa>
 800799e:	6121      	str	r1, [r4, #16]
 80079a0:	b913      	cbnz	r3, 80079a8 <_printf_float+0x19c>
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	07d0      	lsls	r0, r2, #31
 80079a6:	d502      	bpl.n	80079ae <_printf_float+0x1a2>
 80079a8:	3301      	adds	r3, #1
 80079aa:	440b      	add	r3, r1
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80079b0:	f04f 0900 	mov.w	r9, #0
 80079b4:	e7de      	b.n	8007974 <_printf_float+0x168>
 80079b6:	b913      	cbnz	r3, 80079be <_printf_float+0x1b2>
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	07d2      	lsls	r2, r2, #31
 80079bc:	d501      	bpl.n	80079c2 <_printf_float+0x1b6>
 80079be:	3302      	adds	r3, #2
 80079c0:	e7f4      	b.n	80079ac <_printf_float+0x1a0>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e7f2      	b.n	80079ac <_printf_float+0x1a0>
 80079c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079cc:	4299      	cmp	r1, r3
 80079ce:	db05      	blt.n	80079dc <_printf_float+0x1d0>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	6121      	str	r1, [r4, #16]
 80079d4:	07d8      	lsls	r0, r3, #31
 80079d6:	d5ea      	bpl.n	80079ae <_printf_float+0x1a2>
 80079d8:	1c4b      	adds	r3, r1, #1
 80079da:	e7e7      	b.n	80079ac <_printf_float+0x1a0>
 80079dc:	2900      	cmp	r1, #0
 80079de:	bfd4      	ite	le
 80079e0:	f1c1 0202 	rsble	r2, r1, #2
 80079e4:	2201      	movgt	r2, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	e7e0      	b.n	80079ac <_printf_float+0x1a0>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	055a      	lsls	r2, r3, #21
 80079ee:	d407      	bmi.n	8007a00 <_printf_float+0x1f4>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	4642      	mov	r2, r8
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	d12c      	bne.n	8007a58 <_printf_float+0x24c>
 80079fe:	e764      	b.n	80078ca <_printf_float+0xbe>
 8007a00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a04:	f240 80e0 	bls.w	8007bc8 <_printf_float+0x3bc>
 8007a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f7f9 f862 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d034      	beq.n	8007a82 <_printf_float+0x276>
 8007a18:	4a37      	ldr	r2, [pc, #220]	; (8007af8 <_printf_float+0x2ec>)
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f af51 	beq.w	80078ca <_printf_float+0xbe>
 8007a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	db02      	blt.n	8007a36 <_printf_float+0x22a>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	07d8      	lsls	r0, r3, #31
 8007a34:	d510      	bpl.n	8007a58 <_printf_float+0x24c>
 8007a36:	ee18 3a10 	vmov	r3, s16
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f af41 	beq.w	80078ca <_printf_float+0xbe>
 8007a48:	f04f 0800 	mov.w	r8, #0
 8007a4c:	f104 091a 	add.w	r9, r4, #26
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	3b01      	subs	r3, #1
 8007a54:	4543      	cmp	r3, r8
 8007a56:	dc09      	bgt.n	8007a6c <_printf_float+0x260>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	079b      	lsls	r3, r3, #30
 8007a5c:	f100 8107 	bmi.w	8007c6e <_printf_float+0x462>
 8007a60:	68e0      	ldr	r0, [r4, #12]
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	4298      	cmp	r0, r3
 8007a66:	bfb8      	it	lt
 8007a68:	4618      	movlt	r0, r3
 8007a6a:	e730      	b.n	80078ce <_printf_float+0xc2>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	464a      	mov	r2, r9
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af27 	beq.w	80078ca <_printf_float+0xbe>
 8007a7c:	f108 0801 	add.w	r8, r8, #1
 8007a80:	e7e6      	b.n	8007a50 <_printf_float+0x244>
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dc39      	bgt.n	8007afc <_printf_float+0x2f0>
 8007a88:	4a1b      	ldr	r2, [pc, #108]	; (8007af8 <_printf_float+0x2ec>)
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f af19 	beq.w	80078ca <_printf_float+0xbe>
 8007a98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d102      	bne.n	8007aa6 <_printf_float+0x29a>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07d9      	lsls	r1, r3, #31
 8007aa4:	d5d8      	bpl.n	8007a58 <_printf_float+0x24c>
 8007aa6:	ee18 3a10 	vmov	r3, s16
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f af09 	beq.w	80078ca <_printf_float+0xbe>
 8007ab8:	f04f 0900 	mov.w	r9, #0
 8007abc:	f104 0a1a 	add.w	sl, r4, #26
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	425b      	negs	r3, r3
 8007ac4:	454b      	cmp	r3, r9
 8007ac6:	dc01      	bgt.n	8007acc <_printf_float+0x2c0>
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	e792      	b.n	80079f2 <_printf_float+0x1e6>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4652      	mov	r2, sl
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f aef7 	beq.w	80078ca <_printf_float+0xbe>
 8007adc:	f109 0901 	add.w	r9, r9, #1
 8007ae0:	e7ee      	b.n	8007ac0 <_printf_float+0x2b4>
 8007ae2:	bf00      	nop
 8007ae4:	7fefffff 	.word	0x7fefffff
 8007ae8:	0800c020 	.word	0x0800c020
 8007aec:	0800c024 	.word	0x0800c024
 8007af0:	0800c028 	.word	0x0800c028
 8007af4:	0800c02c 	.word	0x0800c02c
 8007af8:	0800c030 	.word	0x0800c030
 8007afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bfa8      	it	ge
 8007b04:	461a      	movge	r2, r3
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	4691      	mov	r9, r2
 8007b0a:	dc37      	bgt.n	8007b7c <_printf_float+0x370>
 8007b0c:	f04f 0b00 	mov.w	fp, #0
 8007b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b14:	f104 021a 	add.w	r2, r4, #26
 8007b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b1a:	9305      	str	r3, [sp, #20]
 8007b1c:	eba3 0309 	sub.w	r3, r3, r9
 8007b20:	455b      	cmp	r3, fp
 8007b22:	dc33      	bgt.n	8007b8c <_printf_float+0x380>
 8007b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	db3b      	blt.n	8007ba4 <_printf_float+0x398>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	07da      	lsls	r2, r3, #31
 8007b30:	d438      	bmi.n	8007ba4 <_printf_float+0x398>
 8007b32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b36:	eba2 0903 	sub.w	r9, r2, r3
 8007b3a:	9b05      	ldr	r3, [sp, #20]
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	4591      	cmp	r9, r2
 8007b40:	bfa8      	it	ge
 8007b42:	4691      	movge	r9, r2
 8007b44:	f1b9 0f00 	cmp.w	r9, #0
 8007b48:	dc35      	bgt.n	8007bb6 <_printf_float+0x3aa>
 8007b4a:	f04f 0800 	mov.w	r8, #0
 8007b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b52:	f104 0a1a 	add.w	sl, r4, #26
 8007b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	eba3 0309 	sub.w	r3, r3, r9
 8007b60:	4543      	cmp	r3, r8
 8007b62:	f77f af79 	ble.w	8007a58 <_printf_float+0x24c>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4652      	mov	r2, sl
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	f43f aeaa 	beq.w	80078ca <_printf_float+0xbe>
 8007b76:	f108 0801 	add.w	r8, r8, #1
 8007b7a:	e7ec      	b.n	8007b56 <_printf_float+0x34a>
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4642      	mov	r2, r8
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	d1c0      	bne.n	8007b0c <_printf_float+0x300>
 8007b8a:	e69e      	b.n	80078ca <_printf_float+0xbe>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	9205      	str	r2, [sp, #20]
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f ae97 	beq.w	80078ca <_printf_float+0xbe>
 8007b9c:	9a05      	ldr	r2, [sp, #20]
 8007b9e:	f10b 0b01 	add.w	fp, fp, #1
 8007ba2:	e7b9      	b.n	8007b18 <_printf_float+0x30c>
 8007ba4:	ee18 3a10 	vmov	r3, s16
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d1be      	bne.n	8007b32 <_printf_float+0x326>
 8007bb4:	e689      	b.n	80078ca <_printf_float+0xbe>
 8007bb6:	9a05      	ldr	r2, [sp, #20]
 8007bb8:	464b      	mov	r3, r9
 8007bba:	4442      	add	r2, r8
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d1c1      	bne.n	8007b4a <_printf_float+0x33e>
 8007bc6:	e680      	b.n	80078ca <_printf_float+0xbe>
 8007bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bca:	2a01      	cmp	r2, #1
 8007bcc:	dc01      	bgt.n	8007bd2 <_printf_float+0x3c6>
 8007bce:	07db      	lsls	r3, r3, #31
 8007bd0:	d53a      	bpl.n	8007c48 <_printf_float+0x43c>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	f43f ae74 	beq.w	80078ca <_printf_float+0xbe>
 8007be2:	ee18 3a10 	vmov	r3, s16
 8007be6:	4652      	mov	r2, sl
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f43f ae6b 	beq.w	80078ca <_printf_float+0xbe>
 8007bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007c00:	f7f8 ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c04:	b9d8      	cbnz	r0, 8007c3e <_printf_float+0x432>
 8007c06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c0a:	f108 0201 	add.w	r2, r8, #1
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	d10e      	bne.n	8007c36 <_printf_float+0x42a>
 8007c18:	e657      	b.n	80078ca <_printf_float+0xbe>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f ae50 	beq.w	80078ca <_printf_float+0xbe>
 8007c2a:	f108 0801 	add.w	r8, r8, #1
 8007c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c30:	3b01      	subs	r3, #1
 8007c32:	4543      	cmp	r3, r8
 8007c34:	dcf1      	bgt.n	8007c1a <_printf_float+0x40e>
 8007c36:	464b      	mov	r3, r9
 8007c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c3c:	e6da      	b.n	80079f4 <_printf_float+0x1e8>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	f104 0a1a 	add.w	sl, r4, #26
 8007c46:	e7f2      	b.n	8007c2e <_printf_float+0x422>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	e7df      	b.n	8007c0e <_printf_float+0x402>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	464a      	mov	r2, r9
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f ae36 	beq.w	80078ca <_printf_float+0xbe>
 8007c5e:	f108 0801 	add.w	r8, r8, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	dcf0      	bgt.n	8007c4e <_printf_float+0x442>
 8007c6c:	e6f8      	b.n	8007a60 <_printf_float+0x254>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	f104 0919 	add.w	r9, r4, #25
 8007c76:	e7f4      	b.n	8007c62 <_printf_float+0x456>

08007c78 <_printf_common>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	4699      	mov	r9, r3
 8007c80:	688a      	ldr	r2, [r1, #8]
 8007c82:	690b      	ldr	r3, [r1, #16]
 8007c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	bfb8      	it	lt
 8007c8c:	4613      	movlt	r3, r2
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c94:	4607      	mov	r7, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b10a      	cbz	r2, 8007c9e <_printf_common+0x26>
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0699      	lsls	r1, r3, #26
 8007ca2:	bf42      	ittt	mi
 8007ca4:	6833      	ldrmi	r3, [r6, #0]
 8007ca6:	3302      	addmi	r3, #2
 8007ca8:	6033      	strmi	r3, [r6, #0]
 8007caa:	6825      	ldr	r5, [r4, #0]
 8007cac:	f015 0506 	ands.w	r5, r5, #6
 8007cb0:	d106      	bne.n	8007cc0 <_printf_common+0x48>
 8007cb2:	f104 0a19 	add.w	sl, r4, #25
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	6832      	ldr	r2, [r6, #0]
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc26      	bgt.n	8007d0e <_printf_common+0x96>
 8007cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc4:	1e13      	subs	r3, r2, #0
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	0692      	lsls	r2, r2, #26
 8007cce:	d42b      	bmi.n	8007d28 <_printf_common+0xb0>
 8007cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c0      	blx	r8
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d01e      	beq.n	8007d1c <_printf_common+0xa4>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	f003 0306 	and.w	r3, r3, #6
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	bf02      	ittt	eq
 8007cea:	68e5      	ldreq	r5, [r4, #12]
 8007cec:	6833      	ldreq	r3, [r6, #0]
 8007cee:	1aed      	subeq	r5, r5, r3
 8007cf0:	68a3      	ldr	r3, [r4, #8]
 8007cf2:	bf0c      	ite	eq
 8007cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf8:	2500      	movne	r5, #0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bfc4      	itt	gt
 8007cfe:	1a9b      	subgt	r3, r3, r2
 8007d00:	18ed      	addgt	r5, r5, r3
 8007d02:	2600      	movs	r6, #0
 8007d04:	341a      	adds	r4, #26
 8007d06:	42b5      	cmp	r5, r6
 8007d08:	d11a      	bne.n	8007d40 <_printf_common+0xc8>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e008      	b.n	8007d20 <_printf_common+0xa8>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4649      	mov	r1, r9
 8007d14:	4638      	mov	r0, r7
 8007d16:	47c0      	blx	r8
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d103      	bne.n	8007d24 <_printf_common+0xac>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	3501      	adds	r5, #1
 8007d26:	e7c6      	b.n	8007cb6 <_printf_common+0x3e>
 8007d28:	18e1      	adds	r1, r4, r3
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	2030      	movs	r0, #48	; 0x30
 8007d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d32:	4422      	add	r2, r4
 8007d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	e7c7      	b.n	8007cd0 <_printf_common+0x58>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4622      	mov	r2, r4
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0e6      	beq.n	8007d1c <_printf_common+0xa4>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7d9      	b.n	8007d06 <_printf_common+0x8e>
	...

08007d54 <_printf_i>:
 8007d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	7e0f      	ldrb	r7, [r1, #24]
 8007d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d5c:	2f78      	cmp	r7, #120	; 0x78
 8007d5e:	4691      	mov	r9, r2
 8007d60:	4680      	mov	r8, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	469a      	mov	sl, r3
 8007d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6a:	d807      	bhi.n	8007d7c <_printf_i+0x28>
 8007d6c:	2f62      	cmp	r7, #98	; 0x62
 8007d6e:	d80a      	bhi.n	8007d86 <_printf_i+0x32>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	f000 80d4 	beq.w	8007f1e <_printf_i+0x1ca>
 8007d76:	2f58      	cmp	r7, #88	; 0x58
 8007d78:	f000 80c0 	beq.w	8007efc <_printf_i+0x1a8>
 8007d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d84:	e03a      	b.n	8007dfc <_printf_i+0xa8>
 8007d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8a:	2b15      	cmp	r3, #21
 8007d8c:	d8f6      	bhi.n	8007d7c <_printf_i+0x28>
 8007d8e:	a101      	add	r1, pc, #4	; (adr r1, 8007d94 <_printf_i+0x40>)
 8007d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d94:	08007ded 	.word	0x08007ded
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007d7d 	.word	0x08007d7d
 8007da0:	08007d7d 	.word	0x08007d7d
 8007da4:	08007d7d 	.word	0x08007d7d
 8007da8:	08007d7d 	.word	0x08007d7d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d7d 	.word	0x08007d7d
 8007db4:	08007d7d 	.word	0x08007d7d
 8007db8:	08007d7d 	.word	0x08007d7d
 8007dbc:	08007d7d 	.word	0x08007d7d
 8007dc0:	08007f05 	.word	0x08007f05
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007ebf 	.word	0x08007ebf
 8007dcc:	08007d7d 	.word	0x08007d7d
 8007dd0:	08007d7d 	.word	0x08007d7d
 8007dd4:	08007f27 	.word	0x08007f27
 8007dd8:	08007d7d 	.word	0x08007d7d
 8007ddc:	08007e2d 	.word	0x08007e2d
 8007de0:	08007d7d 	.word	0x08007d7d
 8007de4:	08007d7d 	.word	0x08007d7d
 8007de8:	08007ec7 	.word	0x08007ec7
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	602a      	str	r2, [r5, #0]
 8007df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e09f      	b.n	8007f40 <_printf_i+0x1ec>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	0607      	lsls	r7, r0, #24
 8007e06:	f103 0104 	add.w	r1, r3, #4
 8007e0a:	6029      	str	r1, [r5, #0]
 8007e0c:	d501      	bpl.n	8007e12 <_printf_i+0xbe>
 8007e0e:	681e      	ldr	r6, [r3, #0]
 8007e10:	e003      	b.n	8007e1a <_printf_i+0xc6>
 8007e12:	0646      	lsls	r6, r0, #25
 8007e14:	d5fb      	bpl.n	8007e0e <_printf_i+0xba>
 8007e16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	da03      	bge.n	8007e26 <_printf_i+0xd2>
 8007e1e:	232d      	movs	r3, #45	; 0x2d
 8007e20:	4276      	negs	r6, r6
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e26:	485a      	ldr	r0, [pc, #360]	; (8007f90 <_printf_i+0x23c>)
 8007e28:	230a      	movs	r3, #10
 8007e2a:	e012      	b.n	8007e52 <_printf_i+0xfe>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6029      	str	r1, [r5, #0]
 8007e34:	0605      	lsls	r5, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xe8>
 8007e38:	681e      	ldr	r6, [r3, #0]
 8007e3a:	e002      	b.n	8007e42 <_printf_i+0xee>
 8007e3c:	0641      	lsls	r1, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xe4>
 8007e40:	881e      	ldrh	r6, [r3, #0]
 8007e42:	4853      	ldr	r0, [pc, #332]	; (8007f90 <_printf_i+0x23c>)
 8007e44:	2f6f      	cmp	r7, #111	; 0x6f
 8007e46:	bf0c      	ite	eq
 8007e48:	2308      	moveq	r3, #8
 8007e4a:	230a      	movne	r3, #10
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e52:	6865      	ldr	r5, [r4, #4]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	bfa2      	ittt	ge
 8007e5a:	6821      	ldrge	r1, [r4, #0]
 8007e5c:	f021 0104 	bicge.w	r1, r1, #4
 8007e60:	6021      	strge	r1, [r4, #0]
 8007e62:	b90e      	cbnz	r6, 8007e68 <_printf_i+0x114>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	d04b      	beq.n	8007f00 <_printf_i+0x1ac>
 8007e68:	4615      	mov	r5, r2
 8007e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e72:	5dc7      	ldrb	r7, [r0, r7]
 8007e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e78:	4637      	mov	r7, r6
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	d9f4      	bls.n	8007e6a <_printf_i+0x116>
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10b      	bne.n	8007e9c <_printf_i+0x148>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	07de      	lsls	r6, r3, #31
 8007e88:	d508      	bpl.n	8007e9c <_printf_i+0x148>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	bfde      	ittt	le
 8007e92:	2330      	movle	r3, #48	; 0x30
 8007e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e9c:	1b52      	subs	r2, r2, r5
 8007e9e:	6122      	str	r2, [r4, #16]
 8007ea0:	f8cd a000 	str.w	sl, [sp]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	aa03      	add	r2, sp, #12
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7ff fee4 	bl	8007c78 <_printf_common>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d14a      	bne.n	8007f4a <_printf_i+0x1f6>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	b004      	add	sp, #16
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	4833      	ldr	r0, [pc, #204]	; (8007f94 <_printf_i+0x240>)
 8007ec8:	2778      	movs	r7, #120	; 0x78
 8007eca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	061f      	lsls	r7, r3, #24
 8007ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ed8:	d402      	bmi.n	8007ee0 <_printf_i+0x18c>
 8007eda:	065f      	lsls	r7, r3, #25
 8007edc:	bf48      	it	mi
 8007ede:	b2b6      	uxthmi	r6, r6
 8007ee0:	07df      	lsls	r7, r3, #31
 8007ee2:	bf48      	it	mi
 8007ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee8:	6029      	str	r1, [r5, #0]
 8007eea:	bf48      	it	mi
 8007eec:	6023      	strmi	r3, [r4, #0]
 8007eee:	b91e      	cbnz	r6, 8007ef8 <_printf_i+0x1a4>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f023 0320 	bic.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	2310      	movs	r3, #16
 8007efa:	e7a7      	b.n	8007e4c <_printf_i+0xf8>
 8007efc:	4824      	ldr	r0, [pc, #144]	; (8007f90 <_printf_i+0x23c>)
 8007efe:	e7e4      	b.n	8007eca <_printf_i+0x176>
 8007f00:	4615      	mov	r5, r2
 8007f02:	e7bd      	b.n	8007e80 <_printf_i+0x12c>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	6826      	ldr	r6, [r4, #0]
 8007f08:	6961      	ldr	r1, [r4, #20]
 8007f0a:	1d18      	adds	r0, r3, #4
 8007f0c:	6028      	str	r0, [r5, #0]
 8007f0e:	0635      	lsls	r5, r6, #24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0x1c4>
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <_printf_i+0x1ca>
 8007f18:	0670      	lsls	r0, r6, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0x1c0>
 8007f1c:	8019      	strh	r1, [r3, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	4615      	mov	r5, r2
 8007f24:	e7bc      	b.n	8007ea0 <_printf_i+0x14c>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f7f8 f954 	bl	80001e0 <memchr>
 8007f38:	b108      	cbz	r0, 8007f3e <_printf_i+0x1ea>
 8007f3a:	1b40      	subs	r0, r0, r5
 8007f3c:	6060      	str	r0, [r4, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2300      	movs	r3, #0
 8007f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f48:	e7aa      	b.n	8007ea0 <_printf_i+0x14c>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0ad      	beq.n	8007eb4 <_printf_i+0x160>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	d413      	bmi.n	8007f86 <_printf_i+0x232>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	bfb8      	it	lt
 8007f66:	4618      	movlt	r0, r3
 8007f68:	e7a6      	b.n	8007eb8 <_printf_i+0x164>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d09d      	beq.n	8007eb4 <_printf_i+0x160>
 8007f78:	3501      	adds	r5, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dcf2      	bgt.n	8007f6a <_printf_i+0x216>
 8007f84:	e7eb      	b.n	8007f5e <_printf_i+0x20a>
 8007f86:	2500      	movs	r5, #0
 8007f88:	f104 0619 	add.w	r6, r4, #25
 8007f8c:	e7f5      	b.n	8007f7a <_printf_i+0x226>
 8007f8e:	bf00      	nop
 8007f90:	0800c032 	.word	0x0800c032
 8007f94:	0800c043 	.word	0x0800c043

08007f98 <_scanf_float>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	b087      	sub	sp, #28
 8007f9e:	4617      	mov	r7, r2
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	688b      	ldr	r3, [r1, #8]
 8007fa4:	1e5a      	subs	r2, r3, #1
 8007fa6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007faa:	bf83      	ittte	hi
 8007fac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fb0:	195b      	addhi	r3, r3, r5
 8007fb2:	9302      	strhi	r3, [sp, #8]
 8007fb4:	2300      	movls	r3, #0
 8007fb6:	bf86      	itte	hi
 8007fb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fbc:	608b      	strhi	r3, [r1, #8]
 8007fbe:	9302      	strls	r3, [sp, #8]
 8007fc0:	680b      	ldr	r3, [r1, #0]
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	2500      	movs	r5, #0
 8007fc6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007fca:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	465e      	mov	r6, fp
 8007fd8:	46aa      	mov	sl, r5
 8007fda:	46a9      	mov	r9, r5
 8007fdc:	9501      	str	r5, [sp, #4]
 8007fde:	68a2      	ldr	r2, [r4, #8]
 8007fe0:	b152      	cbz	r2, 8007ff8 <_scanf_float+0x60>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b4e      	cmp	r3, #78	; 0x4e
 8007fe8:	d864      	bhi.n	80080b4 <_scanf_float+0x11c>
 8007fea:	2b40      	cmp	r3, #64	; 0x40
 8007fec:	d83c      	bhi.n	8008068 <_scanf_float+0xd0>
 8007fee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ff2:	b2c8      	uxtb	r0, r1
 8007ff4:	280e      	cmp	r0, #14
 8007ff6:	d93a      	bls.n	800806e <_scanf_float+0xd6>
 8007ff8:	f1b9 0f00 	cmp.w	r9, #0
 8007ffc:	d003      	beq.n	8008006 <_scanf_float+0x6e>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800800a:	f1ba 0f01 	cmp.w	sl, #1
 800800e:	f200 8113 	bhi.w	8008238 <_scanf_float+0x2a0>
 8008012:	455e      	cmp	r6, fp
 8008014:	f200 8105 	bhi.w	8008222 <_scanf_float+0x28a>
 8008018:	2501      	movs	r5, #1
 800801a:	4628      	mov	r0, r5
 800801c:	b007      	add	sp, #28
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008026:	2a0d      	cmp	r2, #13
 8008028:	d8e6      	bhi.n	8007ff8 <_scanf_float+0x60>
 800802a:	a101      	add	r1, pc, #4	; (adr r1, 8008030 <_scanf_float+0x98>)
 800802c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008030:	0800816f 	.word	0x0800816f
 8008034:	08007ff9 	.word	0x08007ff9
 8008038:	08007ff9 	.word	0x08007ff9
 800803c:	08007ff9 	.word	0x08007ff9
 8008040:	080081cf 	.word	0x080081cf
 8008044:	080081a7 	.word	0x080081a7
 8008048:	08007ff9 	.word	0x08007ff9
 800804c:	08007ff9 	.word	0x08007ff9
 8008050:	0800817d 	.word	0x0800817d
 8008054:	08007ff9 	.word	0x08007ff9
 8008058:	08007ff9 	.word	0x08007ff9
 800805c:	08007ff9 	.word	0x08007ff9
 8008060:	08007ff9 	.word	0x08007ff9
 8008064:	08008135 	.word	0x08008135
 8008068:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800806c:	e7db      	b.n	8008026 <_scanf_float+0x8e>
 800806e:	290e      	cmp	r1, #14
 8008070:	d8c2      	bhi.n	8007ff8 <_scanf_float+0x60>
 8008072:	a001      	add	r0, pc, #4	; (adr r0, 8008078 <_scanf_float+0xe0>)
 8008074:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008078:	08008127 	.word	0x08008127
 800807c:	08007ff9 	.word	0x08007ff9
 8008080:	08008127 	.word	0x08008127
 8008084:	080081bb 	.word	0x080081bb
 8008088:	08007ff9 	.word	0x08007ff9
 800808c:	080080d5 	.word	0x080080d5
 8008090:	08008111 	.word	0x08008111
 8008094:	08008111 	.word	0x08008111
 8008098:	08008111 	.word	0x08008111
 800809c:	08008111 	.word	0x08008111
 80080a0:	08008111 	.word	0x08008111
 80080a4:	08008111 	.word	0x08008111
 80080a8:	08008111 	.word	0x08008111
 80080ac:	08008111 	.word	0x08008111
 80080b0:	08008111 	.word	0x08008111
 80080b4:	2b6e      	cmp	r3, #110	; 0x6e
 80080b6:	d809      	bhi.n	80080cc <_scanf_float+0x134>
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d8b2      	bhi.n	8008022 <_scanf_float+0x8a>
 80080bc:	2b54      	cmp	r3, #84	; 0x54
 80080be:	d077      	beq.n	80081b0 <_scanf_float+0x218>
 80080c0:	2b59      	cmp	r3, #89	; 0x59
 80080c2:	d199      	bne.n	8007ff8 <_scanf_float+0x60>
 80080c4:	2d07      	cmp	r5, #7
 80080c6:	d197      	bne.n	8007ff8 <_scanf_float+0x60>
 80080c8:	2508      	movs	r5, #8
 80080ca:	e029      	b.n	8008120 <_scanf_float+0x188>
 80080cc:	2b74      	cmp	r3, #116	; 0x74
 80080ce:	d06f      	beq.n	80081b0 <_scanf_float+0x218>
 80080d0:	2b79      	cmp	r3, #121	; 0x79
 80080d2:	e7f6      	b.n	80080c2 <_scanf_float+0x12a>
 80080d4:	6821      	ldr	r1, [r4, #0]
 80080d6:	05c8      	lsls	r0, r1, #23
 80080d8:	d51a      	bpl.n	8008110 <_scanf_float+0x178>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080e0:	6021      	str	r1, [r4, #0]
 80080e2:	f109 0901 	add.w	r9, r9, #1
 80080e6:	b11b      	cbz	r3, 80080f0 <_scanf_float+0x158>
 80080e8:	3b01      	subs	r3, #1
 80080ea:	3201      	adds	r2, #1
 80080ec:	9302      	str	r3, [sp, #8]
 80080ee:	60a2      	str	r2, [r4, #8]
 80080f0:	68a3      	ldr	r3, [r4, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	3301      	adds	r3, #1
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3b01      	subs	r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	f340 8084 	ble.w	8008210 <_scanf_float+0x278>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3301      	adds	r3, #1
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	e766      	b.n	8007fde <_scanf_float+0x46>
 8008110:	eb1a 0f05 	cmn.w	sl, r5
 8008114:	f47f af70 	bne.w	8007ff8 <_scanf_float+0x60>
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	f806 3b01 	strb.w	r3, [r6], #1
 8008124:	e7e4      	b.n	80080f0 <_scanf_float+0x158>
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	0610      	lsls	r0, r2, #24
 800812a:	f57f af65 	bpl.w	8007ff8 <_scanf_float+0x60>
 800812e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008132:	e7f4      	b.n	800811e <_scanf_float+0x186>
 8008134:	f1ba 0f00 	cmp.w	sl, #0
 8008138:	d10e      	bne.n	8008158 <_scanf_float+0x1c0>
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	d10e      	bne.n	800815e <_scanf_float+0x1c6>
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008146:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800814a:	d108      	bne.n	800815e <_scanf_float+0x1c6>
 800814c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	f04f 0a01 	mov.w	sl, #1
 8008156:	e7e3      	b.n	8008120 <_scanf_float+0x188>
 8008158:	f1ba 0f02 	cmp.w	sl, #2
 800815c:	d055      	beq.n	800820a <_scanf_float+0x272>
 800815e:	2d01      	cmp	r5, #1
 8008160:	d002      	beq.n	8008168 <_scanf_float+0x1d0>
 8008162:	2d04      	cmp	r5, #4
 8008164:	f47f af48 	bne.w	8007ff8 <_scanf_float+0x60>
 8008168:	3501      	adds	r5, #1
 800816a:	b2ed      	uxtb	r5, r5
 800816c:	e7d8      	b.n	8008120 <_scanf_float+0x188>
 800816e:	f1ba 0f01 	cmp.w	sl, #1
 8008172:	f47f af41 	bne.w	8007ff8 <_scanf_float+0x60>
 8008176:	f04f 0a02 	mov.w	sl, #2
 800817a:	e7d1      	b.n	8008120 <_scanf_float+0x188>
 800817c:	b97d      	cbnz	r5, 800819e <_scanf_float+0x206>
 800817e:	f1b9 0f00 	cmp.w	r9, #0
 8008182:	f47f af3c 	bne.w	8007ffe <_scanf_float+0x66>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800818c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008190:	f47f af39 	bne.w	8008006 <_scanf_float+0x6e>
 8008194:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	2501      	movs	r5, #1
 800819c:	e7c0      	b.n	8008120 <_scanf_float+0x188>
 800819e:	2d03      	cmp	r5, #3
 80081a0:	d0e2      	beq.n	8008168 <_scanf_float+0x1d0>
 80081a2:	2d05      	cmp	r5, #5
 80081a4:	e7de      	b.n	8008164 <_scanf_float+0x1cc>
 80081a6:	2d02      	cmp	r5, #2
 80081a8:	f47f af26 	bne.w	8007ff8 <_scanf_float+0x60>
 80081ac:	2503      	movs	r5, #3
 80081ae:	e7b7      	b.n	8008120 <_scanf_float+0x188>
 80081b0:	2d06      	cmp	r5, #6
 80081b2:	f47f af21 	bne.w	8007ff8 <_scanf_float+0x60>
 80081b6:	2507      	movs	r5, #7
 80081b8:	e7b2      	b.n	8008120 <_scanf_float+0x188>
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	0591      	lsls	r1, r2, #22
 80081be:	f57f af1b 	bpl.w	8007ff8 <_scanf_float+0x60>
 80081c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80081cc:	e7a8      	b.n	8008120 <_scanf_float+0x188>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081d8:	d006      	beq.n	80081e8 <_scanf_float+0x250>
 80081da:	0550      	lsls	r0, r2, #21
 80081dc:	f57f af0c 	bpl.w	8007ff8 <_scanf_float+0x60>
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	f43f af0f 	beq.w	8008006 <_scanf_float+0x6e>
 80081e8:	0591      	lsls	r1, r2, #22
 80081ea:	bf58      	it	pl
 80081ec:	9901      	ldrpl	r1, [sp, #4]
 80081ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081f2:	bf58      	it	pl
 80081f4:	eba9 0101 	subpl.w	r1, r9, r1
 80081f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081fc:	bf58      	it	pl
 80081fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	f04f 0900 	mov.w	r9, #0
 8008208:	e78a      	b.n	8008120 <_scanf_float+0x188>
 800820a:	f04f 0a03 	mov.w	sl, #3
 800820e:	e787      	b.n	8008120 <_scanf_float+0x188>
 8008210:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008214:	4639      	mov	r1, r7
 8008216:	4640      	mov	r0, r8
 8008218:	4798      	blx	r3
 800821a:	2800      	cmp	r0, #0
 800821c:	f43f aedf 	beq.w	8007fde <_scanf_float+0x46>
 8008220:	e6ea      	b.n	8007ff8 <_scanf_float+0x60>
 8008222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008226:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800822a:	463a      	mov	r2, r7
 800822c:	4640      	mov	r0, r8
 800822e:	4798      	blx	r3
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	3b01      	subs	r3, #1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	e6ec      	b.n	8008012 <_scanf_float+0x7a>
 8008238:	1e6b      	subs	r3, r5, #1
 800823a:	2b06      	cmp	r3, #6
 800823c:	d825      	bhi.n	800828a <_scanf_float+0x2f2>
 800823e:	2d02      	cmp	r5, #2
 8008240:	d836      	bhi.n	80082b0 <_scanf_float+0x318>
 8008242:	455e      	cmp	r6, fp
 8008244:	f67f aee8 	bls.w	8008018 <_scanf_float+0x80>
 8008248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800824c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008250:	463a      	mov	r2, r7
 8008252:	4640      	mov	r0, r8
 8008254:	4798      	blx	r3
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	3b01      	subs	r3, #1
 800825a:	6123      	str	r3, [r4, #16]
 800825c:	e7f1      	b.n	8008242 <_scanf_float+0x2aa>
 800825e:	9802      	ldr	r0, [sp, #8]
 8008260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008264:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008268:	9002      	str	r0, [sp, #8]
 800826a:	463a      	mov	r2, r7
 800826c:	4640      	mov	r0, r8
 800826e:	4798      	blx	r3
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	3b01      	subs	r3, #1
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827a:	fa5f fa8a 	uxtb.w	sl, sl
 800827e:	f1ba 0f02 	cmp.w	sl, #2
 8008282:	d1ec      	bne.n	800825e <_scanf_float+0x2c6>
 8008284:	3d03      	subs	r5, #3
 8008286:	b2ed      	uxtb	r5, r5
 8008288:	1b76      	subs	r6, r6, r5
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	05da      	lsls	r2, r3, #23
 800828e:	d52f      	bpl.n	80082f0 <_scanf_float+0x358>
 8008290:	055b      	lsls	r3, r3, #21
 8008292:	d510      	bpl.n	80082b6 <_scanf_float+0x31e>
 8008294:	455e      	cmp	r6, fp
 8008296:	f67f aebf 	bls.w	8008018 <_scanf_float+0x80>
 800829a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800829e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082a2:	463a      	mov	r2, r7
 80082a4:	4640      	mov	r0, r8
 80082a6:	4798      	blx	r3
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	6123      	str	r3, [r4, #16]
 80082ae:	e7f1      	b.n	8008294 <_scanf_float+0x2fc>
 80082b0:	46aa      	mov	sl, r5
 80082b2:	9602      	str	r6, [sp, #8]
 80082b4:	e7df      	b.n	8008276 <_scanf_float+0x2de>
 80082b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	2965      	cmp	r1, #101	; 0x65
 80082be:	f103 33ff 	add.w	r3, r3, #4294967295
 80082c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	d00c      	beq.n	80082e4 <_scanf_float+0x34c>
 80082ca:	2945      	cmp	r1, #69	; 0x45
 80082cc:	d00a      	beq.n	80082e4 <_scanf_float+0x34c>
 80082ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082d2:	463a      	mov	r2, r7
 80082d4:	4640      	mov	r0, r8
 80082d6:	4798      	blx	r3
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082de:	3b01      	subs	r3, #1
 80082e0:	1eb5      	subs	r5, r6, #2
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082e8:	463a      	mov	r2, r7
 80082ea:	4640      	mov	r0, r8
 80082ec:	4798      	blx	r3
 80082ee:	462e      	mov	r6, r5
 80082f0:	6825      	ldr	r5, [r4, #0]
 80082f2:	f015 0510 	ands.w	r5, r5, #16
 80082f6:	d158      	bne.n	80083aa <_scanf_float+0x412>
 80082f8:	7035      	strb	r5, [r6, #0]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	d11c      	bne.n	8008340 <_scanf_float+0x3a8>
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	454b      	cmp	r3, r9
 800830a:	eba3 0209 	sub.w	r2, r3, r9
 800830e:	d124      	bne.n	800835a <_scanf_float+0x3c2>
 8008310:	2200      	movs	r2, #0
 8008312:	4659      	mov	r1, fp
 8008314:	4640      	mov	r0, r8
 8008316:	f002 fc93 	bl	800ac40 <_strtod_r>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	6821      	ldr	r1, [r4, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f011 0f02 	tst.w	r1, #2
 8008324:	ec57 6b10 	vmov	r6, r7, d0
 8008328:	f103 0204 	add.w	r2, r3, #4
 800832c:	d020      	beq.n	8008370 <_scanf_float+0x3d8>
 800832e:	9903      	ldr	r1, [sp, #12]
 8008330:	600a      	str	r2, [r1, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	e9c3 6700 	strd	r6, r7, [r3]
 8008338:	68e3      	ldr	r3, [r4, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60e3      	str	r3, [r4, #12]
 800833e:	e66c      	b.n	800801a <_scanf_float+0x82>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0e4      	beq.n	8008310 <_scanf_float+0x378>
 8008346:	9905      	ldr	r1, [sp, #20]
 8008348:	230a      	movs	r3, #10
 800834a:	462a      	mov	r2, r5
 800834c:	3101      	adds	r1, #1
 800834e:	4640      	mov	r0, r8
 8008350:	f002 fcfe 	bl	800ad50 <_strtol_r>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	9e05      	ldr	r6, [sp, #20]
 8008358:	1ac2      	subs	r2, r0, r3
 800835a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800835e:	429e      	cmp	r6, r3
 8008360:	bf28      	it	cs
 8008362:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008366:	4912      	ldr	r1, [pc, #72]	; (80083b0 <_scanf_float+0x418>)
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f8e7 	bl	800853c <siprintf>
 800836e:	e7cf      	b.n	8008310 <_scanf_float+0x378>
 8008370:	f011 0f04 	tst.w	r1, #4
 8008374:	9903      	ldr	r1, [sp, #12]
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	d1db      	bne.n	8008332 <_scanf_float+0x39a>
 800837a:	f8d3 8000 	ldr.w	r8, [r3]
 800837e:	ee10 2a10 	vmov	r2, s0
 8008382:	ee10 0a10 	vmov	r0, s0
 8008386:	463b      	mov	r3, r7
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 fbd7 	bl	8000b3c <__aeabi_dcmpun>
 800838e:	b128      	cbz	r0, 800839c <_scanf_float+0x404>
 8008390:	4808      	ldr	r0, [pc, #32]	; (80083b4 <_scanf_float+0x41c>)
 8008392:	f000 fa1b 	bl	80087cc <nanf>
 8008396:	ed88 0a00 	vstr	s0, [r8]
 800839a:	e7cd      	b.n	8008338 <_scanf_float+0x3a0>
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f8 fc2a 	bl	8000bf8 <__aeabi_d2f>
 80083a4:	f8c8 0000 	str.w	r0, [r8]
 80083a8:	e7c6      	b.n	8008338 <_scanf_float+0x3a0>
 80083aa:	2500      	movs	r5, #0
 80083ac:	e635      	b.n	800801a <_scanf_float+0x82>
 80083ae:	bf00      	nop
 80083b0:	0800c054 	.word	0x0800c054
 80083b4:	0800c3e5 	.word	0x0800c3e5

080083b8 <std>:
 80083b8:	2300      	movs	r3, #0
 80083ba:	b510      	push	{r4, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	e9c0 3300 	strd	r3, r3, [r0]
 80083c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083c6:	6083      	str	r3, [r0, #8]
 80083c8:	8181      	strh	r1, [r0, #12]
 80083ca:	6643      	str	r3, [r0, #100]	; 0x64
 80083cc:	81c2      	strh	r2, [r0, #14]
 80083ce:	6183      	str	r3, [r0, #24]
 80083d0:	4619      	mov	r1, r3
 80083d2:	2208      	movs	r2, #8
 80083d4:	305c      	adds	r0, #92	; 0x5c
 80083d6:	f000 f914 	bl	8008602 <memset>
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <std+0x58>)
 80083dc:	6263      	str	r3, [r4, #36]	; 0x24
 80083de:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <std+0x5c>)
 80083e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <std+0x60>)
 80083e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <std+0x64>)
 80083e8:	6323      	str	r3, [r4, #48]	; 0x30
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <std+0x68>)
 80083ec:	6224      	str	r4, [r4, #32]
 80083ee:	429c      	cmp	r4, r3
 80083f0:	d006      	beq.n	8008400 <std+0x48>
 80083f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083f6:	4294      	cmp	r4, r2
 80083f8:	d002      	beq.n	8008400 <std+0x48>
 80083fa:	33d0      	adds	r3, #208	; 0xd0
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d105      	bne.n	800840c <std+0x54>
 8008400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f000 b9ce 	b.w	80087a8 <__retarget_lock_init_recursive>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	0800857d 	.word	0x0800857d
 8008414:	0800859f 	.word	0x0800859f
 8008418:	080085d7 	.word	0x080085d7
 800841c:	080085fb 	.word	0x080085fb
 8008420:	200030a4 	.word	0x200030a4

08008424 <stdio_exit_handler>:
 8008424:	4a02      	ldr	r2, [pc, #8]	; (8008430 <stdio_exit_handler+0xc>)
 8008426:	4903      	ldr	r1, [pc, #12]	; (8008434 <stdio_exit_handler+0x10>)
 8008428:	4803      	ldr	r0, [pc, #12]	; (8008438 <stdio_exit_handler+0x14>)
 800842a:	f000 b869 	b.w	8008500 <_fwalk_sglue>
 800842e:	bf00      	nop
 8008430:	20000010 	.word	0x20000010
 8008434:	0800b111 	.word	0x0800b111
 8008438:	2000001c 	.word	0x2000001c

0800843c <cleanup_stdio>:
 800843c:	6841      	ldr	r1, [r0, #4]
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <cleanup_stdio+0x34>)
 8008440:	4299      	cmp	r1, r3
 8008442:	b510      	push	{r4, lr}
 8008444:	4604      	mov	r4, r0
 8008446:	d001      	beq.n	800844c <cleanup_stdio+0x10>
 8008448:	f002 fe62 	bl	800b110 <_fflush_r>
 800844c:	68a1      	ldr	r1, [r4, #8]
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <cleanup_stdio+0x38>)
 8008450:	4299      	cmp	r1, r3
 8008452:	d002      	beq.n	800845a <cleanup_stdio+0x1e>
 8008454:	4620      	mov	r0, r4
 8008456:	f002 fe5b 	bl	800b110 <_fflush_r>
 800845a:	68e1      	ldr	r1, [r4, #12]
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <cleanup_stdio+0x3c>)
 800845e:	4299      	cmp	r1, r3
 8008460:	d004      	beq.n	800846c <cleanup_stdio+0x30>
 8008462:	4620      	mov	r0, r4
 8008464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008468:	f002 be52 	b.w	800b110 <_fflush_r>
 800846c:	bd10      	pop	{r4, pc}
 800846e:	bf00      	nop
 8008470:	200030a4 	.word	0x200030a4
 8008474:	2000310c 	.word	0x2000310c
 8008478:	20003174 	.word	0x20003174

0800847c <global_stdio_init.part.0>:
 800847c:	b510      	push	{r4, lr}
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <global_stdio_init.part.0+0x30>)
 8008480:	4c0b      	ldr	r4, [pc, #44]	; (80084b0 <global_stdio_init.part.0+0x34>)
 8008482:	4a0c      	ldr	r2, [pc, #48]	; (80084b4 <global_stdio_init.part.0+0x38>)
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	4620      	mov	r0, r4
 8008488:	2200      	movs	r2, #0
 800848a:	2104      	movs	r1, #4
 800848c:	f7ff ff94 	bl	80083b8 <std>
 8008490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008494:	2201      	movs	r2, #1
 8008496:	2109      	movs	r1, #9
 8008498:	f7ff ff8e 	bl	80083b8 <std>
 800849c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084a0:	2202      	movs	r2, #2
 80084a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a6:	2112      	movs	r1, #18
 80084a8:	f7ff bf86 	b.w	80083b8 <std>
 80084ac:	200031dc 	.word	0x200031dc
 80084b0:	200030a4 	.word	0x200030a4
 80084b4:	08008425 	.word	0x08008425

080084b8 <__sfp_lock_acquire>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sfp_lock_acquire+0x8>)
 80084ba:	f000 b976 	b.w	80087aa <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	200031e5 	.word	0x200031e5

080084c4 <__sfp_lock_release>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__sfp_lock_release+0x8>)
 80084c6:	f000 b971 	b.w	80087ac <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	200031e5 	.word	0x200031e5

080084d0 <__sinit>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	f7ff fff0 	bl	80084b8 <__sfp_lock_acquire>
 80084d8:	6a23      	ldr	r3, [r4, #32]
 80084da:	b11b      	cbz	r3, 80084e4 <__sinit+0x14>
 80084dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e0:	f7ff bff0 	b.w	80084c4 <__sfp_lock_release>
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <__sinit+0x28>)
 80084e6:	6223      	str	r3, [r4, #32]
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <__sinit+0x2c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f5      	bne.n	80084dc <__sinit+0xc>
 80084f0:	f7ff ffc4 	bl	800847c <global_stdio_init.part.0>
 80084f4:	e7f2      	b.n	80084dc <__sinit+0xc>
 80084f6:	bf00      	nop
 80084f8:	0800843d 	.word	0x0800843d
 80084fc:	200031dc 	.word	0x200031dc

08008500 <_fwalk_sglue>:
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008504:	4607      	mov	r7, r0
 8008506:	4688      	mov	r8, r1
 8008508:	4614      	mov	r4, r2
 800850a:	2600      	movs	r6, #0
 800850c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008510:	f1b9 0901 	subs.w	r9, r9, #1
 8008514:	d505      	bpl.n	8008522 <_fwalk_sglue+0x22>
 8008516:	6824      	ldr	r4, [r4, #0]
 8008518:	2c00      	cmp	r4, #0
 800851a:	d1f7      	bne.n	800850c <_fwalk_sglue+0xc>
 800851c:	4630      	mov	r0, r6
 800851e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d907      	bls.n	8008538 <_fwalk_sglue+0x38>
 8008528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800852c:	3301      	adds	r3, #1
 800852e:	d003      	beq.n	8008538 <_fwalk_sglue+0x38>
 8008530:	4629      	mov	r1, r5
 8008532:	4638      	mov	r0, r7
 8008534:	47c0      	blx	r8
 8008536:	4306      	orrs	r6, r0
 8008538:	3568      	adds	r5, #104	; 0x68
 800853a:	e7e9      	b.n	8008510 <_fwalk_sglue+0x10>

0800853c <siprintf>:
 800853c:	b40e      	push	{r1, r2, r3}
 800853e:	b500      	push	{lr}
 8008540:	b09c      	sub	sp, #112	; 0x70
 8008542:	ab1d      	add	r3, sp, #116	; 0x74
 8008544:	9002      	str	r0, [sp, #8]
 8008546:	9006      	str	r0, [sp, #24]
 8008548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800854c:	4809      	ldr	r0, [pc, #36]	; (8008574 <siprintf+0x38>)
 800854e:	9107      	str	r1, [sp, #28]
 8008550:	9104      	str	r1, [sp, #16]
 8008552:	4909      	ldr	r1, [pc, #36]	; (8008578 <siprintf+0x3c>)
 8008554:	f853 2b04 	ldr.w	r2, [r3], #4
 8008558:	9105      	str	r1, [sp, #20]
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	a902      	add	r1, sp, #8
 8008560:	f002 fc52 	bl	800ae08 <_svfiprintf_r>
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	b01c      	add	sp, #112	; 0x70
 800856c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008570:	b003      	add	sp, #12
 8008572:	4770      	bx	lr
 8008574:	20000068 	.word	0x20000068
 8008578:	ffff0208 	.word	0xffff0208

0800857c <__sread>:
 800857c:	b510      	push	{r4, lr}
 800857e:	460c      	mov	r4, r1
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	f000 f8c2 	bl	800870c <_read_r>
 8008588:	2800      	cmp	r0, #0
 800858a:	bfab      	itete	ge
 800858c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800858e:	89a3      	ldrhlt	r3, [r4, #12]
 8008590:	181b      	addge	r3, r3, r0
 8008592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008596:	bfac      	ite	ge
 8008598:	6563      	strge	r3, [r4, #84]	; 0x54
 800859a:	81a3      	strhlt	r3, [r4, #12]
 800859c:	bd10      	pop	{r4, pc}

0800859e <__swrite>:
 800859e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a2:	461f      	mov	r7, r3
 80085a4:	898b      	ldrh	r3, [r1, #12]
 80085a6:	05db      	lsls	r3, r3, #23
 80085a8:	4605      	mov	r5, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	4616      	mov	r6, r2
 80085ae:	d505      	bpl.n	80085bc <__swrite+0x1e>
 80085b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b4:	2302      	movs	r3, #2
 80085b6:	2200      	movs	r2, #0
 80085b8:	f000 f896 	bl	80086e8 <_lseek_r>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	4632      	mov	r2, r6
 80085ca:	463b      	mov	r3, r7
 80085cc:	4628      	mov	r0, r5
 80085ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d2:	f000 b8ad 	b.w	8008730 <_write_r>

080085d6 <__sseek>:
 80085d6:	b510      	push	{r4, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085de:	f000 f883 	bl	80086e8 <_lseek_r>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	bf15      	itete	ne
 80085e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085f2:	81a3      	strheq	r3, [r4, #12]
 80085f4:	bf18      	it	ne
 80085f6:	81a3      	strhne	r3, [r4, #12]
 80085f8:	bd10      	pop	{r4, pc}

080085fa <__sclose>:
 80085fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fe:	f000 b80d 	b.w	800861c <_close_r>

08008602 <memset>:
 8008602:	4402      	add	r2, r0
 8008604:	4603      	mov	r3, r0
 8008606:	4293      	cmp	r3, r2
 8008608:	d100      	bne.n	800860c <memset+0xa>
 800860a:	4770      	bx	lr
 800860c:	f803 1b01 	strb.w	r1, [r3], #1
 8008610:	e7f9      	b.n	8008606 <memset+0x4>
	...

08008614 <_localeconv_r>:
 8008614:	4800      	ldr	r0, [pc, #0]	; (8008618 <_localeconv_r+0x4>)
 8008616:	4770      	bx	lr
 8008618:	2000015c 	.word	0x2000015c

0800861c <_close_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4d06      	ldr	r5, [pc, #24]	; (8008638 <_close_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	f7f9 fc88 	bl	8001f3c <_close>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_close_r+0x1a>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_close_r+0x1a>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200031e0 	.word	0x200031e0

0800863c <_reclaim_reent>:
 800863c:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <_reclaim_reent+0xa8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4283      	cmp	r3, r0
 8008642:	b570      	push	{r4, r5, r6, lr}
 8008644:	4604      	mov	r4, r0
 8008646:	d04b      	beq.n	80086e0 <_reclaim_reent+0xa4>
 8008648:	69c3      	ldr	r3, [r0, #28]
 800864a:	b143      	cbz	r3, 800865e <_reclaim_reent+0x22>
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d144      	bne.n	80086dc <_reclaim_reent+0xa0>
 8008652:	69e3      	ldr	r3, [r4, #28]
 8008654:	6819      	ldr	r1, [r3, #0]
 8008656:	b111      	cbz	r1, 800865e <_reclaim_reent+0x22>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 ff37 	bl	80094cc <_free_r>
 800865e:	6961      	ldr	r1, [r4, #20]
 8008660:	b111      	cbz	r1, 8008668 <_reclaim_reent+0x2c>
 8008662:	4620      	mov	r0, r4
 8008664:	f000 ff32 	bl	80094cc <_free_r>
 8008668:	69e1      	ldr	r1, [r4, #28]
 800866a:	b111      	cbz	r1, 8008672 <_reclaim_reent+0x36>
 800866c:	4620      	mov	r0, r4
 800866e:	f000 ff2d 	bl	80094cc <_free_r>
 8008672:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008674:	b111      	cbz	r1, 800867c <_reclaim_reent+0x40>
 8008676:	4620      	mov	r0, r4
 8008678:	f000 ff28 	bl	80094cc <_free_r>
 800867c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800867e:	b111      	cbz	r1, 8008686 <_reclaim_reent+0x4a>
 8008680:	4620      	mov	r0, r4
 8008682:	f000 ff23 	bl	80094cc <_free_r>
 8008686:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008688:	b111      	cbz	r1, 8008690 <_reclaim_reent+0x54>
 800868a:	4620      	mov	r0, r4
 800868c:	f000 ff1e 	bl	80094cc <_free_r>
 8008690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008692:	b111      	cbz	r1, 800869a <_reclaim_reent+0x5e>
 8008694:	4620      	mov	r0, r4
 8008696:	f000 ff19 	bl	80094cc <_free_r>
 800869a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800869c:	b111      	cbz	r1, 80086a4 <_reclaim_reent+0x68>
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 ff14 	bl	80094cc <_free_r>
 80086a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80086a6:	b111      	cbz	r1, 80086ae <_reclaim_reent+0x72>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 ff0f 	bl	80094cc <_free_r>
 80086ae:	6a23      	ldr	r3, [r4, #32]
 80086b0:	b1b3      	cbz	r3, 80086e0 <_reclaim_reent+0xa4>
 80086b2:	4620      	mov	r0, r4
 80086b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086b8:	4718      	bx	r3
 80086ba:	5949      	ldr	r1, [r1, r5]
 80086bc:	b941      	cbnz	r1, 80086d0 <_reclaim_reent+0x94>
 80086be:	3504      	adds	r5, #4
 80086c0:	69e3      	ldr	r3, [r4, #28]
 80086c2:	2d80      	cmp	r5, #128	; 0x80
 80086c4:	68d9      	ldr	r1, [r3, #12]
 80086c6:	d1f8      	bne.n	80086ba <_reclaim_reent+0x7e>
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 feff 	bl	80094cc <_free_r>
 80086ce:	e7c0      	b.n	8008652 <_reclaim_reent+0x16>
 80086d0:	680e      	ldr	r6, [r1, #0]
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fefa 	bl	80094cc <_free_r>
 80086d8:	4631      	mov	r1, r6
 80086da:	e7ef      	b.n	80086bc <_reclaim_reent+0x80>
 80086dc:	2500      	movs	r5, #0
 80086de:	e7ef      	b.n	80086c0 <_reclaim_reent+0x84>
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	bf00      	nop
 80086e4:	20000068 	.word	0x20000068

080086e8 <_lseek_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d07      	ldr	r5, [pc, #28]	; (8008708 <_lseek_r+0x20>)
 80086ec:	4604      	mov	r4, r0
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	2200      	movs	r2, #0
 80086f4:	602a      	str	r2, [r5, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f7f9 fc47 	bl	8001f8a <_lseek>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_lseek_r+0x1e>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_lseek_r+0x1e>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	200031e0 	.word	0x200031e0

0800870c <_read_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_read_r+0x20>)
 8008710:	4604      	mov	r4, r0
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7f9 fbd5 	bl	8001eca <_read>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_read_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_read_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200031e0 	.word	0x200031e0

08008730 <_write_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	; (8008750 <_write_r+0x20>)
 8008734:	4604      	mov	r4, r0
 8008736:	4608      	mov	r0, r1
 8008738:	4611      	mov	r1, r2
 800873a:	2200      	movs	r2, #0
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f7f9 fbe0 	bl	8001f04 <_write>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_write_r+0x1e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_write_r+0x1e>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	200031e0 	.word	0x200031e0

08008754 <__errno>:
 8008754:	4b01      	ldr	r3, [pc, #4]	; (800875c <__errno+0x8>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	20000068 	.word	0x20000068

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4d0d      	ldr	r5, [pc, #52]	; (8008798 <__libc_init_array+0x38>)
 8008764:	4c0d      	ldr	r4, [pc, #52]	; (800879c <__libc_init_array+0x3c>)
 8008766:	1b64      	subs	r4, r4, r5
 8008768:	10a4      	asrs	r4, r4, #2
 800876a:	2600      	movs	r6, #0
 800876c:	42a6      	cmp	r6, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	4d0b      	ldr	r5, [pc, #44]	; (80087a0 <__libc_init_array+0x40>)
 8008772:	4c0c      	ldr	r4, [pc, #48]	; (80087a4 <__libc_init_array+0x44>)
 8008774:	f003 fbd4 	bl	800bf20 <_init>
 8008778:	1b64      	subs	r4, r4, r5
 800877a:	10a4      	asrs	r4, r4, #2
 800877c:	2600      	movs	r6, #0
 800877e:	42a6      	cmp	r6, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f855 3b04 	ldr.w	r3, [r5], #4
 8008788:	4798      	blx	r3
 800878a:	3601      	adds	r6, #1
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008792:	4798      	blx	r3
 8008794:	3601      	adds	r6, #1
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	0800c448 	.word	0x0800c448
 800879c:	0800c448 	.word	0x0800c448
 80087a0:	0800c448 	.word	0x0800c448
 80087a4:	0800c44c 	.word	0x0800c44c

080087a8 <__retarget_lock_init_recursive>:
 80087a8:	4770      	bx	lr

080087aa <__retarget_lock_acquire_recursive>:
 80087aa:	4770      	bx	lr

080087ac <__retarget_lock_release_recursive>:
 80087ac:	4770      	bx	lr

080087ae <memcpy>:
 80087ae:	440a      	add	r2, r1
 80087b0:	4291      	cmp	r1, r2
 80087b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b6:	d100      	bne.n	80087ba <memcpy+0xc>
 80087b8:	4770      	bx	lr
 80087ba:	b510      	push	{r4, lr}
 80087bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c4:	4291      	cmp	r1, r2
 80087c6:	d1f9      	bne.n	80087bc <memcpy+0xe>
 80087c8:	bd10      	pop	{r4, pc}
	...

080087cc <nanf>:
 80087cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087d4 <nanf+0x8>
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	7fc00000 	.word	0x7fc00000

080087d8 <quorem>:
 80087d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	6903      	ldr	r3, [r0, #16]
 80087de:	690c      	ldr	r4, [r1, #16]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	4607      	mov	r7, r0
 80087e4:	db7e      	blt.n	80088e4 <quorem+0x10c>
 80087e6:	3c01      	subs	r4, #1
 80087e8:	f101 0814 	add.w	r8, r1, #20
 80087ec:	f100 0514 	add.w	r5, r0, #20
 80087f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fe:	3301      	adds	r3, #1
 8008800:	429a      	cmp	r2, r3
 8008802:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008806:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800880a:	fbb2 f6f3 	udiv	r6, r2, r3
 800880e:	d331      	bcc.n	8008874 <quorem+0x9c>
 8008810:	f04f 0e00 	mov.w	lr, #0
 8008814:	4640      	mov	r0, r8
 8008816:	46ac      	mov	ip, r5
 8008818:	46f2      	mov	sl, lr
 800881a:	f850 2b04 	ldr.w	r2, [r0], #4
 800881e:	b293      	uxth	r3, r2
 8008820:	fb06 e303 	mla	r3, r6, r3, lr
 8008824:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008828:	0c1a      	lsrs	r2, r3, #16
 800882a:	b29b      	uxth	r3, r3
 800882c:	ebaa 0303 	sub.w	r3, sl, r3
 8008830:	f8dc a000 	ldr.w	sl, [ip]
 8008834:	fa13 f38a 	uxtah	r3, r3, sl
 8008838:	fb06 220e 	mla	r2, r6, lr, r2
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	9b00      	ldr	r3, [sp, #0]
 8008840:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008844:	b292      	uxth	r2, r2
 8008846:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800884a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800884e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008852:	4581      	cmp	r9, r0
 8008854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008858:	f84c 3b04 	str.w	r3, [ip], #4
 800885c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008860:	d2db      	bcs.n	800881a <quorem+0x42>
 8008862:	f855 300b 	ldr.w	r3, [r5, fp]
 8008866:	b92b      	cbnz	r3, 8008874 <quorem+0x9c>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	3b04      	subs	r3, #4
 800886c:	429d      	cmp	r5, r3
 800886e:	461a      	mov	r2, r3
 8008870:	d32c      	bcc.n	80088cc <quorem+0xf4>
 8008872:	613c      	str	r4, [r7, #16]
 8008874:	4638      	mov	r0, r7
 8008876:	f001 f9ef 	bl	8009c58 <__mcmp>
 800887a:	2800      	cmp	r0, #0
 800887c:	db22      	blt.n	80088c4 <quorem+0xec>
 800887e:	3601      	adds	r6, #1
 8008880:	4629      	mov	r1, r5
 8008882:	2000      	movs	r0, #0
 8008884:	f858 2b04 	ldr.w	r2, [r8], #4
 8008888:	f8d1 c000 	ldr.w	ip, [r1]
 800888c:	b293      	uxth	r3, r2
 800888e:	1ac3      	subs	r3, r0, r3
 8008890:	0c12      	lsrs	r2, r2, #16
 8008892:	fa13 f38c 	uxtah	r3, r3, ip
 8008896:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800889a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800889e:	b29b      	uxth	r3, r3
 80088a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a4:	45c1      	cmp	r9, r8
 80088a6:	f841 3b04 	str.w	r3, [r1], #4
 80088aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088ae:	d2e9      	bcs.n	8008884 <quorem+0xac>
 80088b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b8:	b922      	cbnz	r2, 80088c4 <quorem+0xec>
 80088ba:	3b04      	subs	r3, #4
 80088bc:	429d      	cmp	r5, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	d30a      	bcc.n	80088d8 <quorem+0x100>
 80088c2:	613c      	str	r4, [r7, #16]
 80088c4:	4630      	mov	r0, r6
 80088c6:	b003      	add	sp, #12
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	6812      	ldr	r2, [r2, #0]
 80088ce:	3b04      	subs	r3, #4
 80088d0:	2a00      	cmp	r2, #0
 80088d2:	d1ce      	bne.n	8008872 <quorem+0x9a>
 80088d4:	3c01      	subs	r4, #1
 80088d6:	e7c9      	b.n	800886c <quorem+0x94>
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	3b04      	subs	r3, #4
 80088dc:	2a00      	cmp	r2, #0
 80088de:	d1f0      	bne.n	80088c2 <quorem+0xea>
 80088e0:	3c01      	subs	r4, #1
 80088e2:	e7eb      	b.n	80088bc <quorem+0xe4>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e7ee      	b.n	80088c6 <quorem+0xee>

080088e8 <_dtoa_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	ed2d 8b04 	vpush	{d8-d9}
 80088f0:	69c5      	ldr	r5, [r0, #28]
 80088f2:	b093      	sub	sp, #76	; 0x4c
 80088f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088f8:	ec57 6b10 	vmov	r6, r7, d0
 80088fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008900:	9107      	str	r1, [sp, #28]
 8008902:	4604      	mov	r4, r0
 8008904:	920a      	str	r2, [sp, #40]	; 0x28
 8008906:	930d      	str	r3, [sp, #52]	; 0x34
 8008908:	b975      	cbnz	r5, 8008928 <_dtoa_r+0x40>
 800890a:	2010      	movs	r0, #16
 800890c:	f000 fe2a 	bl	8009564 <malloc>
 8008910:	4602      	mov	r2, r0
 8008912:	61e0      	str	r0, [r4, #28]
 8008914:	b920      	cbnz	r0, 8008920 <_dtoa_r+0x38>
 8008916:	4bae      	ldr	r3, [pc, #696]	; (8008bd0 <_dtoa_r+0x2e8>)
 8008918:	21ef      	movs	r1, #239	; 0xef
 800891a:	48ae      	ldr	r0, [pc, #696]	; (8008bd4 <_dtoa_r+0x2ec>)
 800891c:	f002 fc64 	bl	800b1e8 <__assert_func>
 8008920:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008924:	6005      	str	r5, [r0, #0]
 8008926:	60c5      	str	r5, [r0, #12]
 8008928:	69e3      	ldr	r3, [r4, #28]
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	b151      	cbz	r1, 8008944 <_dtoa_r+0x5c>
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	604a      	str	r2, [r1, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	4093      	lsls	r3, r2
 8008936:	608b      	str	r3, [r1, #8]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 ff07 	bl	800974c <_Bfree>
 800893e:	69e3      	ldr	r3, [r4, #28]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	1e3b      	subs	r3, r7, #0
 8008946:	bfbb      	ittet	lt
 8008948:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800894c:	9303      	strlt	r3, [sp, #12]
 800894e:	2300      	movge	r3, #0
 8008950:	2201      	movlt	r2, #1
 8008952:	bfac      	ite	ge
 8008954:	f8c8 3000 	strge.w	r3, [r8]
 8008958:	f8c8 2000 	strlt.w	r2, [r8]
 800895c:	4b9e      	ldr	r3, [pc, #632]	; (8008bd8 <_dtoa_r+0x2f0>)
 800895e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008962:	ea33 0308 	bics.w	r3, r3, r8
 8008966:	d11b      	bne.n	80089a0 <_dtoa_r+0xb8>
 8008968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800896a:	f242 730f 	movw	r3, #9999	; 0x270f
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008974:	4333      	orrs	r3, r6
 8008976:	f000 8593 	beq.w	80094a0 <_dtoa_r+0xbb8>
 800897a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800897c:	b963      	cbnz	r3, 8008998 <_dtoa_r+0xb0>
 800897e:	4b97      	ldr	r3, [pc, #604]	; (8008bdc <_dtoa_r+0x2f4>)
 8008980:	e027      	b.n	80089d2 <_dtoa_r+0xea>
 8008982:	4b97      	ldr	r3, [pc, #604]	; (8008be0 <_dtoa_r+0x2f8>)
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	9800      	ldr	r0, [sp, #0]
 800898e:	b013      	add	sp, #76	; 0x4c
 8008990:	ecbd 8b04 	vpop	{d8-d9}
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	4b90      	ldr	r3, [pc, #576]	; (8008bdc <_dtoa_r+0x2f4>)
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	3303      	adds	r3, #3
 800899e:	e7f3      	b.n	8008988 <_dtoa_r+0xa0>
 80089a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	ec51 0b17 	vmov	r0, r1, d7
 80089aa:	eeb0 8a47 	vmov.f32	s16, s14
 80089ae:	eef0 8a67 	vmov.f32	s17, s15
 80089b2:	2300      	movs	r3, #0
 80089b4:	f7f8 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b8:	4681      	mov	r9, r0
 80089ba:	b160      	cbz	r0, 80089d6 <_dtoa_r+0xee>
 80089bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089be:	2301      	movs	r3, #1
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8568 	beq.w	800949a <_dtoa_r+0xbb2>
 80089ca:	4b86      	ldr	r3, [pc, #536]	; (8008be4 <_dtoa_r+0x2fc>)
 80089cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	e7da      	b.n	800898c <_dtoa_r+0xa4>
 80089d6:	aa10      	add	r2, sp, #64	; 0x40
 80089d8:	a911      	add	r1, sp, #68	; 0x44
 80089da:	4620      	mov	r0, r4
 80089dc:	eeb0 0a48 	vmov.f32	s0, s16
 80089e0:	eef0 0a68 	vmov.f32	s1, s17
 80089e4:	f001 fa4e 	bl	8009e84 <__d2b>
 80089e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089ec:	4682      	mov	sl, r0
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	d07f      	beq.n	8008af2 <_dtoa_r+0x20a>
 80089f2:	ee18 3a90 	vmov	r3, s17
 80089f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089fe:	ec51 0b18 	vmov	r0, r1, d8
 8008a02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a0e:	4619      	mov	r1, r3
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b75      	ldr	r3, [pc, #468]	; (8008be8 <_dtoa_r+0x300>)
 8008a14:	f7f7 fc40 	bl	8000298 <__aeabi_dsub>
 8008a18:	a367      	add	r3, pc, #412	; (adr r3, 8008bb8 <_dtoa_r+0x2d0>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	a367      	add	r3, pc, #412	; (adr r3, 8008bc0 <_dtoa_r+0x2d8>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fc38 	bl	800029c <__adddf3>
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	460f      	mov	r7, r1
 8008a32:	f7f7 fd7f 	bl	8000534 <__aeabi_i2d>
 8008a36:	a364      	add	r3, pc, #400	; (adr r3, 8008bc8 <_dtoa_r+0x2e0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 fc28 	bl	800029c <__adddf3>
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	f7f8 f88a 	bl	8000b68 <__aeabi_d2iz>
 8008a54:	2200      	movs	r2, #0
 8008a56:	4683      	mov	fp, r0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f8 f845 	bl	8000aec <__aeabi_dcmplt>
 8008a62:	b148      	cbz	r0, 8008a78 <_dtoa_r+0x190>
 8008a64:	4658      	mov	r0, fp
 8008a66:	f7f7 fd65 	bl	8000534 <__aeabi_i2d>
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	f7f8 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a72:	b908      	cbnz	r0, 8008a78 <_dtoa_r+0x190>
 8008a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a78:	f1bb 0f16 	cmp.w	fp, #22
 8008a7c:	d857      	bhi.n	8008b2e <_dtoa_r+0x246>
 8008a7e:	4b5b      	ldr	r3, [pc, #364]	; (8008bec <_dtoa_r+0x304>)
 8008a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	ec51 0b18 	vmov	r0, r1, d8
 8008a8c:	f7f8 f82e 	bl	8000aec <__aeabi_dcmplt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d04e      	beq.n	8008b32 <_dtoa_r+0x24a>
 8008a94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a98:	2300      	movs	r3, #0
 8008a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a9e:	1b5b      	subs	r3, r3, r5
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	bf45      	ittet	mi
 8008aa4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008aa8:	9305      	strmi	r3, [sp, #20]
 8008aaa:	2300      	movpl	r3, #0
 8008aac:	2300      	movmi	r3, #0
 8008aae:	9206      	str	r2, [sp, #24]
 8008ab0:	bf54      	ite	pl
 8008ab2:	9305      	strpl	r3, [sp, #20]
 8008ab4:	9306      	strmi	r3, [sp, #24]
 8008ab6:	f1bb 0f00 	cmp.w	fp, #0
 8008aba:	db3c      	blt.n	8008b36 <_dtoa_r+0x24e>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ac2:	445b      	add	r3, fp
 8008ac4:	9306      	str	r3, [sp, #24]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	d868      	bhi.n	8008ba2 <_dtoa_r+0x2ba>
 8008ad0:	2b05      	cmp	r3, #5
 8008ad2:	bfc4      	itt	gt
 8008ad4:	3b04      	subgt	r3, #4
 8008ad6:	9307      	strgt	r3, [sp, #28]
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	f1a3 0302 	sub.w	r3, r3, #2
 8008ade:	bfcc      	ite	gt
 8008ae0:	2500      	movgt	r5, #0
 8008ae2:	2501      	movle	r5, #1
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	f200 8085 	bhi.w	8008bf4 <_dtoa_r+0x30c>
 8008aea:	e8df f003 	tbb	[pc, r3]
 8008aee:	3b2e      	.short	0x3b2e
 8008af0:	5839      	.short	0x5839
 8008af2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008af6:	441d      	add	r5, r3
 8008af8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	bfc1      	itttt	gt
 8008b00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b04:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b10:	bfd6      	itet	le
 8008b12:	f1c3 0320 	rsble	r3, r3, #32
 8008b16:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b1a:	fa06 f003 	lslle.w	r0, r6, r3
 8008b1e:	f7f7 fcf9 	bl	8000514 <__aeabi_ui2d>
 8008b22:	2201      	movs	r2, #1
 8008b24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b28:	3d01      	subs	r5, #1
 8008b2a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b2c:	e76f      	b.n	8008a0e <_dtoa_r+0x126>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e7b3      	b.n	8008a9a <_dtoa_r+0x1b2>
 8008b32:	900c      	str	r0, [sp, #48]	; 0x30
 8008b34:	e7b2      	b.n	8008a9c <_dtoa_r+0x1b4>
 8008b36:	9b05      	ldr	r3, [sp, #20]
 8008b38:	eba3 030b 	sub.w	r3, r3, fp
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	f1cb 0300 	rsb	r3, fp, #0
 8008b42:	9308      	str	r3, [sp, #32]
 8008b44:	2300      	movs	r3, #0
 8008b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b48:	e7bf      	b.n	8008aca <_dtoa_r+0x1e2>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc52      	bgt.n	8008bfa <_dtoa_r+0x312>
 8008b54:	2301      	movs	r3, #1
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b5e:	e00b      	b.n	8008b78 <_dtoa_r+0x290>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e7f3      	b.n	8008b4c <_dtoa_r+0x264>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	445b      	add	r3, fp
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	bfb8      	it	lt
 8008b76:	2301      	movlt	r3, #1
 8008b78:	69e0      	ldr	r0, [r4, #28]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	f102 0614 	add.w	r6, r2, #20
 8008b82:	429e      	cmp	r6, r3
 8008b84:	d93d      	bls.n	8008c02 <_dtoa_r+0x31a>
 8008b86:	6041      	str	r1, [r0, #4]
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fd9f 	bl	80096cc <_Balloc>
 8008b8e:	9000      	str	r0, [sp, #0]
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d139      	bne.n	8008c08 <_dtoa_r+0x320>
 8008b94:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <_dtoa_r+0x308>)
 8008b96:	4602      	mov	r2, r0
 8008b98:	f240 11af 	movw	r1, #431	; 0x1af
 8008b9c:	e6bd      	b.n	800891a <_dtoa_r+0x32>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7e1      	b.n	8008b66 <_dtoa_r+0x27e>
 8008ba2:	2501      	movs	r5, #1
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9307      	str	r3, [sp, #28]
 8008ba8:	9509      	str	r5, [sp, #36]	; 0x24
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2312      	movs	r3, #18
 8008bb6:	e7d1      	b.n	8008b5c <_dtoa_r+0x274>
 8008bb8:	636f4361 	.word	0x636f4361
 8008bbc:	3fd287a7 	.word	0x3fd287a7
 8008bc0:	8b60c8b3 	.word	0x8b60c8b3
 8008bc4:	3fc68a28 	.word	0x3fc68a28
 8008bc8:	509f79fb 	.word	0x509f79fb
 8008bcc:	3fd34413 	.word	0x3fd34413
 8008bd0:	0800c066 	.word	0x0800c066
 8008bd4:	0800c07d 	.word	0x0800c07d
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	0800c062 	.word	0x0800c062
 8008be0:	0800c059 	.word	0x0800c059
 8008be4:	0800c031 	.word	0x0800c031
 8008be8:	3ff80000 	.word	0x3ff80000
 8008bec:	0800c168 	.word	0x0800c168
 8008bf0:	0800c0d5 	.word	0x0800c0d5
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e7d7      	b.n	8008baa <_dtoa_r+0x2c2>
 8008bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	9304      	str	r3, [sp, #16]
 8008c00:	e7ba      	b.n	8008b78 <_dtoa_r+0x290>
 8008c02:	3101      	adds	r1, #1
 8008c04:	0052      	lsls	r2, r2, #1
 8008c06:	e7ba      	b.n	8008b7e <_dtoa_r+0x296>
 8008c08:	69e3      	ldr	r3, [r4, #28]
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	2b0e      	cmp	r3, #14
 8008c12:	f200 80a8 	bhi.w	8008d66 <_dtoa_r+0x47e>
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	f000 80a5 	beq.w	8008d66 <_dtoa_r+0x47e>
 8008c1c:	f1bb 0f00 	cmp.w	fp, #0
 8008c20:	dd38      	ble.n	8008c94 <_dtoa_r+0x3ac>
 8008c22:	4bc0      	ldr	r3, [pc, #768]	; (8008f24 <_dtoa_r+0x63c>)
 8008c24:	f00b 020f 	and.w	r2, fp, #15
 8008c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c38:	d019      	beq.n	8008c6e <_dtoa_r+0x386>
 8008c3a:	4bbb      	ldr	r3, [pc, #748]	; (8008f28 <_dtoa_r+0x640>)
 8008c3c:	ec51 0b18 	vmov	r0, r1, d8
 8008c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c44:	f7f7 fe0a 	bl	800085c <__aeabi_ddiv>
 8008c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4c:	f008 080f 	and.w	r8, r8, #15
 8008c50:	2503      	movs	r5, #3
 8008c52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f28 <_dtoa_r+0x640>
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	d10a      	bne.n	8008c72 <_dtoa_r+0x38a>
 8008c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	f7f7 fdfa 	bl	800085c <__aeabi_ddiv>
 8008c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c6c:	e02b      	b.n	8008cc6 <_dtoa_r+0x3de>
 8008c6e:	2502      	movs	r5, #2
 8008c70:	e7ef      	b.n	8008c52 <_dtoa_r+0x36a>
 8008c72:	f018 0f01 	tst.w	r8, #1
 8008c76:	d008      	beq.n	8008c8a <_dtoa_r+0x3a2>
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c80:	f7f7 fcc2 	bl	8000608 <__aeabi_dmul>
 8008c84:	3501      	adds	r5, #1
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c8e:	f109 0908 	add.w	r9, r9, #8
 8008c92:	e7e0      	b.n	8008c56 <_dtoa_r+0x36e>
 8008c94:	f000 809f 	beq.w	8008dd6 <_dtoa_r+0x4ee>
 8008c98:	f1cb 0600 	rsb	r6, fp, #0
 8008c9c:	4ba1      	ldr	r3, [pc, #644]	; (8008f24 <_dtoa_r+0x63c>)
 8008c9e:	4fa2      	ldr	r7, [pc, #648]	; (8008f28 <_dtoa_r+0x640>)
 8008ca0:	f006 020f 	and.w	r2, r6, #15
 8008ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	ec51 0b18 	vmov	r0, r1, d8
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb8:	1136      	asrs	r6, r6, #4
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2502      	movs	r5, #2
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	d17e      	bne.n	8008dc0 <_dtoa_r+0x4d8>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d0      	bne.n	8008c68 <_dtoa_r+0x380>
 8008cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8084 	beq.w	8008dda <_dtoa_r+0x4f2>
 8008cd2:	4b96      	ldr	r3, [pc, #600]	; (8008f2c <_dtoa_r+0x644>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 ff07 	bl	8000aec <__aeabi_dcmplt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d07b      	beq.n	8008dda <_dtoa_r+0x4f2>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d078      	beq.n	8008dda <_dtoa_r+0x4f2>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd39      	ble.n	8008d62 <_dtoa_r+0x47a>
 8008cee:	4b90      	ldr	r3, [pc, #576]	; (8008f30 <_dtoa_r+0x648>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fc87 	bl	8000608 <__aeabi_dmul>
 8008cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cfe:	9e01      	ldr	r6, [sp, #4]
 8008d00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d04:	3501      	adds	r5, #1
 8008d06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7f7 fc12 	bl	8000534 <__aeabi_i2d>
 8008d10:	4642      	mov	r2, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	f7f7 fc78 	bl	8000608 <__aeabi_dmul>
 8008d18:	4b86      	ldr	r3, [pc, #536]	; (8008f34 <_dtoa_r+0x64c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7f7 fabe 	bl	800029c <__adddf3>
 8008d20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d28:	9303      	str	r3, [sp, #12]
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d158      	bne.n	8008de0 <_dtoa_r+0x4f8>
 8008d2e:	4b82      	ldr	r3, [pc, #520]	; (8008f38 <_dtoa_r+0x650>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4689      	mov	r9, r1
 8008d42:	f7f7 fef1 	bl	8000b28 <__aeabi_dcmpgt>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f040 8296 	bne.w	8009278 <_dtoa_r+0x990>
 8008d4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d50:	4640      	mov	r0, r8
 8008d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d56:	4649      	mov	r1, r9
 8008d58:	f7f7 fec8 	bl	8000aec <__aeabi_dcmplt>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f040 8289 	bne.w	8009274 <_dtoa_r+0x98c>
 8008d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f2c0 814e 	blt.w	800900a <_dtoa_r+0x722>
 8008d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d72:	f300 814a 	bgt.w	800900a <_dtoa_r+0x722>
 8008d76:	4b6b      	ldr	r3, [pc, #428]	; (8008f24 <_dtoa_r+0x63c>)
 8008d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f280 80dc 	bge.w	8008f40 <_dtoa_r+0x658>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f300 80d8 	bgt.w	8008f40 <_dtoa_r+0x658>
 8008d90:	f040 826f 	bne.w	8009272 <_dtoa_r+0x98a>
 8008d94:	4b68      	ldr	r3, [pc, #416]	; (8008f38 <_dtoa_r+0x650>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da4:	f7f7 feb6 	bl	8000b14 <__aeabi_dcmpge>
 8008da8:	9e04      	ldr	r6, [sp, #16]
 8008daa:	4637      	mov	r7, r6
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f040 8245 	bne.w	800923c <_dtoa_r+0x954>
 8008db2:	9d00      	ldr	r5, [sp, #0]
 8008db4:	2331      	movs	r3, #49	; 0x31
 8008db6:	f805 3b01 	strb.w	r3, [r5], #1
 8008dba:	f10b 0b01 	add.w	fp, fp, #1
 8008dbe:	e241      	b.n	8009244 <_dtoa_r+0x95c>
 8008dc0:	07f2      	lsls	r2, r6, #31
 8008dc2:	d505      	bpl.n	8008dd0 <_dtoa_r+0x4e8>
 8008dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	2301      	movs	r3, #1
 8008dd0:	1076      	asrs	r6, r6, #1
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	e773      	b.n	8008cbe <_dtoa_r+0x3d6>
 8008dd6:	2502      	movs	r5, #2
 8008dd8:	e775      	b.n	8008cc6 <_dtoa_r+0x3de>
 8008dda:	9e04      	ldr	r6, [sp, #16]
 8008ddc:	465f      	mov	r7, fp
 8008dde:	e792      	b.n	8008d06 <_dtoa_r+0x41e>
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	4b50      	ldr	r3, [pc, #320]	; (8008f24 <_dtoa_r+0x63c>)
 8008de4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de8:	4431      	add	r1, r6
 8008dea:	9102      	str	r1, [sp, #8]
 8008dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dee:	eeb0 9a47 	vmov.f32	s18, s14
 8008df2:	eef0 9a67 	vmov.f32	s19, s15
 8008df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_dtoa_r+0x5a4>
 8008e02:	494e      	ldr	r1, [pc, #312]	; (8008f3c <_dtoa_r+0x654>)
 8008e04:	2000      	movs	r0, #0
 8008e06:	f7f7 fd29 	bl	800085c <__aeabi_ddiv>
 8008e0a:	ec53 2b19 	vmov	r2, r3, d9
 8008e0e:	f7f7 fa43 	bl	8000298 <__aeabi_dsub>
 8008e12:	9d00      	ldr	r5, [sp, #0]
 8008e14:	ec41 0b19 	vmov	d9, r0, r1
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7f7 fea4 	bl	8000b68 <__aeabi_d2iz>
 8008e20:	4606      	mov	r6, r0
 8008e22:	f7f7 fb87 	bl	8000534 <__aeabi_i2d>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	f7f7 fa33 	bl	8000298 <__aeabi_dsub>
 8008e32:	3630      	adds	r6, #48	; 0x30
 8008e34:	f805 6b01 	strb.w	r6, [r5], #1
 8008e38:	ec53 2b19 	vmov	r2, r3, d9
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	4689      	mov	r9, r1
 8008e40:	f7f7 fe54 	bl	8000aec <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d164      	bne.n	8008f12 <_dtoa_r+0x62a>
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	4937      	ldr	r1, [pc, #220]	; (8008f2c <_dtoa_r+0x644>)
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f7f7 fa22 	bl	8000298 <__aeabi_dsub>
 8008e54:	ec53 2b19 	vmov	r2, r3, d9
 8008e58:	f7f7 fe48 	bl	8000aec <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f040 80b6 	bne.w	8008fce <_dtoa_r+0x6e6>
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	429d      	cmp	r5, r3
 8008e66:	f43f af7c 	beq.w	8008d62 <_dtoa_r+0x47a>
 8008e6a:	4b31      	ldr	r3, [pc, #196]	; (8008f30 <_dtoa_r+0x648>)
 8008e6c:	ec51 0b19 	vmov	r0, r1, d9
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7f7 fbc9 	bl	8000608 <__aeabi_dmul>
 8008e76:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <_dtoa_r+0x648>)
 8008e78:	ec41 0b19 	vmov	d9, r0, r1
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fbc1 	bl	8000608 <__aeabi_dmul>
 8008e86:	4680      	mov	r8, r0
 8008e88:	4689      	mov	r9, r1
 8008e8a:	e7c5      	b.n	8008e18 <_dtoa_r+0x530>
 8008e8c:	ec51 0b17 	vmov	r0, r1, d7
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	9b02      	ldr	r3, [sp, #8]
 8008e96:	9d00      	ldr	r5, [sp, #0]
 8008e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e9a:	ec41 0b19 	vmov	d9, r0, r1
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7f7 fe61 	bl	8000b68 <__aeabi_d2iz>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	f7f7 fb44 	bl	8000534 <__aeabi_i2d>
 8008eac:	3630      	adds	r6, #48	; 0x30
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 f9ef 	bl	8000298 <__aeabi_dsub>
 8008eba:	f805 6b01 	strb.w	r6, [r5], #1
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	f04f 0200 	mov.w	r2, #0
 8008eca:	d124      	bne.n	8008f16 <_dtoa_r+0x62e>
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <_dtoa_r+0x654>)
 8008ece:	ec51 0b19 	vmov	r0, r1, d9
 8008ed2:	f7f7 f9e3 	bl	800029c <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d173      	bne.n	8008fce <_dtoa_r+0x6e6>
 8008ee6:	ec53 2b19 	vmov	r2, r3, d9
 8008eea:	4914      	ldr	r1, [pc, #80]	; (8008f3c <_dtoa_r+0x654>)
 8008eec:	2000      	movs	r0, #0
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 fdf7 	bl	8000aec <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f43f af2f 	beq.w	8008d62 <_dtoa_r+0x47a>
 8008f04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f06:	1e6b      	subs	r3, r5, #1
 8008f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f0e:	2b30      	cmp	r3, #48	; 0x30
 8008f10:	d0f8      	beq.n	8008f04 <_dtoa_r+0x61c>
 8008f12:	46bb      	mov	fp, r7
 8008f14:	e04a      	b.n	8008fac <_dtoa_r+0x6c4>
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <_dtoa_r+0x648>)
 8008f18:	f7f7 fb76 	bl	8000608 <__aeabi_dmul>
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4689      	mov	r9, r1
 8008f20:	e7bd      	b.n	8008e9e <_dtoa_r+0x5b6>
 8008f22:	bf00      	nop
 8008f24:	0800c168 	.word	0x0800c168
 8008f28:	0800c140 	.word	0x0800c140
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	40240000 	.word	0x40240000
 8008f34:	401c0000 	.word	0x401c0000
 8008f38:	40140000 	.word	0x40140000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f44:	9d00      	ldr	r5, [sp, #0]
 8008f46:	4642      	mov	r2, r8
 8008f48:	464b      	mov	r3, r9
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fc85 	bl	800085c <__aeabi_ddiv>
 8008f52:	f7f7 fe09 	bl	8000b68 <__aeabi_d2iz>
 8008f56:	9001      	str	r0, [sp, #4]
 8008f58:	f7f7 faec 	bl	8000534 <__aeabi_i2d>
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	f7f7 fb52 	bl	8000608 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 f994 	bl	8000298 <__aeabi_dsub>
 8008f70:	9e01      	ldr	r6, [sp, #4]
 8008f72:	9f04      	ldr	r7, [sp, #16]
 8008f74:	3630      	adds	r6, #48	; 0x30
 8008f76:	f805 6b01 	strb.w	r6, [r5], #1
 8008f7a:	9e00      	ldr	r6, [sp, #0]
 8008f7c:	1bae      	subs	r6, r5, r6
 8008f7e:	42b7      	cmp	r7, r6
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	d134      	bne.n	8008ff0 <_dtoa_r+0x708>
 8008f86:	f7f7 f989 	bl	800029c <__adddf3>
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	f7f7 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 8008f96:	b9c8      	cbnz	r0, 8008fcc <_dtoa_r+0x6e4>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa4:	b110      	cbz	r0, 8008fac <_dtoa_r+0x6c4>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	07db      	lsls	r3, r3, #31
 8008faa:	d40f      	bmi.n	8008fcc <_dtoa_r+0x6e4>
 8008fac:	4651      	mov	r1, sl
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fbcc 	bl	800974c <_Bfree>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb8:	702b      	strb	r3, [r5, #0]
 8008fba:	f10b 0301 	add.w	r3, fp, #1
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f43f ace2 	beq.w	800898c <_dtoa_r+0xa4>
 8008fc8:	601d      	str	r5, [r3, #0]
 8008fca:	e4df      	b.n	800898c <_dtoa_r+0xa4>
 8008fcc:	465f      	mov	r7, fp
 8008fce:	462b      	mov	r3, r5
 8008fd0:	461d      	mov	r5, r3
 8008fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd6:	2a39      	cmp	r2, #57	; 0x39
 8008fd8:	d106      	bne.n	8008fe8 <_dtoa_r+0x700>
 8008fda:	9a00      	ldr	r2, [sp, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d1f7      	bne.n	8008fd0 <_dtoa_r+0x6e8>
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	2230      	movs	r2, #48	; 0x30
 8008fe4:	3701      	adds	r7, #1
 8008fe6:	700a      	strb	r2, [r1, #0]
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	3201      	adds	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e790      	b.n	8008f12 <_dtoa_r+0x62a>
 8008ff0:	4ba3      	ldr	r3, [pc, #652]	; (8009280 <_dtoa_r+0x998>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f7 fb08 	bl	8000608 <__aeabi_dmul>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	f7f7 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009004:	2800      	cmp	r0, #0
 8009006:	d09e      	beq.n	8008f46 <_dtoa_r+0x65e>
 8009008:	e7d0      	b.n	8008fac <_dtoa_r+0x6c4>
 800900a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800900c:	2a00      	cmp	r2, #0
 800900e:	f000 80ca 	beq.w	80091a6 <_dtoa_r+0x8be>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	2a01      	cmp	r2, #1
 8009016:	f300 80ad 	bgt.w	8009174 <_dtoa_r+0x88c>
 800901a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800901c:	2a00      	cmp	r2, #0
 800901e:	f000 80a5 	beq.w	800916c <_dtoa_r+0x884>
 8009022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009026:	9e08      	ldr	r6, [sp, #32]
 8009028:	9d05      	ldr	r5, [sp, #20]
 800902a:	9a05      	ldr	r2, [sp, #20]
 800902c:	441a      	add	r2, r3
 800902e:	9205      	str	r2, [sp, #20]
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	2101      	movs	r1, #1
 8009034:	441a      	add	r2, r3
 8009036:	4620      	mov	r0, r4
 8009038:	9206      	str	r2, [sp, #24]
 800903a:	f000 fc87 	bl	800994c <__i2b>
 800903e:	4607      	mov	r7, r0
 8009040:	b165      	cbz	r5, 800905c <_dtoa_r+0x774>
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd09      	ble.n	800905c <_dtoa_r+0x774>
 8009048:	42ab      	cmp	r3, r5
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	bfa8      	it	ge
 800904e:	462b      	movge	r3, r5
 8009050:	1ad2      	subs	r2, r2, r3
 8009052:	9205      	str	r2, [sp, #20]
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	1aed      	subs	r5, r5, r3
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	b1f3      	cbz	r3, 800909e <_dtoa_r+0x7b6>
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 80a3 	beq.w	80091ae <_dtoa_r+0x8c6>
 8009068:	2e00      	cmp	r6, #0
 800906a:	dd10      	ble.n	800908e <_dtoa_r+0x7a6>
 800906c:	4639      	mov	r1, r7
 800906e:	4632      	mov	r2, r6
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fd2b 	bl	8009acc <__pow5mult>
 8009076:	4652      	mov	r2, sl
 8009078:	4601      	mov	r1, r0
 800907a:	4607      	mov	r7, r0
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fc7b 	bl	8009978 <__multiply>
 8009082:	4651      	mov	r1, sl
 8009084:	4680      	mov	r8, r0
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fb60 	bl	800974c <_Bfree>
 800908c:	46c2      	mov	sl, r8
 800908e:	9b08      	ldr	r3, [sp, #32]
 8009090:	1b9a      	subs	r2, r3, r6
 8009092:	d004      	beq.n	800909e <_dtoa_r+0x7b6>
 8009094:	4651      	mov	r1, sl
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fd18 	bl	8009acc <__pow5mult>
 800909c:	4682      	mov	sl, r0
 800909e:	2101      	movs	r1, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fc53 	bl	800994c <__i2b>
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	4606      	mov	r6, r0
 80090ac:	f340 8081 	ble.w	80091b2 <_dtoa_r+0x8ca>
 80090b0:	461a      	mov	r2, r3
 80090b2:	4601      	mov	r1, r0
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fd09 	bl	8009acc <__pow5mult>
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	4606      	mov	r6, r0
 80090c0:	dd7a      	ble.n	80091b8 <_dtoa_r+0x8d0>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	6933      	ldr	r3, [r6, #16]
 80090c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090cc:	6918      	ldr	r0, [r3, #16]
 80090ce:	f000 fbef 	bl	80098b0 <__hi0bits>
 80090d2:	f1c0 0020 	rsb	r0, r0, #32
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	4418      	add	r0, r3
 80090da:	f010 001f 	ands.w	r0, r0, #31
 80090de:	f000 8094 	beq.w	800920a <_dtoa_r+0x922>
 80090e2:	f1c0 0320 	rsb	r3, r0, #32
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	f340 8085 	ble.w	80091f6 <_dtoa_r+0x90e>
 80090ec:	9b05      	ldr	r3, [sp, #20]
 80090ee:	f1c0 001c 	rsb	r0, r0, #28
 80090f2:	4403      	add	r3, r0
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	4403      	add	r3, r0
 80090fa:	4405      	add	r5, r0
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	dd05      	ble.n	8009110 <_dtoa_r+0x828>
 8009104:	4651      	mov	r1, sl
 8009106:	461a      	mov	r2, r3
 8009108:	4620      	mov	r0, r4
 800910a:	f000 fd39 	bl	8009b80 <__lshift>
 800910e:	4682      	mov	sl, r0
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x83a>
 8009116:	4631      	mov	r1, r6
 8009118:	461a      	mov	r2, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fd30 	bl	8009b80 <__lshift>
 8009120:	4606      	mov	r6, r0
 8009122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d072      	beq.n	800920e <_dtoa_r+0x926>
 8009128:	4631      	mov	r1, r6
 800912a:	4650      	mov	r0, sl
 800912c:	f000 fd94 	bl	8009c58 <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	da6c      	bge.n	800920e <_dtoa_r+0x926>
 8009134:	2300      	movs	r3, #0
 8009136:	4651      	mov	r1, sl
 8009138:	220a      	movs	r2, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fb28 	bl	8009790 <__multadd>
 8009140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009146:	4682      	mov	sl, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 81b0 	beq.w	80094ae <_dtoa_r+0xbc6>
 800914e:	2300      	movs	r3, #0
 8009150:	4639      	mov	r1, r7
 8009152:	220a      	movs	r2, #10
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fb1b 	bl	8009790 <__multadd>
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	4607      	mov	r7, r0
 8009160:	f300 8096 	bgt.w	8009290 <_dtoa_r+0x9a8>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	2b02      	cmp	r3, #2
 8009168:	dc59      	bgt.n	800921e <_dtoa_r+0x936>
 800916a:	e091      	b.n	8009290 <_dtoa_r+0x9a8>
 800916c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800916e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009172:	e758      	b.n	8009026 <_dtoa_r+0x73e>
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	1e5e      	subs	r6, r3, #1
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	42b3      	cmp	r3, r6
 800917c:	bfbf      	itttt	lt
 800917e:	9b08      	ldrlt	r3, [sp, #32]
 8009180:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009182:	9608      	strlt	r6, [sp, #32]
 8009184:	1af3      	sublt	r3, r6, r3
 8009186:	bfb4      	ite	lt
 8009188:	18d2      	addlt	r2, r2, r3
 800918a:	1b9e      	subge	r6, r3, r6
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	bfbc      	itt	lt
 8009190:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009192:	2600      	movlt	r6, #0
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfb7      	itett	lt
 8009198:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800919c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091a0:	1a9d      	sublt	r5, r3, r2
 80091a2:	2300      	movlt	r3, #0
 80091a4:	e741      	b.n	800902a <_dtoa_r+0x742>
 80091a6:	9e08      	ldr	r6, [sp, #32]
 80091a8:	9d05      	ldr	r5, [sp, #20]
 80091aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091ac:	e748      	b.n	8009040 <_dtoa_r+0x758>
 80091ae:	9a08      	ldr	r2, [sp, #32]
 80091b0:	e770      	b.n	8009094 <_dtoa_r+0x7ac>
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	dc19      	bgt.n	80091ec <_dtoa_r+0x904>
 80091b8:	9b02      	ldr	r3, [sp, #8]
 80091ba:	b9bb      	cbnz	r3, 80091ec <_dtoa_r+0x904>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c2:	b99b      	cbnz	r3, 80091ec <_dtoa_r+0x904>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091ca:	0d1b      	lsrs	r3, r3, #20
 80091cc:	051b      	lsls	r3, r3, #20
 80091ce:	b183      	cbz	r3, 80091f2 <_dtoa_r+0x90a>
 80091d0:	9b05      	ldr	r3, [sp, #20]
 80091d2:	3301      	adds	r3, #1
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	3301      	adds	r3, #1
 80091da:	9306      	str	r3, [sp, #24]
 80091dc:	f04f 0801 	mov.w	r8, #1
 80091e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f47f af6f 	bne.w	80090c6 <_dtoa_r+0x7de>
 80091e8:	2001      	movs	r0, #1
 80091ea:	e774      	b.n	80090d6 <_dtoa_r+0x7ee>
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	e7f6      	b.n	80091e0 <_dtoa_r+0x8f8>
 80091f2:	4698      	mov	r8, r3
 80091f4:	e7f4      	b.n	80091e0 <_dtoa_r+0x8f8>
 80091f6:	d082      	beq.n	80090fe <_dtoa_r+0x816>
 80091f8:	9a05      	ldr	r2, [sp, #20]
 80091fa:	331c      	adds	r3, #28
 80091fc:	441a      	add	r2, r3
 80091fe:	9205      	str	r2, [sp, #20]
 8009200:	9a06      	ldr	r2, [sp, #24]
 8009202:	441a      	add	r2, r3
 8009204:	441d      	add	r5, r3
 8009206:	9206      	str	r2, [sp, #24]
 8009208:	e779      	b.n	80090fe <_dtoa_r+0x816>
 800920a:	4603      	mov	r3, r0
 800920c:	e7f4      	b.n	80091f8 <_dtoa_r+0x910>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc37      	bgt.n	8009284 <_dtoa_r+0x99c>
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	2b02      	cmp	r3, #2
 8009218:	dd34      	ble.n	8009284 <_dtoa_r+0x99c>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	b963      	cbnz	r3, 800923c <_dtoa_r+0x954>
 8009222:	4631      	mov	r1, r6
 8009224:	2205      	movs	r2, #5
 8009226:	4620      	mov	r0, r4
 8009228:	f000 fab2 	bl	8009790 <__multadd>
 800922c:	4601      	mov	r1, r0
 800922e:	4606      	mov	r6, r0
 8009230:	4650      	mov	r0, sl
 8009232:	f000 fd11 	bl	8009c58 <__mcmp>
 8009236:	2800      	cmp	r0, #0
 8009238:	f73f adbb 	bgt.w	8008db2 <_dtoa_r+0x4ca>
 800923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923e:	9d00      	ldr	r5, [sp, #0]
 8009240:	ea6f 0b03 	mvn.w	fp, r3
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	4631      	mov	r1, r6
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fa7e 	bl	800974c <_Bfree>
 8009250:	2f00      	cmp	r7, #0
 8009252:	f43f aeab 	beq.w	8008fac <_dtoa_r+0x6c4>
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d005      	beq.n	8009268 <_dtoa_r+0x980>
 800925c:	45b8      	cmp	r8, r7
 800925e:	d003      	beq.n	8009268 <_dtoa_r+0x980>
 8009260:	4641      	mov	r1, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fa72 	bl	800974c <_Bfree>
 8009268:	4639      	mov	r1, r7
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fa6e 	bl	800974c <_Bfree>
 8009270:	e69c      	b.n	8008fac <_dtoa_r+0x6c4>
 8009272:	2600      	movs	r6, #0
 8009274:	4637      	mov	r7, r6
 8009276:	e7e1      	b.n	800923c <_dtoa_r+0x954>
 8009278:	46bb      	mov	fp, r7
 800927a:	4637      	mov	r7, r6
 800927c:	e599      	b.n	8008db2 <_dtoa_r+0x4ca>
 800927e:	bf00      	nop
 8009280:	40240000 	.word	0x40240000
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 80c8 	beq.w	800941c <_dtoa_r+0xb34>
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	2d00      	cmp	r5, #0
 8009292:	dd05      	ble.n	80092a0 <_dtoa_r+0x9b8>
 8009294:	4639      	mov	r1, r7
 8009296:	462a      	mov	r2, r5
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fc71 	bl	8009b80 <__lshift>
 800929e:	4607      	mov	r7, r0
 80092a0:	f1b8 0f00 	cmp.w	r8, #0
 80092a4:	d05b      	beq.n	800935e <_dtoa_r+0xa76>
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fa0f 	bl	80096cc <_Balloc>
 80092ae:	4605      	mov	r5, r0
 80092b0:	b928      	cbnz	r0, 80092be <_dtoa_r+0x9d6>
 80092b2:	4b83      	ldr	r3, [pc, #524]	; (80094c0 <_dtoa_r+0xbd8>)
 80092b4:	4602      	mov	r2, r0
 80092b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80092ba:	f7ff bb2e 	b.w	800891a <_dtoa_r+0x32>
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	3202      	adds	r2, #2
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	f107 010c 	add.w	r1, r7, #12
 80092c8:	300c      	adds	r0, #12
 80092ca:	f7ff fa70 	bl	80087ae <memcpy>
 80092ce:	2201      	movs	r2, #1
 80092d0:	4629      	mov	r1, r5
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fc54 	bl	8009b80 <__lshift>
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092e2:	4413      	add	r3, r2
 80092e4:	9308      	str	r3, [sp, #32]
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	46b8      	mov	r8, r7
 80092ee:	9306      	str	r3, [sp, #24]
 80092f0:	4607      	mov	r7, r0
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	4631      	mov	r1, r6
 80092f6:	3b01      	subs	r3, #1
 80092f8:	4650      	mov	r0, sl
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	f7ff fa6c 	bl	80087d8 <quorem>
 8009300:	4641      	mov	r1, r8
 8009302:	9002      	str	r0, [sp, #8]
 8009304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009308:	4650      	mov	r0, sl
 800930a:	f000 fca5 	bl	8009c58 <__mcmp>
 800930e:	463a      	mov	r2, r7
 8009310:	9005      	str	r0, [sp, #20]
 8009312:	4631      	mov	r1, r6
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fcbb 	bl	8009c90 <__mdiff>
 800931a:	68c2      	ldr	r2, [r0, #12]
 800931c:	4605      	mov	r5, r0
 800931e:	bb02      	cbnz	r2, 8009362 <_dtoa_r+0xa7a>
 8009320:	4601      	mov	r1, r0
 8009322:	4650      	mov	r0, sl
 8009324:	f000 fc98 	bl	8009c58 <__mcmp>
 8009328:	4602      	mov	r2, r0
 800932a:	4629      	mov	r1, r5
 800932c:	4620      	mov	r0, r4
 800932e:	9209      	str	r2, [sp, #36]	; 0x24
 8009330:	f000 fa0c 	bl	800974c <_Bfree>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	9d04      	ldr	r5, [sp, #16]
 800933a:	ea43 0102 	orr.w	r1, r3, r2
 800933e:	9b06      	ldr	r3, [sp, #24]
 8009340:	4319      	orrs	r1, r3
 8009342:	d110      	bne.n	8009366 <_dtoa_r+0xa7e>
 8009344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009348:	d029      	beq.n	800939e <_dtoa_r+0xab6>
 800934a:	9b05      	ldr	r3, [sp, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd02      	ble.n	8009356 <_dtoa_r+0xa6e>
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	f883 9000 	strb.w	r9, [r3]
 800935c:	e774      	b.n	8009248 <_dtoa_r+0x960>
 800935e:	4638      	mov	r0, r7
 8009360:	e7ba      	b.n	80092d8 <_dtoa_r+0x9f0>
 8009362:	2201      	movs	r2, #1
 8009364:	e7e1      	b.n	800932a <_dtoa_r+0xa42>
 8009366:	9b05      	ldr	r3, [sp, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	db04      	blt.n	8009376 <_dtoa_r+0xa8e>
 800936c:	9907      	ldr	r1, [sp, #28]
 800936e:	430b      	orrs	r3, r1
 8009370:	9906      	ldr	r1, [sp, #24]
 8009372:	430b      	orrs	r3, r1
 8009374:	d120      	bne.n	80093b8 <_dtoa_r+0xad0>
 8009376:	2a00      	cmp	r2, #0
 8009378:	dded      	ble.n	8009356 <_dtoa_r+0xa6e>
 800937a:	4651      	mov	r1, sl
 800937c:	2201      	movs	r2, #1
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fbfe 	bl	8009b80 <__lshift>
 8009384:	4631      	mov	r1, r6
 8009386:	4682      	mov	sl, r0
 8009388:	f000 fc66 	bl	8009c58 <__mcmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	dc03      	bgt.n	8009398 <_dtoa_r+0xab0>
 8009390:	d1e1      	bne.n	8009356 <_dtoa_r+0xa6e>
 8009392:	f019 0f01 	tst.w	r9, #1
 8009396:	d0de      	beq.n	8009356 <_dtoa_r+0xa6e>
 8009398:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800939c:	d1d8      	bne.n	8009350 <_dtoa_r+0xa68>
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	2339      	movs	r3, #57	; 0x39
 80093a2:	7013      	strb	r3, [r2, #0]
 80093a4:	462b      	mov	r3, r5
 80093a6:	461d      	mov	r5, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093ae:	2a39      	cmp	r2, #57	; 0x39
 80093b0:	d06c      	beq.n	800948c <_dtoa_r+0xba4>
 80093b2:	3201      	adds	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e747      	b.n	8009248 <_dtoa_r+0x960>
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	dd07      	ble.n	80093cc <_dtoa_r+0xae4>
 80093bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093c0:	d0ed      	beq.n	800939e <_dtoa_r+0xab6>
 80093c2:	9a01      	ldr	r2, [sp, #4]
 80093c4:	f109 0301 	add.w	r3, r9, #1
 80093c8:	7013      	strb	r3, [r2, #0]
 80093ca:	e73d      	b.n	8009248 <_dtoa_r+0x960>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	9a08      	ldr	r2, [sp, #32]
 80093d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d043      	beq.n	8009460 <_dtoa_r+0xb78>
 80093d8:	4651      	mov	r1, sl
 80093da:	2300      	movs	r3, #0
 80093dc:	220a      	movs	r2, #10
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f9d6 	bl	8009790 <__multadd>
 80093e4:	45b8      	cmp	r8, r7
 80093e6:	4682      	mov	sl, r0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	f04f 020a 	mov.w	r2, #10
 80093f0:	4641      	mov	r1, r8
 80093f2:	4620      	mov	r0, r4
 80093f4:	d107      	bne.n	8009406 <_dtoa_r+0xb1e>
 80093f6:	f000 f9cb 	bl	8009790 <__multadd>
 80093fa:	4680      	mov	r8, r0
 80093fc:	4607      	mov	r7, r0
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	3301      	adds	r3, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	e775      	b.n	80092f2 <_dtoa_r+0xa0a>
 8009406:	f000 f9c3 	bl	8009790 <__multadd>
 800940a:	4639      	mov	r1, r7
 800940c:	4680      	mov	r8, r0
 800940e:	2300      	movs	r3, #0
 8009410:	220a      	movs	r2, #10
 8009412:	4620      	mov	r0, r4
 8009414:	f000 f9bc 	bl	8009790 <__multadd>
 8009418:	4607      	mov	r7, r0
 800941a:	e7f0      	b.n	80093fe <_dtoa_r+0xb16>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	9d00      	ldr	r5, [sp, #0]
 8009422:	4631      	mov	r1, r6
 8009424:	4650      	mov	r0, sl
 8009426:	f7ff f9d7 	bl	80087d8 <quorem>
 800942a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	f805 9b01 	strb.w	r9, [r5], #1
 8009434:	1aea      	subs	r2, r5, r3
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	4293      	cmp	r3, r2
 800943a:	dd07      	ble.n	800944c <_dtoa_r+0xb64>
 800943c:	4651      	mov	r1, sl
 800943e:	2300      	movs	r3, #0
 8009440:	220a      	movs	r2, #10
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f9a4 	bl	8009790 <__multadd>
 8009448:	4682      	mov	sl, r0
 800944a:	e7ea      	b.n	8009422 <_dtoa_r+0xb3a>
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfc8      	it	gt
 8009452:	461d      	movgt	r5, r3
 8009454:	9b00      	ldr	r3, [sp, #0]
 8009456:	bfd8      	it	le
 8009458:	2501      	movle	r5, #1
 800945a:	441d      	add	r5, r3
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	4651      	mov	r1, sl
 8009462:	2201      	movs	r2, #1
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fb8b 	bl	8009b80 <__lshift>
 800946a:	4631      	mov	r1, r6
 800946c:	4682      	mov	sl, r0
 800946e:	f000 fbf3 	bl	8009c58 <__mcmp>
 8009472:	2800      	cmp	r0, #0
 8009474:	dc96      	bgt.n	80093a4 <_dtoa_r+0xabc>
 8009476:	d102      	bne.n	800947e <_dtoa_r+0xb96>
 8009478:	f019 0f01 	tst.w	r9, #1
 800947c:	d192      	bne.n	80093a4 <_dtoa_r+0xabc>
 800947e:	462b      	mov	r3, r5
 8009480:	461d      	mov	r5, r3
 8009482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009486:	2a30      	cmp	r2, #48	; 0x30
 8009488:	d0fa      	beq.n	8009480 <_dtoa_r+0xb98>
 800948a:	e6dd      	b.n	8009248 <_dtoa_r+0x960>
 800948c:	9a00      	ldr	r2, [sp, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d189      	bne.n	80093a6 <_dtoa_r+0xabe>
 8009492:	f10b 0b01 	add.w	fp, fp, #1
 8009496:	2331      	movs	r3, #49	; 0x31
 8009498:	e796      	b.n	80093c8 <_dtoa_r+0xae0>
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <_dtoa_r+0xbdc>)
 800949c:	f7ff ba99 	b.w	80089d2 <_dtoa_r+0xea>
 80094a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f47f aa6d 	bne.w	8008982 <_dtoa_r+0x9a>
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <_dtoa_r+0xbe0>)
 80094aa:	f7ff ba92 	b.w	80089d2 <_dtoa_r+0xea>
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dcb5      	bgt.n	8009420 <_dtoa_r+0xb38>
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	f73f aeb1 	bgt.w	800921e <_dtoa_r+0x936>
 80094bc:	e7b0      	b.n	8009420 <_dtoa_r+0xb38>
 80094be:	bf00      	nop
 80094c0:	0800c0d5 	.word	0x0800c0d5
 80094c4:	0800c030 	.word	0x0800c030
 80094c8:	0800c059 	.word	0x0800c059

080094cc <_free_r>:
 80094cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d044      	beq.n	800955c <_free_r+0x90>
 80094d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d6:	9001      	str	r0, [sp, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f1a1 0404 	sub.w	r4, r1, #4
 80094de:	bfb8      	it	lt
 80094e0:	18e4      	addlt	r4, r4, r3
 80094e2:	f000 f8e7 	bl	80096b4 <__malloc_lock>
 80094e6:	4a1e      	ldr	r2, [pc, #120]	; (8009560 <_free_r+0x94>)
 80094e8:	9801      	ldr	r0, [sp, #4]
 80094ea:	6813      	ldr	r3, [r2, #0]
 80094ec:	b933      	cbnz	r3, 80094fc <_free_r+0x30>
 80094ee:	6063      	str	r3, [r4, #4]
 80094f0:	6014      	str	r4, [r2, #0]
 80094f2:	b003      	add	sp, #12
 80094f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094f8:	f000 b8e2 	b.w	80096c0 <__malloc_unlock>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d908      	bls.n	8009512 <_free_r+0x46>
 8009500:	6825      	ldr	r5, [r4, #0]
 8009502:	1961      	adds	r1, r4, r5
 8009504:	428b      	cmp	r3, r1
 8009506:	bf01      	itttt	eq
 8009508:	6819      	ldreq	r1, [r3, #0]
 800950a:	685b      	ldreq	r3, [r3, #4]
 800950c:	1949      	addeq	r1, r1, r5
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	e7ed      	b.n	80094ee <_free_r+0x22>
 8009512:	461a      	mov	r2, r3
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	b10b      	cbz	r3, 800951c <_free_r+0x50>
 8009518:	42a3      	cmp	r3, r4
 800951a:	d9fa      	bls.n	8009512 <_free_r+0x46>
 800951c:	6811      	ldr	r1, [r2, #0]
 800951e:	1855      	adds	r5, r2, r1
 8009520:	42a5      	cmp	r5, r4
 8009522:	d10b      	bne.n	800953c <_free_r+0x70>
 8009524:	6824      	ldr	r4, [r4, #0]
 8009526:	4421      	add	r1, r4
 8009528:	1854      	adds	r4, r2, r1
 800952a:	42a3      	cmp	r3, r4
 800952c:	6011      	str	r1, [r2, #0]
 800952e:	d1e0      	bne.n	80094f2 <_free_r+0x26>
 8009530:	681c      	ldr	r4, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	6053      	str	r3, [r2, #4]
 8009536:	440c      	add	r4, r1
 8009538:	6014      	str	r4, [r2, #0]
 800953a:	e7da      	b.n	80094f2 <_free_r+0x26>
 800953c:	d902      	bls.n	8009544 <_free_r+0x78>
 800953e:	230c      	movs	r3, #12
 8009540:	6003      	str	r3, [r0, #0]
 8009542:	e7d6      	b.n	80094f2 <_free_r+0x26>
 8009544:	6825      	ldr	r5, [r4, #0]
 8009546:	1961      	adds	r1, r4, r5
 8009548:	428b      	cmp	r3, r1
 800954a:	bf04      	itt	eq
 800954c:	6819      	ldreq	r1, [r3, #0]
 800954e:	685b      	ldreq	r3, [r3, #4]
 8009550:	6063      	str	r3, [r4, #4]
 8009552:	bf04      	itt	eq
 8009554:	1949      	addeq	r1, r1, r5
 8009556:	6021      	streq	r1, [r4, #0]
 8009558:	6054      	str	r4, [r2, #4]
 800955a:	e7ca      	b.n	80094f2 <_free_r+0x26>
 800955c:	b003      	add	sp, #12
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	200031e8 	.word	0x200031e8

08009564 <malloc>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <malloc+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 b823 	b.w	80095b4 <_malloc_r>
 800956e:	bf00      	nop
 8009570:	20000068 	.word	0x20000068

08009574 <sbrk_aligned>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4e0e      	ldr	r6, [pc, #56]	; (80095b0 <sbrk_aligned+0x3c>)
 8009578:	460c      	mov	r4, r1
 800957a:	6831      	ldr	r1, [r6, #0]
 800957c:	4605      	mov	r5, r0
 800957e:	b911      	cbnz	r1, 8009586 <sbrk_aligned+0x12>
 8009580:	f001 fe1a 	bl	800b1b8 <_sbrk_r>
 8009584:	6030      	str	r0, [r6, #0]
 8009586:	4621      	mov	r1, r4
 8009588:	4628      	mov	r0, r5
 800958a:	f001 fe15 	bl	800b1b8 <_sbrk_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d00a      	beq.n	80095a8 <sbrk_aligned+0x34>
 8009592:	1cc4      	adds	r4, r0, #3
 8009594:	f024 0403 	bic.w	r4, r4, #3
 8009598:	42a0      	cmp	r0, r4
 800959a:	d007      	beq.n	80095ac <sbrk_aligned+0x38>
 800959c:	1a21      	subs	r1, r4, r0
 800959e:	4628      	mov	r0, r5
 80095a0:	f001 fe0a 	bl	800b1b8 <_sbrk_r>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d101      	bne.n	80095ac <sbrk_aligned+0x38>
 80095a8:	f04f 34ff 	mov.w	r4, #4294967295
 80095ac:	4620      	mov	r0, r4
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	200031ec 	.word	0x200031ec

080095b4 <_malloc_r>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	1ccd      	adds	r5, r1, #3
 80095ba:	f025 0503 	bic.w	r5, r5, #3
 80095be:	3508      	adds	r5, #8
 80095c0:	2d0c      	cmp	r5, #12
 80095c2:	bf38      	it	cc
 80095c4:	250c      	movcc	r5, #12
 80095c6:	2d00      	cmp	r5, #0
 80095c8:	4607      	mov	r7, r0
 80095ca:	db01      	blt.n	80095d0 <_malloc_r+0x1c>
 80095cc:	42a9      	cmp	r1, r5
 80095ce:	d905      	bls.n	80095dc <_malloc_r+0x28>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	2600      	movs	r6, #0
 80095d6:	4630      	mov	r0, r6
 80095d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096b0 <_malloc_r+0xfc>
 80095e0:	f000 f868 	bl	80096b4 <__malloc_lock>
 80095e4:	f8d8 3000 	ldr.w	r3, [r8]
 80095e8:	461c      	mov	r4, r3
 80095ea:	bb5c      	cbnz	r4, 8009644 <_malloc_r+0x90>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff ffc0 	bl	8009574 <sbrk_aligned>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	4604      	mov	r4, r0
 80095f8:	d155      	bne.n	80096a6 <_malloc_r+0xf2>
 80095fa:	f8d8 4000 	ldr.w	r4, [r8]
 80095fe:	4626      	mov	r6, r4
 8009600:	2e00      	cmp	r6, #0
 8009602:	d145      	bne.n	8009690 <_malloc_r+0xdc>
 8009604:	2c00      	cmp	r4, #0
 8009606:	d048      	beq.n	800969a <_malloc_r+0xe6>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	4631      	mov	r1, r6
 800960c:	4638      	mov	r0, r7
 800960e:	eb04 0903 	add.w	r9, r4, r3
 8009612:	f001 fdd1 	bl	800b1b8 <_sbrk_r>
 8009616:	4581      	cmp	r9, r0
 8009618:	d13f      	bne.n	800969a <_malloc_r+0xe6>
 800961a:	6821      	ldr	r1, [r4, #0]
 800961c:	1a6d      	subs	r5, r5, r1
 800961e:	4629      	mov	r1, r5
 8009620:	4638      	mov	r0, r7
 8009622:	f7ff ffa7 	bl	8009574 <sbrk_aligned>
 8009626:	3001      	adds	r0, #1
 8009628:	d037      	beq.n	800969a <_malloc_r+0xe6>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	442b      	add	r3, r5
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	f8d8 3000 	ldr.w	r3, [r8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d038      	beq.n	80096aa <_malloc_r+0xf6>
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	42a2      	cmp	r2, r4
 800963c:	d12b      	bne.n	8009696 <_malloc_r+0xe2>
 800963e:	2200      	movs	r2, #0
 8009640:	605a      	str	r2, [r3, #4]
 8009642:	e00f      	b.n	8009664 <_malloc_r+0xb0>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	1b52      	subs	r2, r2, r5
 8009648:	d41f      	bmi.n	800968a <_malloc_r+0xd6>
 800964a:	2a0b      	cmp	r2, #11
 800964c:	d917      	bls.n	800967e <_malloc_r+0xca>
 800964e:	1961      	adds	r1, r4, r5
 8009650:	42a3      	cmp	r3, r4
 8009652:	6025      	str	r5, [r4, #0]
 8009654:	bf18      	it	ne
 8009656:	6059      	strne	r1, [r3, #4]
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	bf08      	it	eq
 800965c:	f8c8 1000 	streq.w	r1, [r8]
 8009660:	5162      	str	r2, [r4, r5]
 8009662:	604b      	str	r3, [r1, #4]
 8009664:	4638      	mov	r0, r7
 8009666:	f104 060b 	add.w	r6, r4, #11
 800966a:	f000 f829 	bl	80096c0 <__malloc_unlock>
 800966e:	f026 0607 	bic.w	r6, r6, #7
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	1af2      	subs	r2, r6, r3
 8009676:	d0ae      	beq.n	80095d6 <_malloc_r+0x22>
 8009678:	1b9b      	subs	r3, r3, r6
 800967a:	50a3      	str	r3, [r4, r2]
 800967c:	e7ab      	b.n	80095d6 <_malloc_r+0x22>
 800967e:	42a3      	cmp	r3, r4
 8009680:	6862      	ldr	r2, [r4, #4]
 8009682:	d1dd      	bne.n	8009640 <_malloc_r+0x8c>
 8009684:	f8c8 2000 	str.w	r2, [r8]
 8009688:	e7ec      	b.n	8009664 <_malloc_r+0xb0>
 800968a:	4623      	mov	r3, r4
 800968c:	6864      	ldr	r4, [r4, #4]
 800968e:	e7ac      	b.n	80095ea <_malloc_r+0x36>
 8009690:	4634      	mov	r4, r6
 8009692:	6876      	ldr	r6, [r6, #4]
 8009694:	e7b4      	b.n	8009600 <_malloc_r+0x4c>
 8009696:	4613      	mov	r3, r2
 8009698:	e7cc      	b.n	8009634 <_malloc_r+0x80>
 800969a:	230c      	movs	r3, #12
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4638      	mov	r0, r7
 80096a0:	f000 f80e 	bl	80096c0 <__malloc_unlock>
 80096a4:	e797      	b.n	80095d6 <_malloc_r+0x22>
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	e7dc      	b.n	8009664 <_malloc_r+0xb0>
 80096aa:	605b      	str	r3, [r3, #4]
 80096ac:	deff      	udf	#255	; 0xff
 80096ae:	bf00      	nop
 80096b0:	200031e8 	.word	0x200031e8

080096b4 <__malloc_lock>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__malloc_lock+0x8>)
 80096b6:	f7ff b878 	b.w	80087aa <__retarget_lock_acquire_recursive>
 80096ba:	bf00      	nop
 80096bc:	200031e4 	.word	0x200031e4

080096c0 <__malloc_unlock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__malloc_unlock+0x8>)
 80096c2:	f7ff b873 	b.w	80087ac <__retarget_lock_release_recursive>
 80096c6:	bf00      	nop
 80096c8:	200031e4 	.word	0x200031e4

080096cc <_Balloc>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	69c6      	ldr	r6, [r0, #28]
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	b976      	cbnz	r6, 80096f4 <_Balloc+0x28>
 80096d6:	2010      	movs	r0, #16
 80096d8:	f7ff ff44 	bl	8009564 <malloc>
 80096dc:	4602      	mov	r2, r0
 80096de:	61e0      	str	r0, [r4, #28]
 80096e0:	b920      	cbnz	r0, 80096ec <_Balloc+0x20>
 80096e2:	4b18      	ldr	r3, [pc, #96]	; (8009744 <_Balloc+0x78>)
 80096e4:	4818      	ldr	r0, [pc, #96]	; (8009748 <_Balloc+0x7c>)
 80096e6:	216b      	movs	r1, #107	; 0x6b
 80096e8:	f001 fd7e 	bl	800b1e8 <__assert_func>
 80096ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f0:	6006      	str	r6, [r0, #0]
 80096f2:	60c6      	str	r6, [r0, #12]
 80096f4:	69e6      	ldr	r6, [r4, #28]
 80096f6:	68f3      	ldr	r3, [r6, #12]
 80096f8:	b183      	cbz	r3, 800971c <_Balloc+0x50>
 80096fa:	69e3      	ldr	r3, [r4, #28]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009702:	b9b8      	cbnz	r0, 8009734 <_Balloc+0x68>
 8009704:	2101      	movs	r1, #1
 8009706:	fa01 f605 	lsl.w	r6, r1, r5
 800970a:	1d72      	adds	r2, r6, #5
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	4620      	mov	r0, r4
 8009710:	f001 fd88 	bl	800b224 <_calloc_r>
 8009714:	b160      	cbz	r0, 8009730 <_Balloc+0x64>
 8009716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800971a:	e00e      	b.n	800973a <_Balloc+0x6e>
 800971c:	2221      	movs	r2, #33	; 0x21
 800971e:	2104      	movs	r1, #4
 8009720:	4620      	mov	r0, r4
 8009722:	f001 fd7f 	bl	800b224 <_calloc_r>
 8009726:	69e3      	ldr	r3, [r4, #28]
 8009728:	60f0      	str	r0, [r6, #12]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e4      	bne.n	80096fa <_Balloc+0x2e>
 8009730:	2000      	movs	r0, #0
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	6802      	ldr	r2, [r0, #0]
 8009736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800973a:	2300      	movs	r3, #0
 800973c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009740:	e7f7      	b.n	8009732 <_Balloc+0x66>
 8009742:	bf00      	nop
 8009744:	0800c066 	.word	0x0800c066
 8009748:	0800c0e6 	.word	0x0800c0e6

0800974c <_Bfree>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	69c6      	ldr	r6, [r0, #28]
 8009750:	4605      	mov	r5, r0
 8009752:	460c      	mov	r4, r1
 8009754:	b976      	cbnz	r6, 8009774 <_Bfree+0x28>
 8009756:	2010      	movs	r0, #16
 8009758:	f7ff ff04 	bl	8009564 <malloc>
 800975c:	4602      	mov	r2, r0
 800975e:	61e8      	str	r0, [r5, #28]
 8009760:	b920      	cbnz	r0, 800976c <_Bfree+0x20>
 8009762:	4b09      	ldr	r3, [pc, #36]	; (8009788 <_Bfree+0x3c>)
 8009764:	4809      	ldr	r0, [pc, #36]	; (800978c <_Bfree+0x40>)
 8009766:	218f      	movs	r1, #143	; 0x8f
 8009768:	f001 fd3e 	bl	800b1e8 <__assert_func>
 800976c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009770:	6006      	str	r6, [r0, #0]
 8009772:	60c6      	str	r6, [r0, #12]
 8009774:	b13c      	cbz	r4, 8009786 <_Bfree+0x3a>
 8009776:	69eb      	ldr	r3, [r5, #28]
 8009778:	6862      	ldr	r2, [r4, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009780:	6021      	str	r1, [r4, #0]
 8009782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	0800c066 	.word	0x0800c066
 800978c:	0800c0e6 	.word	0x0800c0e6

08009790 <__multadd>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	690d      	ldr	r5, [r1, #16]
 8009796:	4607      	mov	r7, r0
 8009798:	460c      	mov	r4, r1
 800979a:	461e      	mov	r6, r3
 800979c:	f101 0c14 	add.w	ip, r1, #20
 80097a0:	2000      	movs	r0, #0
 80097a2:	f8dc 3000 	ldr.w	r3, [ip]
 80097a6:	b299      	uxth	r1, r3
 80097a8:	fb02 6101 	mla	r1, r2, r1, r6
 80097ac:	0c1e      	lsrs	r6, r3, #16
 80097ae:	0c0b      	lsrs	r3, r1, #16
 80097b0:	fb02 3306 	mla	r3, r2, r6, r3
 80097b4:	b289      	uxth	r1, r1
 80097b6:	3001      	adds	r0, #1
 80097b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097bc:	4285      	cmp	r5, r0
 80097be:	f84c 1b04 	str.w	r1, [ip], #4
 80097c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097c6:	dcec      	bgt.n	80097a2 <__multadd+0x12>
 80097c8:	b30e      	cbz	r6, 800980e <__multadd+0x7e>
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	dc19      	bgt.n	8009804 <__multadd+0x74>
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4638      	mov	r0, r7
 80097d4:	3101      	adds	r1, #1
 80097d6:	f7ff ff79 	bl	80096cc <_Balloc>
 80097da:	4680      	mov	r8, r0
 80097dc:	b928      	cbnz	r0, 80097ea <__multadd+0x5a>
 80097de:	4602      	mov	r2, r0
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <__multadd+0x84>)
 80097e2:	480d      	ldr	r0, [pc, #52]	; (8009818 <__multadd+0x88>)
 80097e4:	21ba      	movs	r1, #186	; 0xba
 80097e6:	f001 fcff 	bl	800b1e8 <__assert_func>
 80097ea:	6922      	ldr	r2, [r4, #16]
 80097ec:	3202      	adds	r2, #2
 80097ee:	f104 010c 	add.w	r1, r4, #12
 80097f2:	0092      	lsls	r2, r2, #2
 80097f4:	300c      	adds	r0, #12
 80097f6:	f7fe ffda 	bl	80087ae <memcpy>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff ffa5 	bl	800974c <_Bfree>
 8009802:	4644      	mov	r4, r8
 8009804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009808:	3501      	adds	r5, #1
 800980a:	615e      	str	r6, [r3, #20]
 800980c:	6125      	str	r5, [r4, #16]
 800980e:	4620      	mov	r0, r4
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	0800c0d5 	.word	0x0800c0d5
 8009818:	0800c0e6 	.word	0x0800c0e6

0800981c <__s2b>:
 800981c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009820:	460c      	mov	r4, r1
 8009822:	4615      	mov	r5, r2
 8009824:	461f      	mov	r7, r3
 8009826:	2209      	movs	r2, #9
 8009828:	3308      	adds	r3, #8
 800982a:	4606      	mov	r6, r0
 800982c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009830:	2100      	movs	r1, #0
 8009832:	2201      	movs	r2, #1
 8009834:	429a      	cmp	r2, r3
 8009836:	db09      	blt.n	800984c <__s2b+0x30>
 8009838:	4630      	mov	r0, r6
 800983a:	f7ff ff47 	bl	80096cc <_Balloc>
 800983e:	b940      	cbnz	r0, 8009852 <__s2b+0x36>
 8009840:	4602      	mov	r2, r0
 8009842:	4b19      	ldr	r3, [pc, #100]	; (80098a8 <__s2b+0x8c>)
 8009844:	4819      	ldr	r0, [pc, #100]	; (80098ac <__s2b+0x90>)
 8009846:	21d3      	movs	r1, #211	; 0xd3
 8009848:	f001 fcce 	bl	800b1e8 <__assert_func>
 800984c:	0052      	lsls	r2, r2, #1
 800984e:	3101      	adds	r1, #1
 8009850:	e7f0      	b.n	8009834 <__s2b+0x18>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	6143      	str	r3, [r0, #20]
 8009856:	2d09      	cmp	r5, #9
 8009858:	f04f 0301 	mov.w	r3, #1
 800985c:	6103      	str	r3, [r0, #16]
 800985e:	dd16      	ble.n	800988e <__s2b+0x72>
 8009860:	f104 0909 	add.w	r9, r4, #9
 8009864:	46c8      	mov	r8, r9
 8009866:	442c      	add	r4, r5
 8009868:	f818 3b01 	ldrb.w	r3, [r8], #1
 800986c:	4601      	mov	r1, r0
 800986e:	3b30      	subs	r3, #48	; 0x30
 8009870:	220a      	movs	r2, #10
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ff8c 	bl	8009790 <__multadd>
 8009878:	45a0      	cmp	r8, r4
 800987a:	d1f5      	bne.n	8009868 <__s2b+0x4c>
 800987c:	f1a5 0408 	sub.w	r4, r5, #8
 8009880:	444c      	add	r4, r9
 8009882:	1b2d      	subs	r5, r5, r4
 8009884:	1963      	adds	r3, r4, r5
 8009886:	42bb      	cmp	r3, r7
 8009888:	db04      	blt.n	8009894 <__s2b+0x78>
 800988a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988e:	340a      	adds	r4, #10
 8009890:	2509      	movs	r5, #9
 8009892:	e7f6      	b.n	8009882 <__s2b+0x66>
 8009894:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009898:	4601      	mov	r1, r0
 800989a:	3b30      	subs	r3, #48	; 0x30
 800989c:	220a      	movs	r2, #10
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ff76 	bl	8009790 <__multadd>
 80098a4:	e7ee      	b.n	8009884 <__s2b+0x68>
 80098a6:	bf00      	nop
 80098a8:	0800c0d5 	.word	0x0800c0d5
 80098ac:	0800c0e6 	.word	0x0800c0e6

080098b0 <__hi0bits>:
 80098b0:	0c03      	lsrs	r3, r0, #16
 80098b2:	041b      	lsls	r3, r3, #16
 80098b4:	b9d3      	cbnz	r3, 80098ec <__hi0bits+0x3c>
 80098b6:	0400      	lsls	r0, r0, #16
 80098b8:	2310      	movs	r3, #16
 80098ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098be:	bf04      	itt	eq
 80098c0:	0200      	lsleq	r0, r0, #8
 80098c2:	3308      	addeq	r3, #8
 80098c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098c8:	bf04      	itt	eq
 80098ca:	0100      	lsleq	r0, r0, #4
 80098cc:	3304      	addeq	r3, #4
 80098ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098d2:	bf04      	itt	eq
 80098d4:	0080      	lsleq	r0, r0, #2
 80098d6:	3302      	addeq	r3, #2
 80098d8:	2800      	cmp	r0, #0
 80098da:	db05      	blt.n	80098e8 <__hi0bits+0x38>
 80098dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098e0:	f103 0301 	add.w	r3, r3, #1
 80098e4:	bf08      	it	eq
 80098e6:	2320      	moveq	r3, #32
 80098e8:	4618      	mov	r0, r3
 80098ea:	4770      	bx	lr
 80098ec:	2300      	movs	r3, #0
 80098ee:	e7e4      	b.n	80098ba <__hi0bits+0xa>

080098f0 <__lo0bits>:
 80098f0:	6803      	ldr	r3, [r0, #0]
 80098f2:	f013 0207 	ands.w	r2, r3, #7
 80098f6:	d00c      	beq.n	8009912 <__lo0bits+0x22>
 80098f8:	07d9      	lsls	r1, r3, #31
 80098fa:	d422      	bmi.n	8009942 <__lo0bits+0x52>
 80098fc:	079a      	lsls	r2, r3, #30
 80098fe:	bf49      	itett	mi
 8009900:	085b      	lsrmi	r3, r3, #1
 8009902:	089b      	lsrpl	r3, r3, #2
 8009904:	6003      	strmi	r3, [r0, #0]
 8009906:	2201      	movmi	r2, #1
 8009908:	bf5c      	itt	pl
 800990a:	6003      	strpl	r3, [r0, #0]
 800990c:	2202      	movpl	r2, #2
 800990e:	4610      	mov	r0, r2
 8009910:	4770      	bx	lr
 8009912:	b299      	uxth	r1, r3
 8009914:	b909      	cbnz	r1, 800991a <__lo0bits+0x2a>
 8009916:	0c1b      	lsrs	r3, r3, #16
 8009918:	2210      	movs	r2, #16
 800991a:	b2d9      	uxtb	r1, r3
 800991c:	b909      	cbnz	r1, 8009922 <__lo0bits+0x32>
 800991e:	3208      	adds	r2, #8
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	0719      	lsls	r1, r3, #28
 8009924:	bf04      	itt	eq
 8009926:	091b      	lsreq	r3, r3, #4
 8009928:	3204      	addeq	r2, #4
 800992a:	0799      	lsls	r1, r3, #30
 800992c:	bf04      	itt	eq
 800992e:	089b      	lsreq	r3, r3, #2
 8009930:	3202      	addeq	r2, #2
 8009932:	07d9      	lsls	r1, r3, #31
 8009934:	d403      	bmi.n	800993e <__lo0bits+0x4e>
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	f102 0201 	add.w	r2, r2, #1
 800993c:	d003      	beq.n	8009946 <__lo0bits+0x56>
 800993e:	6003      	str	r3, [r0, #0]
 8009940:	e7e5      	b.n	800990e <__lo0bits+0x1e>
 8009942:	2200      	movs	r2, #0
 8009944:	e7e3      	b.n	800990e <__lo0bits+0x1e>
 8009946:	2220      	movs	r2, #32
 8009948:	e7e1      	b.n	800990e <__lo0bits+0x1e>
	...

0800994c <__i2b>:
 800994c:	b510      	push	{r4, lr}
 800994e:	460c      	mov	r4, r1
 8009950:	2101      	movs	r1, #1
 8009952:	f7ff febb 	bl	80096cc <_Balloc>
 8009956:	4602      	mov	r2, r0
 8009958:	b928      	cbnz	r0, 8009966 <__i2b+0x1a>
 800995a:	4b05      	ldr	r3, [pc, #20]	; (8009970 <__i2b+0x24>)
 800995c:	4805      	ldr	r0, [pc, #20]	; (8009974 <__i2b+0x28>)
 800995e:	f240 1145 	movw	r1, #325	; 0x145
 8009962:	f001 fc41 	bl	800b1e8 <__assert_func>
 8009966:	2301      	movs	r3, #1
 8009968:	6144      	str	r4, [r0, #20]
 800996a:	6103      	str	r3, [r0, #16]
 800996c:	bd10      	pop	{r4, pc}
 800996e:	bf00      	nop
 8009970:	0800c0d5 	.word	0x0800c0d5
 8009974:	0800c0e6 	.word	0x0800c0e6

08009978 <__multiply>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	4691      	mov	r9, r2
 800997e:	690a      	ldr	r2, [r1, #16]
 8009980:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	bfb8      	it	lt
 8009988:	460b      	movlt	r3, r1
 800998a:	460c      	mov	r4, r1
 800998c:	bfbc      	itt	lt
 800998e:	464c      	movlt	r4, r9
 8009990:	4699      	movlt	r9, r3
 8009992:	6927      	ldr	r7, [r4, #16]
 8009994:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009998:	68a3      	ldr	r3, [r4, #8]
 800999a:	6861      	ldr	r1, [r4, #4]
 800999c:	eb07 060a 	add.w	r6, r7, sl
 80099a0:	42b3      	cmp	r3, r6
 80099a2:	b085      	sub	sp, #20
 80099a4:	bfb8      	it	lt
 80099a6:	3101      	addlt	r1, #1
 80099a8:	f7ff fe90 	bl	80096cc <_Balloc>
 80099ac:	b930      	cbnz	r0, 80099bc <__multiply+0x44>
 80099ae:	4602      	mov	r2, r0
 80099b0:	4b44      	ldr	r3, [pc, #272]	; (8009ac4 <__multiply+0x14c>)
 80099b2:	4845      	ldr	r0, [pc, #276]	; (8009ac8 <__multiply+0x150>)
 80099b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80099b8:	f001 fc16 	bl	800b1e8 <__assert_func>
 80099bc:	f100 0514 	add.w	r5, r0, #20
 80099c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099c4:	462b      	mov	r3, r5
 80099c6:	2200      	movs	r2, #0
 80099c8:	4543      	cmp	r3, r8
 80099ca:	d321      	bcc.n	8009a10 <__multiply+0x98>
 80099cc:	f104 0314 	add.w	r3, r4, #20
 80099d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099d4:	f109 0314 	add.w	r3, r9, #20
 80099d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80099dc:	9202      	str	r2, [sp, #8]
 80099de:	1b3a      	subs	r2, r7, r4
 80099e0:	3a15      	subs	r2, #21
 80099e2:	f022 0203 	bic.w	r2, r2, #3
 80099e6:	3204      	adds	r2, #4
 80099e8:	f104 0115 	add.w	r1, r4, #21
 80099ec:	428f      	cmp	r7, r1
 80099ee:	bf38      	it	cc
 80099f0:	2204      	movcc	r2, #4
 80099f2:	9201      	str	r2, [sp, #4]
 80099f4:	9a02      	ldr	r2, [sp, #8]
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d80c      	bhi.n	8009a16 <__multiply+0x9e>
 80099fc:	2e00      	cmp	r6, #0
 80099fe:	dd03      	ble.n	8009a08 <__multiply+0x90>
 8009a00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d05b      	beq.n	8009ac0 <__multiply+0x148>
 8009a08:	6106      	str	r6, [r0, #16]
 8009a0a:	b005      	add	sp, #20
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a10:	f843 2b04 	str.w	r2, [r3], #4
 8009a14:	e7d8      	b.n	80099c8 <__multiply+0x50>
 8009a16:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a1a:	f1ba 0f00 	cmp.w	sl, #0
 8009a1e:	d024      	beq.n	8009a6a <__multiply+0xf2>
 8009a20:	f104 0e14 	add.w	lr, r4, #20
 8009a24:	46a9      	mov	r9, r5
 8009a26:	f04f 0c00 	mov.w	ip, #0
 8009a2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a2e:	f8d9 1000 	ldr.w	r1, [r9]
 8009a32:	fa1f fb82 	uxth.w	fp, r2
 8009a36:	b289      	uxth	r1, r1
 8009a38:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a40:	f8d9 2000 	ldr.w	r2, [r9]
 8009a44:	4461      	add	r1, ip
 8009a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a52:	b289      	uxth	r1, r1
 8009a54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a58:	4577      	cmp	r7, lr
 8009a5a:	f849 1b04 	str.w	r1, [r9], #4
 8009a5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a62:	d8e2      	bhi.n	8009a2a <__multiply+0xb2>
 8009a64:	9a01      	ldr	r2, [sp, #4]
 8009a66:	f845 c002 	str.w	ip, [r5, r2]
 8009a6a:	9a03      	ldr	r2, [sp, #12]
 8009a6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a70:	3304      	adds	r3, #4
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d021      	beq.n	8009abc <__multiply+0x144>
 8009a78:	6829      	ldr	r1, [r5, #0]
 8009a7a:	f104 0c14 	add.w	ip, r4, #20
 8009a7e:	46ae      	mov	lr, r5
 8009a80:	f04f 0a00 	mov.w	sl, #0
 8009a84:	f8bc b000 	ldrh.w	fp, [ip]
 8009a88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a8c:	fb09 220b 	mla	r2, r9, fp, r2
 8009a90:	4452      	add	r2, sl
 8009a92:	b289      	uxth	r1, r1
 8009a94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a98:	f84e 1b04 	str.w	r1, [lr], #4
 8009a9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009aa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009aa4:	f8be 1000 	ldrh.w	r1, [lr]
 8009aa8:	fb09 110a 	mla	r1, r9, sl, r1
 8009aac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009ab0:	4567      	cmp	r7, ip
 8009ab2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ab6:	d8e5      	bhi.n	8009a84 <__multiply+0x10c>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	50a9      	str	r1, [r5, r2]
 8009abc:	3504      	adds	r5, #4
 8009abe:	e799      	b.n	80099f4 <__multiply+0x7c>
 8009ac0:	3e01      	subs	r6, #1
 8009ac2:	e79b      	b.n	80099fc <__multiply+0x84>
 8009ac4:	0800c0d5 	.word	0x0800c0d5
 8009ac8:	0800c0e6 	.word	0x0800c0e6

08009acc <__pow5mult>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	f012 0203 	ands.w	r2, r2, #3
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	d007      	beq.n	8009aec <__pow5mult+0x20>
 8009adc:	4c25      	ldr	r4, [pc, #148]	; (8009b74 <__pow5mult+0xa8>)
 8009ade:	3a01      	subs	r2, #1
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ae6:	f7ff fe53 	bl	8009790 <__multadd>
 8009aea:	4607      	mov	r7, r0
 8009aec:	10ad      	asrs	r5, r5, #2
 8009aee:	d03d      	beq.n	8009b6c <__pow5mult+0xa0>
 8009af0:	69f4      	ldr	r4, [r6, #28]
 8009af2:	b97c      	cbnz	r4, 8009b14 <__pow5mult+0x48>
 8009af4:	2010      	movs	r0, #16
 8009af6:	f7ff fd35 	bl	8009564 <malloc>
 8009afa:	4602      	mov	r2, r0
 8009afc:	61f0      	str	r0, [r6, #28]
 8009afe:	b928      	cbnz	r0, 8009b0c <__pow5mult+0x40>
 8009b00:	4b1d      	ldr	r3, [pc, #116]	; (8009b78 <__pow5mult+0xac>)
 8009b02:	481e      	ldr	r0, [pc, #120]	; (8009b7c <__pow5mult+0xb0>)
 8009b04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009b08:	f001 fb6e 	bl	800b1e8 <__assert_func>
 8009b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b10:	6004      	str	r4, [r0, #0]
 8009b12:	60c4      	str	r4, [r0, #12]
 8009b14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b1c:	b94c      	cbnz	r4, 8009b32 <__pow5mult+0x66>
 8009b1e:	f240 2171 	movw	r1, #625	; 0x271
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ff12 	bl	800994c <__i2b>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b2e:	4604      	mov	r4, r0
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	f04f 0900 	mov.w	r9, #0
 8009b36:	07eb      	lsls	r3, r5, #31
 8009b38:	d50a      	bpl.n	8009b50 <__pow5mult+0x84>
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7ff ff1a 	bl	8009978 <__multiply>
 8009b44:	4639      	mov	r1, r7
 8009b46:	4680      	mov	r8, r0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff fdff 	bl	800974c <_Bfree>
 8009b4e:	4647      	mov	r7, r8
 8009b50:	106d      	asrs	r5, r5, #1
 8009b52:	d00b      	beq.n	8009b6c <__pow5mult+0xa0>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	b938      	cbnz	r0, 8009b68 <__pow5mult+0x9c>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7ff ff0b 	bl	8009978 <__multiply>
 8009b62:	6020      	str	r0, [r4, #0]
 8009b64:	f8c0 9000 	str.w	r9, [r0]
 8009b68:	4604      	mov	r4, r0
 8009b6a:	e7e4      	b.n	8009b36 <__pow5mult+0x6a>
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	bf00      	nop
 8009b74:	0800c230 	.word	0x0800c230
 8009b78:	0800c066 	.word	0x0800c066
 8009b7c:	0800c0e6 	.word	0x0800c0e6

08009b80 <__lshift>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	6849      	ldr	r1, [r1, #4]
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	4607      	mov	r7, r0
 8009b92:	4691      	mov	r9, r2
 8009b94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b98:	f108 0601 	add.w	r6, r8, #1
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	db0b      	blt.n	8009bb8 <__lshift+0x38>
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7ff fd93 	bl	80096cc <_Balloc>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	b948      	cbnz	r0, 8009bbe <__lshift+0x3e>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b28      	ldr	r3, [pc, #160]	; (8009c50 <__lshift+0xd0>)
 8009bae:	4829      	ldr	r0, [pc, #164]	; (8009c54 <__lshift+0xd4>)
 8009bb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009bb4:	f001 fb18 	bl	800b1e8 <__assert_func>
 8009bb8:	3101      	adds	r1, #1
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	e7ee      	b.n	8009b9c <__lshift+0x1c>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f100 0114 	add.w	r1, r0, #20
 8009bc4:	f100 0210 	add.w	r2, r0, #16
 8009bc8:	4618      	mov	r0, r3
 8009bca:	4553      	cmp	r3, sl
 8009bcc:	db33      	blt.n	8009c36 <__lshift+0xb6>
 8009bce:	6920      	ldr	r0, [r4, #16]
 8009bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bd4:	f104 0314 	add.w	r3, r4, #20
 8009bd8:	f019 091f 	ands.w	r9, r9, #31
 8009bdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009be0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009be4:	d02b      	beq.n	8009c3e <__lshift+0xbe>
 8009be6:	f1c9 0e20 	rsb	lr, r9, #32
 8009bea:	468a      	mov	sl, r1
 8009bec:	2200      	movs	r2, #0
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	fa00 f009 	lsl.w	r0, r0, r9
 8009bf4:	4310      	orrs	r0, r2
 8009bf6:	f84a 0b04 	str.w	r0, [sl], #4
 8009bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfe:	459c      	cmp	ip, r3
 8009c00:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c04:	d8f3      	bhi.n	8009bee <__lshift+0x6e>
 8009c06:	ebac 0304 	sub.w	r3, ip, r4
 8009c0a:	3b15      	subs	r3, #21
 8009c0c:	f023 0303 	bic.w	r3, r3, #3
 8009c10:	3304      	adds	r3, #4
 8009c12:	f104 0015 	add.w	r0, r4, #21
 8009c16:	4584      	cmp	ip, r0
 8009c18:	bf38      	it	cc
 8009c1a:	2304      	movcc	r3, #4
 8009c1c:	50ca      	str	r2, [r1, r3]
 8009c1e:	b10a      	cbz	r2, 8009c24 <__lshift+0xa4>
 8009c20:	f108 0602 	add.w	r6, r8, #2
 8009c24:	3e01      	subs	r6, #1
 8009c26:	4638      	mov	r0, r7
 8009c28:	612e      	str	r6, [r5, #16]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	f7ff fd8e 	bl	800974c <_Bfree>
 8009c30:	4628      	mov	r0, r5
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	e7c5      	b.n	8009bca <__lshift+0x4a>
 8009c3e:	3904      	subs	r1, #4
 8009c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c48:	459c      	cmp	ip, r3
 8009c4a:	d8f9      	bhi.n	8009c40 <__lshift+0xc0>
 8009c4c:	e7ea      	b.n	8009c24 <__lshift+0xa4>
 8009c4e:	bf00      	nop
 8009c50:	0800c0d5 	.word	0x0800c0d5
 8009c54:	0800c0e6 	.word	0x0800c0e6

08009c58 <__mcmp>:
 8009c58:	b530      	push	{r4, r5, lr}
 8009c5a:	6902      	ldr	r2, [r0, #16]
 8009c5c:	690c      	ldr	r4, [r1, #16]
 8009c5e:	1b12      	subs	r2, r2, r4
 8009c60:	d10e      	bne.n	8009c80 <__mcmp+0x28>
 8009c62:	f100 0314 	add.w	r3, r0, #20
 8009c66:	3114      	adds	r1, #20
 8009c68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d003      	beq.n	8009c84 <__mcmp+0x2c>
 8009c7c:	d305      	bcc.n	8009c8a <__mcmp+0x32>
 8009c7e:	2201      	movs	r2, #1
 8009c80:	4610      	mov	r0, r2
 8009c82:	bd30      	pop	{r4, r5, pc}
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d3f3      	bcc.n	8009c70 <__mcmp+0x18>
 8009c88:	e7fa      	b.n	8009c80 <__mcmp+0x28>
 8009c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8e:	e7f7      	b.n	8009c80 <__mcmp+0x28>

08009c90 <__mdiff>:
 8009c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	4606      	mov	r6, r0
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	f7ff ffdb 	bl	8009c58 <__mcmp>
 8009ca2:	1e05      	subs	r5, r0, #0
 8009ca4:	d110      	bne.n	8009cc8 <__mdiff+0x38>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff fd0f 	bl	80096cc <_Balloc>
 8009cae:	b930      	cbnz	r0, 8009cbe <__mdiff+0x2e>
 8009cb0:	4b3a      	ldr	r3, [pc, #232]	; (8009d9c <__mdiff+0x10c>)
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f240 2137 	movw	r1, #567	; 0x237
 8009cb8:	4839      	ldr	r0, [pc, #228]	; (8009da0 <__mdiff+0x110>)
 8009cba:	f001 fa95 	bl	800b1e8 <__assert_func>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	bfa4      	itt	ge
 8009cca:	4643      	movge	r3, r8
 8009ccc:	46a0      	movge	r8, r4
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cd4:	bfa6      	itte	ge
 8009cd6:	461c      	movge	r4, r3
 8009cd8:	2500      	movge	r5, #0
 8009cda:	2501      	movlt	r5, #1
 8009cdc:	f7ff fcf6 	bl	80096cc <_Balloc>
 8009ce0:	b920      	cbnz	r0, 8009cec <__mdiff+0x5c>
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <__mdiff+0x10c>)
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	f240 2145 	movw	r1, #581	; 0x245
 8009cea:	e7e5      	b.n	8009cb8 <__mdiff+0x28>
 8009cec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cf0:	6926      	ldr	r6, [r4, #16]
 8009cf2:	60c5      	str	r5, [r0, #12]
 8009cf4:	f104 0914 	add.w	r9, r4, #20
 8009cf8:	f108 0514 	add.w	r5, r8, #20
 8009cfc:	f100 0e14 	add.w	lr, r0, #20
 8009d00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d08:	f108 0210 	add.w	r2, r8, #16
 8009d0c:	46f2      	mov	sl, lr
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d18:	fa11 f88b 	uxtah	r8, r1, fp
 8009d1c:	b299      	uxth	r1, r3
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	eba8 0801 	sub.w	r8, r8, r1
 8009d24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d2c:	fa1f f888 	uxth.w	r8, r8
 8009d30:	1419      	asrs	r1, r3, #16
 8009d32:	454e      	cmp	r6, r9
 8009d34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d38:	f84a 3b04 	str.w	r3, [sl], #4
 8009d3c:	d8e8      	bhi.n	8009d10 <__mdiff+0x80>
 8009d3e:	1b33      	subs	r3, r6, r4
 8009d40:	3b15      	subs	r3, #21
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	3304      	adds	r3, #4
 8009d48:	3415      	adds	r4, #21
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	bf38      	it	cc
 8009d4e:	2304      	movcc	r3, #4
 8009d50:	441d      	add	r5, r3
 8009d52:	4473      	add	r3, lr
 8009d54:	469e      	mov	lr, r3
 8009d56:	462e      	mov	r6, r5
 8009d58:	4566      	cmp	r6, ip
 8009d5a:	d30e      	bcc.n	8009d7a <__mdiff+0xea>
 8009d5c:	f10c 0203 	add.w	r2, ip, #3
 8009d60:	1b52      	subs	r2, r2, r5
 8009d62:	f022 0203 	bic.w	r2, r2, #3
 8009d66:	3d03      	subs	r5, #3
 8009d68:	45ac      	cmp	ip, r5
 8009d6a:	bf38      	it	cc
 8009d6c:	2200      	movcc	r2, #0
 8009d6e:	4413      	add	r3, r2
 8009d70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d74:	b17a      	cbz	r2, 8009d96 <__mdiff+0x106>
 8009d76:	6107      	str	r7, [r0, #16]
 8009d78:	e7a4      	b.n	8009cc4 <__mdiff+0x34>
 8009d7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d7e:	fa11 f288 	uxtah	r2, r1, r8
 8009d82:	1414      	asrs	r4, r2, #16
 8009d84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d8e:	f84e 2b04 	str.w	r2, [lr], #4
 8009d92:	1421      	asrs	r1, r4, #16
 8009d94:	e7e0      	b.n	8009d58 <__mdiff+0xc8>
 8009d96:	3f01      	subs	r7, #1
 8009d98:	e7ea      	b.n	8009d70 <__mdiff+0xe0>
 8009d9a:	bf00      	nop
 8009d9c:	0800c0d5 	.word	0x0800c0d5
 8009da0:	0800c0e6 	.word	0x0800c0e6

08009da4 <__ulp>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	ed8d 0b00 	vstr	d0, [sp]
 8009daa:	9a01      	ldr	r2, [sp, #4]
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <__ulp+0x48>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dc08      	bgt.n	8009dca <__ulp+0x26>
 8009db8:	425b      	negs	r3, r3
 8009dba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009dbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009dc2:	da04      	bge.n	8009dce <__ulp+0x2a>
 8009dc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009dc8:	4113      	asrs	r3, r2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	e008      	b.n	8009de0 <__ulp+0x3c>
 8009dce:	f1a2 0314 	sub.w	r3, r2, #20
 8009dd2:	2b1e      	cmp	r3, #30
 8009dd4:	bfda      	itte	le
 8009dd6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009dda:	40da      	lsrle	r2, r3
 8009ddc:	2201      	movgt	r2, #1
 8009dde:	2300      	movs	r3, #0
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	ec41 0b10 	vmov	d0, r0, r1
 8009de8:	b002      	add	sp, #8
 8009dea:	4770      	bx	lr
 8009dec:	7ff00000 	.word	0x7ff00000

08009df0 <__b2d>:
 8009df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	6906      	ldr	r6, [r0, #16]
 8009df6:	f100 0814 	add.w	r8, r0, #20
 8009dfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009dfe:	1f37      	subs	r7, r6, #4
 8009e00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7ff fd53 	bl	80098b0 <__hi0bits>
 8009e0a:	f1c0 0320 	rsb	r3, r0, #32
 8009e0e:	280a      	cmp	r0, #10
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	491b      	ldr	r1, [pc, #108]	; (8009e80 <__b2d+0x90>)
 8009e14:	dc15      	bgt.n	8009e42 <__b2d+0x52>
 8009e16:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e1e:	45b8      	cmp	r8, r7
 8009e20:	ea43 0501 	orr.w	r5, r3, r1
 8009e24:	bf34      	ite	cc
 8009e26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e2a:	2300      	movcs	r3, #0
 8009e2c:	3015      	adds	r0, #21
 8009e2e:	fa02 f000 	lsl.w	r0, r2, r0
 8009e32:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e36:	4303      	orrs	r3, r0
 8009e38:	461c      	mov	r4, r3
 8009e3a:	ec45 4b10 	vmov	d0, r4, r5
 8009e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e42:	45b8      	cmp	r8, r7
 8009e44:	bf3a      	itte	cc
 8009e46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009e4e:	2300      	movcs	r3, #0
 8009e50:	380b      	subs	r0, #11
 8009e52:	d012      	beq.n	8009e7a <__b2d+0x8a>
 8009e54:	f1c0 0120 	rsb	r1, r0, #32
 8009e58:	fa23 f401 	lsr.w	r4, r3, r1
 8009e5c:	4082      	lsls	r2, r0
 8009e5e:	4322      	orrs	r2, r4
 8009e60:	4547      	cmp	r7, r8
 8009e62:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009e66:	bf8c      	ite	hi
 8009e68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009e6c:	2200      	movls	r2, #0
 8009e6e:	4083      	lsls	r3, r0
 8009e70:	40ca      	lsrs	r2, r1
 8009e72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e76:	4313      	orrs	r3, r2
 8009e78:	e7de      	b.n	8009e38 <__b2d+0x48>
 8009e7a:	ea42 0501 	orr.w	r5, r2, r1
 8009e7e:	e7db      	b.n	8009e38 <__b2d+0x48>
 8009e80:	3ff00000 	.word	0x3ff00000

08009e84 <__d2b>:
 8009e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e88:	460f      	mov	r7, r1
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	ec59 8b10 	vmov	r8, r9, d0
 8009e90:	4616      	mov	r6, r2
 8009e92:	f7ff fc1b 	bl	80096cc <_Balloc>
 8009e96:	4604      	mov	r4, r0
 8009e98:	b930      	cbnz	r0, 8009ea8 <__d2b+0x24>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <__d2b+0xac>)
 8009e9e:	4825      	ldr	r0, [pc, #148]	; (8009f34 <__d2b+0xb0>)
 8009ea0:	f240 310f 	movw	r1, #783	; 0x30f
 8009ea4:	f001 f9a0 	bl	800b1e8 <__assert_func>
 8009ea8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb0:	bb2d      	cbnz	r5, 8009efe <__d2b+0x7a>
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	f1b8 0300 	subs.w	r3, r8, #0
 8009eb8:	d026      	beq.n	8009f08 <__d2b+0x84>
 8009eba:	4668      	mov	r0, sp
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	f7ff fd17 	bl	80098f0 <__lo0bits>
 8009ec2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ec6:	b1e8      	cbz	r0, 8009f04 <__d2b+0x80>
 8009ec8:	f1c0 0320 	rsb	r3, r0, #32
 8009ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	40c2      	lsrs	r2, r0
 8009ed4:	6163      	str	r3, [r4, #20]
 8009ed6:	9201      	str	r2, [sp, #4]
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	61a3      	str	r3, [r4, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bf14      	ite	ne
 8009ee0:	2202      	movne	r2, #2
 8009ee2:	2201      	moveq	r2, #1
 8009ee4:	6122      	str	r2, [r4, #16]
 8009ee6:	b1bd      	cbz	r5, 8009f18 <__d2b+0x94>
 8009ee8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eec:	4405      	add	r5, r0
 8009eee:	603d      	str	r5, [r7, #0]
 8009ef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ef4:	6030      	str	r0, [r6, #0]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	b003      	add	sp, #12
 8009efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f02:	e7d6      	b.n	8009eb2 <__d2b+0x2e>
 8009f04:	6161      	str	r1, [r4, #20]
 8009f06:	e7e7      	b.n	8009ed8 <__d2b+0x54>
 8009f08:	a801      	add	r0, sp, #4
 8009f0a:	f7ff fcf1 	bl	80098f0 <__lo0bits>
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	6163      	str	r3, [r4, #20]
 8009f12:	3020      	adds	r0, #32
 8009f14:	2201      	movs	r2, #1
 8009f16:	e7e5      	b.n	8009ee4 <__d2b+0x60>
 8009f18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f20:	6038      	str	r0, [r7, #0]
 8009f22:	6918      	ldr	r0, [r3, #16]
 8009f24:	f7ff fcc4 	bl	80098b0 <__hi0bits>
 8009f28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f2c:	e7e2      	b.n	8009ef4 <__d2b+0x70>
 8009f2e:	bf00      	nop
 8009f30:	0800c0d5 	.word	0x0800c0d5
 8009f34:	0800c0e6 	.word	0x0800c0e6

08009f38 <__ratio>:
 8009f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	4688      	mov	r8, r1
 8009f3e:	4669      	mov	r1, sp
 8009f40:	4681      	mov	r9, r0
 8009f42:	f7ff ff55 	bl	8009df0 <__b2d>
 8009f46:	a901      	add	r1, sp, #4
 8009f48:	4640      	mov	r0, r8
 8009f4a:	ec55 4b10 	vmov	r4, r5, d0
 8009f4e:	f7ff ff4f 	bl	8009df0 <__b2d>
 8009f52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f5a:	eba3 0c02 	sub.w	ip, r3, r2
 8009f5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f62:	1a9b      	subs	r3, r3, r2
 8009f64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f68:	ec51 0b10 	vmov	r0, r1, d0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	bfd6      	itet	le
 8009f70:	460a      	movle	r2, r1
 8009f72:	462a      	movgt	r2, r5
 8009f74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f78:	468b      	mov	fp, r1
 8009f7a:	462f      	mov	r7, r5
 8009f7c:	bfd4      	ite	le
 8009f7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f86:	4620      	mov	r0, r4
 8009f88:	ee10 2a10 	vmov	r2, s0
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 fc64 	bl	800085c <__aeabi_ddiv>
 8009f94:	ec41 0b10 	vmov	d0, r0, r1
 8009f98:	b003      	add	sp, #12
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f9e <__copybits>:
 8009f9e:	3901      	subs	r1, #1
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	1149      	asrs	r1, r1, #5
 8009fa4:	6914      	ldr	r4, [r2, #16]
 8009fa6:	3101      	adds	r1, #1
 8009fa8:	f102 0314 	add.w	r3, r2, #20
 8009fac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fb4:	1f05      	subs	r5, r0, #4
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	d30c      	bcc.n	8009fd4 <__copybits+0x36>
 8009fba:	1aa3      	subs	r3, r4, r2
 8009fbc:	3b11      	subs	r3, #17
 8009fbe:	f023 0303 	bic.w	r3, r3, #3
 8009fc2:	3211      	adds	r2, #17
 8009fc4:	42a2      	cmp	r2, r4
 8009fc6:	bf88      	it	hi
 8009fc8:	2300      	movhi	r3, #0
 8009fca:	4418      	add	r0, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4288      	cmp	r0, r1
 8009fd0:	d305      	bcc.n	8009fde <__copybits+0x40>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009fd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009fdc:	e7eb      	b.n	8009fb6 <__copybits+0x18>
 8009fde:	f840 3b04 	str.w	r3, [r0], #4
 8009fe2:	e7f4      	b.n	8009fce <__copybits+0x30>

08009fe4 <__any_on>:
 8009fe4:	f100 0214 	add.w	r2, r0, #20
 8009fe8:	6900      	ldr	r0, [r0, #16]
 8009fea:	114b      	asrs	r3, r1, #5
 8009fec:	4298      	cmp	r0, r3
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	db11      	blt.n	800a016 <__any_on+0x32>
 8009ff2:	dd0a      	ble.n	800a00a <__any_on+0x26>
 8009ff4:	f011 011f 	ands.w	r1, r1, #31
 8009ff8:	d007      	beq.n	800a00a <__any_on+0x26>
 8009ffa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ffe:	fa24 f001 	lsr.w	r0, r4, r1
 800a002:	fa00 f101 	lsl.w	r1, r0, r1
 800a006:	428c      	cmp	r4, r1
 800a008:	d10b      	bne.n	800a022 <__any_on+0x3e>
 800a00a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a00e:	4293      	cmp	r3, r2
 800a010:	d803      	bhi.n	800a01a <__any_on+0x36>
 800a012:	2000      	movs	r0, #0
 800a014:	bd10      	pop	{r4, pc}
 800a016:	4603      	mov	r3, r0
 800a018:	e7f7      	b.n	800a00a <__any_on+0x26>
 800a01a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a01e:	2900      	cmp	r1, #0
 800a020:	d0f5      	beq.n	800a00e <__any_on+0x2a>
 800a022:	2001      	movs	r0, #1
 800a024:	e7f6      	b.n	800a014 <__any_on+0x30>

0800a026 <sulp>:
 800a026:	b570      	push	{r4, r5, r6, lr}
 800a028:	4604      	mov	r4, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	ec45 4b10 	vmov	d0, r4, r5
 800a030:	4616      	mov	r6, r2
 800a032:	f7ff feb7 	bl	8009da4 <__ulp>
 800a036:	ec51 0b10 	vmov	r0, r1, d0
 800a03a:	b17e      	cbz	r6, 800a05c <sulp+0x36>
 800a03c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd09      	ble.n	800a05c <sulp+0x36>
 800a048:	051b      	lsls	r3, r3, #20
 800a04a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a04e:	2400      	movs	r4, #0
 800a050:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a054:	4622      	mov	r2, r4
 800a056:	462b      	mov	r3, r5
 800a058:	f7f6 fad6 	bl	8000608 <__aeabi_dmul>
 800a05c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a060 <_strtod_l>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	ed2d 8b02 	vpush	{d8}
 800a068:	b09b      	sub	sp, #108	; 0x6c
 800a06a:	4604      	mov	r4, r0
 800a06c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a06e:	2200      	movs	r2, #0
 800a070:	9216      	str	r2, [sp, #88]	; 0x58
 800a072:	460d      	mov	r5, r1
 800a074:	f04f 0800 	mov.w	r8, #0
 800a078:	f04f 0900 	mov.w	r9, #0
 800a07c:	460a      	mov	r2, r1
 800a07e:	9215      	str	r2, [sp, #84]	; 0x54
 800a080:	7811      	ldrb	r1, [r2, #0]
 800a082:	292b      	cmp	r1, #43	; 0x2b
 800a084:	d04c      	beq.n	800a120 <_strtod_l+0xc0>
 800a086:	d83a      	bhi.n	800a0fe <_strtod_l+0x9e>
 800a088:	290d      	cmp	r1, #13
 800a08a:	d834      	bhi.n	800a0f6 <_strtod_l+0x96>
 800a08c:	2908      	cmp	r1, #8
 800a08e:	d834      	bhi.n	800a0fa <_strtod_l+0x9a>
 800a090:	2900      	cmp	r1, #0
 800a092:	d03d      	beq.n	800a110 <_strtod_l+0xb0>
 800a094:	2200      	movs	r2, #0
 800a096:	920a      	str	r2, [sp, #40]	; 0x28
 800a098:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a09a:	7832      	ldrb	r2, [r6, #0]
 800a09c:	2a30      	cmp	r2, #48	; 0x30
 800a09e:	f040 80b4 	bne.w	800a20a <_strtod_l+0x1aa>
 800a0a2:	7872      	ldrb	r2, [r6, #1]
 800a0a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a0a8:	2a58      	cmp	r2, #88	; 0x58
 800a0aa:	d170      	bne.n	800a18e <_strtod_l+0x12e>
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	ab16      	add	r3, sp, #88	; 0x58
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4a8e      	ldr	r2, [pc, #568]	; (800a2f0 <_strtod_l+0x290>)
 800a0b8:	ab17      	add	r3, sp, #92	; 0x5c
 800a0ba:	a915      	add	r1, sp, #84	; 0x54
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f001 f92f 	bl	800b320 <__gethex>
 800a0c2:	f010 070f 	ands.w	r7, r0, #15
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	d005      	beq.n	800a0d6 <_strtod_l+0x76>
 800a0ca:	2f06      	cmp	r7, #6
 800a0cc:	d12a      	bne.n	800a124 <_strtod_l+0xc4>
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9615      	str	r6, [sp, #84]	; 0x54
 800a0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 857f 	bne.w	800abdc <_strtod_l+0xb7c>
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	b1db      	cbz	r3, 800a11a <_strtod_l+0xba>
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0e8:	ec43 2b10 	vmov	d0, r2, r3
 800a0ec:	b01b      	add	sp, #108	; 0x6c
 800a0ee:	ecbd 8b02 	vpop	{d8}
 800a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f6:	2920      	cmp	r1, #32
 800a0f8:	d1cc      	bne.n	800a094 <_strtod_l+0x34>
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	e7bf      	b.n	800a07e <_strtod_l+0x1e>
 800a0fe:	292d      	cmp	r1, #45	; 0x2d
 800a100:	d1c8      	bne.n	800a094 <_strtod_l+0x34>
 800a102:	2101      	movs	r1, #1
 800a104:	910a      	str	r1, [sp, #40]	; 0x28
 800a106:	1c51      	adds	r1, r2, #1
 800a108:	9115      	str	r1, [sp, #84]	; 0x54
 800a10a:	7852      	ldrb	r2, [r2, #1]
 800a10c:	2a00      	cmp	r2, #0
 800a10e:	d1c3      	bne.n	800a098 <_strtod_l+0x38>
 800a110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a112:	9515      	str	r5, [sp, #84]	; 0x54
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 855f 	bne.w	800abd8 <_strtod_l+0xb78>
 800a11a:	4642      	mov	r2, r8
 800a11c:	464b      	mov	r3, r9
 800a11e:	e7e3      	b.n	800a0e8 <_strtod_l+0x88>
 800a120:	2100      	movs	r1, #0
 800a122:	e7ef      	b.n	800a104 <_strtod_l+0xa4>
 800a124:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a126:	b13a      	cbz	r2, 800a138 <_strtod_l+0xd8>
 800a128:	2135      	movs	r1, #53	; 0x35
 800a12a:	a818      	add	r0, sp, #96	; 0x60
 800a12c:	f7ff ff37 	bl	8009f9e <__copybits>
 800a130:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff fb0a 	bl	800974c <_Bfree>
 800a138:	3f01      	subs	r7, #1
 800a13a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a13c:	2f04      	cmp	r7, #4
 800a13e:	d806      	bhi.n	800a14e <_strtod_l+0xee>
 800a140:	e8df f007 	tbb	[pc, r7]
 800a144:	201d0314 	.word	0x201d0314
 800a148:	14          	.byte	0x14
 800a149:	00          	.byte	0x00
 800a14a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a14e:	05e9      	lsls	r1, r5, #23
 800a150:	bf48      	it	mi
 800a152:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a156:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a15a:	0d1b      	lsrs	r3, r3, #20
 800a15c:	051b      	lsls	r3, r3, #20
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1b9      	bne.n	800a0d6 <_strtod_l+0x76>
 800a162:	f7fe faf7 	bl	8008754 <__errno>
 800a166:	2322      	movs	r3, #34	; 0x22
 800a168:	6003      	str	r3, [r0, #0]
 800a16a:	e7b4      	b.n	800a0d6 <_strtod_l+0x76>
 800a16c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a170:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a174:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a178:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a17c:	e7e7      	b.n	800a14e <_strtod_l+0xee>
 800a17e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a2f8 <_strtod_l+0x298>
 800a182:	e7e4      	b.n	800a14e <_strtod_l+0xee>
 800a184:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a188:	f04f 38ff 	mov.w	r8, #4294967295
 800a18c:	e7df      	b.n	800a14e <_strtod_l+0xee>
 800a18e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	9215      	str	r2, [sp, #84]	; 0x54
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b30      	cmp	r3, #48	; 0x30
 800a198:	d0f9      	beq.n	800a18e <_strtod_l+0x12e>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d09b      	beq.n	800a0d6 <_strtod_l+0x76>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f04f 0a00 	mov.w	sl, #0
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a1ae:	46d3      	mov	fp, sl
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a1b4:	7806      	ldrb	r6, [r0, #0]
 800a1b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a1ba:	b2d9      	uxtb	r1, r3
 800a1bc:	2909      	cmp	r1, #9
 800a1be:	d926      	bls.n	800a20e <_strtod_l+0x1ae>
 800a1c0:	494c      	ldr	r1, [pc, #304]	; (800a2f4 <_strtod_l+0x294>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f000 ffe6 	bl	800b194 <strncmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d030      	beq.n	800a22e <_strtod_l+0x1ce>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	9005      	str	r0, [sp, #20]
 800a1d2:	465e      	mov	r6, fp
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2a65      	cmp	r2, #101	; 0x65
 800a1d8:	d001      	beq.n	800a1de <_strtod_l+0x17e>
 800a1da:	2a45      	cmp	r2, #69	; 0x45
 800a1dc:	d113      	bne.n	800a206 <_strtod_l+0x1a6>
 800a1de:	b91e      	cbnz	r6, 800a1e8 <_strtod_l+0x188>
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	4302      	orrs	r2, r0
 800a1e4:	d094      	beq.n	800a110 <_strtod_l+0xb0>
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a1ea:	1c6a      	adds	r2, r5, #1
 800a1ec:	9215      	str	r2, [sp, #84]	; 0x54
 800a1ee:	786a      	ldrb	r2, [r5, #1]
 800a1f0:	2a2b      	cmp	r2, #43	; 0x2b
 800a1f2:	d074      	beq.n	800a2de <_strtod_l+0x27e>
 800a1f4:	2a2d      	cmp	r2, #45	; 0x2d
 800a1f6:	d078      	beq.n	800a2ea <_strtod_l+0x28a>
 800a1f8:	f04f 0c00 	mov.w	ip, #0
 800a1fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a200:	2909      	cmp	r1, #9
 800a202:	d97f      	bls.n	800a304 <_strtod_l+0x2a4>
 800a204:	9515      	str	r5, [sp, #84]	; 0x54
 800a206:	2700      	movs	r7, #0
 800a208:	e09e      	b.n	800a348 <_strtod_l+0x2e8>
 800a20a:	2300      	movs	r3, #0
 800a20c:	e7c8      	b.n	800a1a0 <_strtod_l+0x140>
 800a20e:	f1bb 0f08 	cmp.w	fp, #8
 800a212:	bfd8      	it	le
 800a214:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a216:	f100 0001 	add.w	r0, r0, #1
 800a21a:	bfda      	itte	le
 800a21c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a220:	9309      	strle	r3, [sp, #36]	; 0x24
 800a222:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a226:	f10b 0b01 	add.w	fp, fp, #1
 800a22a:	9015      	str	r0, [sp, #84]	; 0x54
 800a22c:	e7c1      	b.n	800a1b2 <_strtod_l+0x152>
 800a22e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	9215      	str	r2, [sp, #84]	; 0x54
 800a234:	785a      	ldrb	r2, [r3, #1]
 800a236:	f1bb 0f00 	cmp.w	fp, #0
 800a23a:	d037      	beq.n	800a2ac <_strtod_l+0x24c>
 800a23c:	9005      	str	r0, [sp, #20]
 800a23e:	465e      	mov	r6, fp
 800a240:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a244:	2b09      	cmp	r3, #9
 800a246:	d912      	bls.n	800a26e <_strtod_l+0x20e>
 800a248:	2301      	movs	r3, #1
 800a24a:	e7c4      	b.n	800a1d6 <_strtod_l+0x176>
 800a24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	9215      	str	r2, [sp, #84]	; 0x54
 800a252:	785a      	ldrb	r2, [r3, #1]
 800a254:	3001      	adds	r0, #1
 800a256:	2a30      	cmp	r2, #48	; 0x30
 800a258:	d0f8      	beq.n	800a24c <_strtod_l+0x1ec>
 800a25a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a25e:	2b08      	cmp	r3, #8
 800a260:	f200 84c1 	bhi.w	800abe6 <_strtod_l+0xb86>
 800a264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a266:	9005      	str	r0, [sp, #20]
 800a268:	2000      	movs	r0, #0
 800a26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a26c:	4606      	mov	r6, r0
 800a26e:	3a30      	subs	r2, #48	; 0x30
 800a270:	f100 0301 	add.w	r3, r0, #1
 800a274:	d014      	beq.n	800a2a0 <_strtod_l+0x240>
 800a276:	9905      	ldr	r1, [sp, #20]
 800a278:	4419      	add	r1, r3
 800a27a:	9105      	str	r1, [sp, #20]
 800a27c:	4633      	mov	r3, r6
 800a27e:	eb00 0c06 	add.w	ip, r0, r6
 800a282:	210a      	movs	r1, #10
 800a284:	4563      	cmp	r3, ip
 800a286:	d113      	bne.n	800a2b0 <_strtod_l+0x250>
 800a288:	1833      	adds	r3, r6, r0
 800a28a:	2b08      	cmp	r3, #8
 800a28c:	f106 0601 	add.w	r6, r6, #1
 800a290:	4406      	add	r6, r0
 800a292:	dc1a      	bgt.n	800a2ca <_strtod_l+0x26a>
 800a294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a296:	230a      	movs	r3, #10
 800a298:	fb03 2301 	mla	r3, r3, r1, r2
 800a29c:	9309      	str	r3, [sp, #36]	; 0x24
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a2a2:	1c51      	adds	r1, r2, #1
 800a2a4:	9115      	str	r1, [sp, #84]	; 0x54
 800a2a6:	7852      	ldrb	r2, [r2, #1]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	e7c9      	b.n	800a240 <_strtod_l+0x1e0>
 800a2ac:	4658      	mov	r0, fp
 800a2ae:	e7d2      	b.n	800a256 <_strtod_l+0x1f6>
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	f103 0301 	add.w	r3, r3, #1
 800a2b6:	dc03      	bgt.n	800a2c0 <_strtod_l+0x260>
 800a2b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2ba:	434f      	muls	r7, r1
 800a2bc:	9709      	str	r7, [sp, #36]	; 0x24
 800a2be:	e7e1      	b.n	800a284 <_strtod_l+0x224>
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	bfd8      	it	le
 800a2c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a2c8:	e7dc      	b.n	800a284 <_strtod_l+0x224>
 800a2ca:	2e10      	cmp	r6, #16
 800a2cc:	bfdc      	itt	le
 800a2ce:	230a      	movle	r3, #10
 800a2d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a2d4:	e7e3      	b.n	800a29e <_strtod_l+0x23e>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e780      	b.n	800a1e0 <_strtod_l+0x180>
 800a2de:	f04f 0c00 	mov.w	ip, #0
 800a2e2:	1caa      	adds	r2, r5, #2
 800a2e4:	9215      	str	r2, [sp, #84]	; 0x54
 800a2e6:	78aa      	ldrb	r2, [r5, #2]
 800a2e8:	e788      	b.n	800a1fc <_strtod_l+0x19c>
 800a2ea:	f04f 0c01 	mov.w	ip, #1
 800a2ee:	e7f8      	b.n	800a2e2 <_strtod_l+0x282>
 800a2f0:	0800c240 	.word	0x0800c240
 800a2f4:	0800c23c 	.word	0x0800c23c
 800a2f8:	7ff00000 	.word	0x7ff00000
 800a2fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a2fe:	1c51      	adds	r1, r2, #1
 800a300:	9115      	str	r1, [sp, #84]	; 0x54
 800a302:	7852      	ldrb	r2, [r2, #1]
 800a304:	2a30      	cmp	r2, #48	; 0x30
 800a306:	d0f9      	beq.n	800a2fc <_strtod_l+0x29c>
 800a308:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a30c:	2908      	cmp	r1, #8
 800a30e:	f63f af7a 	bhi.w	800a206 <_strtod_l+0x1a6>
 800a312:	3a30      	subs	r2, #48	; 0x30
 800a314:	9208      	str	r2, [sp, #32]
 800a316:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a318:	920c      	str	r2, [sp, #48]	; 0x30
 800a31a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a31c:	1c57      	adds	r7, r2, #1
 800a31e:	9715      	str	r7, [sp, #84]	; 0x54
 800a320:	7852      	ldrb	r2, [r2, #1]
 800a322:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a326:	f1be 0f09 	cmp.w	lr, #9
 800a32a:	d938      	bls.n	800a39e <_strtod_l+0x33e>
 800a32c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a32e:	1a7f      	subs	r7, r7, r1
 800a330:	2f08      	cmp	r7, #8
 800a332:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a336:	dc03      	bgt.n	800a340 <_strtod_l+0x2e0>
 800a338:	9908      	ldr	r1, [sp, #32]
 800a33a:	428f      	cmp	r7, r1
 800a33c:	bfa8      	it	ge
 800a33e:	460f      	movge	r7, r1
 800a340:	f1bc 0f00 	cmp.w	ip, #0
 800a344:	d000      	beq.n	800a348 <_strtod_l+0x2e8>
 800a346:	427f      	negs	r7, r7
 800a348:	2e00      	cmp	r6, #0
 800a34a:	d14f      	bne.n	800a3ec <_strtod_l+0x38c>
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	4301      	orrs	r1, r0
 800a350:	f47f aec1 	bne.w	800a0d6 <_strtod_l+0x76>
 800a354:	2b00      	cmp	r3, #0
 800a356:	f47f aedb 	bne.w	800a110 <_strtod_l+0xb0>
 800a35a:	2a69      	cmp	r2, #105	; 0x69
 800a35c:	d029      	beq.n	800a3b2 <_strtod_l+0x352>
 800a35e:	dc26      	bgt.n	800a3ae <_strtod_l+0x34e>
 800a360:	2a49      	cmp	r2, #73	; 0x49
 800a362:	d026      	beq.n	800a3b2 <_strtod_l+0x352>
 800a364:	2a4e      	cmp	r2, #78	; 0x4e
 800a366:	f47f aed3 	bne.w	800a110 <_strtod_l+0xb0>
 800a36a:	499b      	ldr	r1, [pc, #620]	; (800a5d8 <_strtod_l+0x578>)
 800a36c:	a815      	add	r0, sp, #84	; 0x54
 800a36e:	f001 fa17 	bl	800b7a0 <__match>
 800a372:	2800      	cmp	r0, #0
 800a374:	f43f aecc 	beq.w	800a110 <_strtod_l+0xb0>
 800a378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2b28      	cmp	r3, #40	; 0x28
 800a37e:	d12f      	bne.n	800a3e0 <_strtod_l+0x380>
 800a380:	4996      	ldr	r1, [pc, #600]	; (800a5dc <_strtod_l+0x57c>)
 800a382:	aa18      	add	r2, sp, #96	; 0x60
 800a384:	a815      	add	r0, sp, #84	; 0x54
 800a386:	f001 fa1f 	bl	800b7c8 <__hexnan>
 800a38a:	2805      	cmp	r0, #5
 800a38c:	d128      	bne.n	800a3e0 <_strtod_l+0x380>
 800a38e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a394:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a398:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a39c:	e69b      	b.n	800a0d6 <_strtod_l+0x76>
 800a39e:	9f08      	ldr	r7, [sp, #32]
 800a3a0:	210a      	movs	r1, #10
 800a3a2:	fb01 2107 	mla	r1, r1, r7, r2
 800a3a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a3aa:	9208      	str	r2, [sp, #32]
 800a3ac:	e7b5      	b.n	800a31a <_strtod_l+0x2ba>
 800a3ae:	2a6e      	cmp	r2, #110	; 0x6e
 800a3b0:	e7d9      	b.n	800a366 <_strtod_l+0x306>
 800a3b2:	498b      	ldr	r1, [pc, #556]	; (800a5e0 <_strtod_l+0x580>)
 800a3b4:	a815      	add	r0, sp, #84	; 0x54
 800a3b6:	f001 f9f3 	bl	800b7a0 <__match>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f43f aea8 	beq.w	800a110 <_strtod_l+0xb0>
 800a3c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3c2:	4988      	ldr	r1, [pc, #544]	; (800a5e4 <_strtod_l+0x584>)
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	a815      	add	r0, sp, #84	; 0x54
 800a3c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a3ca:	f001 f9e9 	bl	800b7a0 <__match>
 800a3ce:	b910      	cbnz	r0, 800a3d6 <_strtod_l+0x376>
 800a3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	9315      	str	r3, [sp, #84]	; 0x54
 800a3d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a5f4 <_strtod_l+0x594>
 800a3da:	f04f 0800 	mov.w	r8, #0
 800a3de:	e67a      	b.n	800a0d6 <_strtod_l+0x76>
 800a3e0:	4881      	ldr	r0, [pc, #516]	; (800a5e8 <_strtod_l+0x588>)
 800a3e2:	f000 fef9 	bl	800b1d8 <nan>
 800a3e6:	ec59 8b10 	vmov	r8, r9, d0
 800a3ea:	e674      	b.n	800a0d6 <_strtod_l+0x76>
 800a3ec:	9b05      	ldr	r3, [sp, #20]
 800a3ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f0:	1afb      	subs	r3, r7, r3
 800a3f2:	f1bb 0f00 	cmp.w	fp, #0
 800a3f6:	bf08      	it	eq
 800a3f8:	46b3      	moveq	fp, r6
 800a3fa:	2e10      	cmp	r6, #16
 800a3fc:	9308      	str	r3, [sp, #32]
 800a3fe:	4635      	mov	r5, r6
 800a400:	bfa8      	it	ge
 800a402:	2510      	movge	r5, #16
 800a404:	f7f6 f886 	bl	8000514 <__aeabi_ui2d>
 800a408:	2e09      	cmp	r6, #9
 800a40a:	4680      	mov	r8, r0
 800a40c:	4689      	mov	r9, r1
 800a40e:	dd13      	ble.n	800a438 <_strtod_l+0x3d8>
 800a410:	4b76      	ldr	r3, [pc, #472]	; (800a5ec <_strtod_l+0x58c>)
 800a412:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a416:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a41a:	f7f6 f8f5 	bl	8000608 <__aeabi_dmul>
 800a41e:	4680      	mov	r8, r0
 800a420:	4650      	mov	r0, sl
 800a422:	4689      	mov	r9, r1
 800a424:	f7f6 f876 	bl	8000514 <__aeabi_ui2d>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f5 ff34 	bl	800029c <__adddf3>
 800a434:	4680      	mov	r8, r0
 800a436:	4689      	mov	r9, r1
 800a438:	2e0f      	cmp	r6, #15
 800a43a:	dc38      	bgt.n	800a4ae <_strtod_l+0x44e>
 800a43c:	9b08      	ldr	r3, [sp, #32]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f43f ae49 	beq.w	800a0d6 <_strtod_l+0x76>
 800a444:	dd24      	ble.n	800a490 <_strtod_l+0x430>
 800a446:	2b16      	cmp	r3, #22
 800a448:	dc0b      	bgt.n	800a462 <_strtod_l+0x402>
 800a44a:	4968      	ldr	r1, [pc, #416]	; (800a5ec <_strtod_l+0x58c>)
 800a44c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a454:	4642      	mov	r2, r8
 800a456:	464b      	mov	r3, r9
 800a458:	f7f6 f8d6 	bl	8000608 <__aeabi_dmul>
 800a45c:	4680      	mov	r8, r0
 800a45e:	4689      	mov	r9, r1
 800a460:	e639      	b.n	800a0d6 <_strtod_l+0x76>
 800a462:	9a08      	ldr	r2, [sp, #32]
 800a464:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a468:	4293      	cmp	r3, r2
 800a46a:	db20      	blt.n	800a4ae <_strtod_l+0x44e>
 800a46c:	4c5f      	ldr	r4, [pc, #380]	; (800a5ec <_strtod_l+0x58c>)
 800a46e:	f1c6 060f 	rsb	r6, r6, #15
 800a472:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a476:	4642      	mov	r2, r8
 800a478:	464b      	mov	r3, r9
 800a47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47e:	f7f6 f8c3 	bl	8000608 <__aeabi_dmul>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	1b9e      	subs	r6, r3, r6
 800a486:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a48a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a48e:	e7e3      	b.n	800a458 <_strtod_l+0x3f8>
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	3316      	adds	r3, #22
 800a494:	db0b      	blt.n	800a4ae <_strtod_l+0x44e>
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	1bdf      	subs	r7, r3, r7
 800a49a:	4b54      	ldr	r3, [pc, #336]	; (800a5ec <_strtod_l+0x58c>)
 800a49c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f6 f9d8 	bl	800085c <__aeabi_ddiv>
 800a4ac:	e7d6      	b.n	800a45c <_strtod_l+0x3fc>
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	1b75      	subs	r5, r6, r5
 800a4b2:	441d      	add	r5, r3
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	dd70      	ble.n	800a59a <_strtod_l+0x53a>
 800a4b8:	f015 030f 	ands.w	r3, r5, #15
 800a4bc:	d00a      	beq.n	800a4d4 <_strtod_l+0x474>
 800a4be:	494b      	ldr	r1, [pc, #300]	; (800a5ec <_strtod_l+0x58c>)
 800a4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	4689      	mov	r9, r1
 800a4d4:	f035 050f 	bics.w	r5, r5, #15
 800a4d8:	d04d      	beq.n	800a576 <_strtod_l+0x516>
 800a4da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a4de:	dd22      	ble.n	800a526 <_strtod_l+0x4c6>
 800a4e0:	2500      	movs	r5, #0
 800a4e2:	46ab      	mov	fp, r5
 800a4e4:	9509      	str	r5, [sp, #36]	; 0x24
 800a4e6:	9505      	str	r5, [sp, #20]
 800a4e8:	2322      	movs	r3, #34	; 0x22
 800a4ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a5f4 <_strtod_l+0x594>
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	f04f 0800 	mov.w	r8, #0
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f43f aded 	beq.w	800a0d6 <_strtod_l+0x76>
 800a4fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7ff f924 	bl	800974c <_Bfree>
 800a504:	9905      	ldr	r1, [sp, #20]
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff f920 	bl	800974c <_Bfree>
 800a50c:	4659      	mov	r1, fp
 800a50e:	4620      	mov	r0, r4
 800a510:	f7ff f91c 	bl	800974c <_Bfree>
 800a514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff f918 	bl	800974c <_Bfree>
 800a51c:	4629      	mov	r1, r5
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff f914 	bl	800974c <_Bfree>
 800a524:	e5d7      	b.n	800a0d6 <_strtod_l+0x76>
 800a526:	4b32      	ldr	r3, [pc, #200]	; (800a5f0 <_strtod_l+0x590>)
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	2300      	movs	r3, #0
 800a52c:	112d      	asrs	r5, r5, #4
 800a52e:	4640      	mov	r0, r8
 800a530:	4649      	mov	r1, r9
 800a532:	469a      	mov	sl, r3
 800a534:	2d01      	cmp	r5, #1
 800a536:	dc21      	bgt.n	800a57c <_strtod_l+0x51c>
 800a538:	b10b      	cbz	r3, 800a53e <_strtod_l+0x4de>
 800a53a:	4680      	mov	r8, r0
 800a53c:	4689      	mov	r9, r1
 800a53e:	492c      	ldr	r1, [pc, #176]	; (800a5f0 <_strtod_l+0x590>)
 800a540:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a544:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a548:	4642      	mov	r2, r8
 800a54a:	464b      	mov	r3, r9
 800a54c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a550:	f7f6 f85a 	bl	8000608 <__aeabi_dmul>
 800a554:	4b27      	ldr	r3, [pc, #156]	; (800a5f4 <_strtod_l+0x594>)
 800a556:	460a      	mov	r2, r1
 800a558:	400b      	ands	r3, r1
 800a55a:	4927      	ldr	r1, [pc, #156]	; (800a5f8 <_strtod_l+0x598>)
 800a55c:	428b      	cmp	r3, r1
 800a55e:	4680      	mov	r8, r0
 800a560:	d8be      	bhi.n	800a4e0 <_strtod_l+0x480>
 800a562:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a566:	428b      	cmp	r3, r1
 800a568:	bf86      	itte	hi
 800a56a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a5fc <_strtod_l+0x59c>
 800a56e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a572:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a576:	2300      	movs	r3, #0
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	e07b      	b.n	800a674 <_strtod_l+0x614>
 800a57c:	07ea      	lsls	r2, r5, #31
 800a57e:	d505      	bpl.n	800a58c <_strtod_l+0x52c>
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f6 f83f 	bl	8000608 <__aeabi_dmul>
 800a58a:	2301      	movs	r3, #1
 800a58c:	9a04      	ldr	r2, [sp, #16]
 800a58e:	3208      	adds	r2, #8
 800a590:	f10a 0a01 	add.w	sl, sl, #1
 800a594:	106d      	asrs	r5, r5, #1
 800a596:	9204      	str	r2, [sp, #16]
 800a598:	e7cc      	b.n	800a534 <_strtod_l+0x4d4>
 800a59a:	d0ec      	beq.n	800a576 <_strtod_l+0x516>
 800a59c:	426d      	negs	r5, r5
 800a59e:	f015 020f 	ands.w	r2, r5, #15
 800a5a2:	d00a      	beq.n	800a5ba <_strtod_l+0x55a>
 800a5a4:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <_strtod_l+0x58c>)
 800a5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f6 f953 	bl	800085c <__aeabi_ddiv>
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4689      	mov	r9, r1
 800a5ba:	112d      	asrs	r5, r5, #4
 800a5bc:	d0db      	beq.n	800a576 <_strtod_l+0x516>
 800a5be:	2d1f      	cmp	r5, #31
 800a5c0:	dd1e      	ble.n	800a600 <_strtod_l+0x5a0>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	46ab      	mov	fp, r5
 800a5c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a5c8:	9505      	str	r5, [sp, #20]
 800a5ca:	2322      	movs	r3, #34	; 0x22
 800a5cc:	f04f 0800 	mov.w	r8, #0
 800a5d0:	f04f 0900 	mov.w	r9, #0
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	e78d      	b.n	800a4f4 <_strtod_l+0x494>
 800a5d8:	0800c02d 	.word	0x0800c02d
 800a5dc:	0800c254 	.word	0x0800c254
 800a5e0:	0800c025 	.word	0x0800c025
 800a5e4:	0800c05c 	.word	0x0800c05c
 800a5e8:	0800c3e5 	.word	0x0800c3e5
 800a5ec:	0800c168 	.word	0x0800c168
 800a5f0:	0800c140 	.word	0x0800c140
 800a5f4:	7ff00000 	.word	0x7ff00000
 800a5f8:	7ca00000 	.word	0x7ca00000
 800a5fc:	7fefffff 	.word	0x7fefffff
 800a600:	f015 0310 	ands.w	r3, r5, #16
 800a604:	bf18      	it	ne
 800a606:	236a      	movne	r3, #106	; 0x6a
 800a608:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a9ac <_strtod_l+0x94c>
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	4640      	mov	r0, r8
 800a610:	4649      	mov	r1, r9
 800a612:	2300      	movs	r3, #0
 800a614:	07ea      	lsls	r2, r5, #31
 800a616:	d504      	bpl.n	800a622 <_strtod_l+0x5c2>
 800a618:	e9da 2300 	ldrd	r2, r3, [sl]
 800a61c:	f7f5 fff4 	bl	8000608 <__aeabi_dmul>
 800a620:	2301      	movs	r3, #1
 800a622:	106d      	asrs	r5, r5, #1
 800a624:	f10a 0a08 	add.w	sl, sl, #8
 800a628:	d1f4      	bne.n	800a614 <_strtod_l+0x5b4>
 800a62a:	b10b      	cbz	r3, 800a630 <_strtod_l+0x5d0>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	9b04      	ldr	r3, [sp, #16]
 800a632:	b1bb      	cbz	r3, 800a664 <_strtod_l+0x604>
 800a634:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a638:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	4649      	mov	r1, r9
 800a640:	dd10      	ble.n	800a664 <_strtod_l+0x604>
 800a642:	2b1f      	cmp	r3, #31
 800a644:	f340 811e 	ble.w	800a884 <_strtod_l+0x824>
 800a648:	2b34      	cmp	r3, #52	; 0x34
 800a64a:	bfde      	ittt	le
 800a64c:	f04f 33ff 	movle.w	r3, #4294967295
 800a650:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a654:	4093      	lslle	r3, r2
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	bfcc      	ite	gt
 800a65c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a660:	ea03 0901 	andle.w	r9, r3, r1
 800a664:	2200      	movs	r2, #0
 800a666:	2300      	movs	r3, #0
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f6 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 800a670:	2800      	cmp	r0, #0
 800a672:	d1a6      	bne.n	800a5c2 <_strtod_l+0x562>
 800a674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a67a:	4633      	mov	r3, r6
 800a67c:	465a      	mov	r2, fp
 800a67e:	4620      	mov	r0, r4
 800a680:	f7ff f8cc 	bl	800981c <__s2b>
 800a684:	9009      	str	r0, [sp, #36]	; 0x24
 800a686:	2800      	cmp	r0, #0
 800a688:	f43f af2a 	beq.w	800a4e0 <_strtod_l+0x480>
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	9b05      	ldr	r3, [sp, #20]
 800a690:	2a00      	cmp	r2, #0
 800a692:	eba3 0307 	sub.w	r3, r3, r7
 800a696:	bfa8      	it	ge
 800a698:	2300      	movge	r3, #0
 800a69a:	930c      	str	r3, [sp, #48]	; 0x30
 800a69c:	2500      	movs	r5, #0
 800a69e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a6a4:	46ab      	mov	fp, r5
 800a6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	6859      	ldr	r1, [r3, #4]
 800a6ac:	f7ff f80e 	bl	80096cc <_Balloc>
 800a6b0:	9005      	str	r0, [sp, #20]
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f af18 	beq.w	800a4e8 <_strtod_l+0x488>
 800a6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ba:	691a      	ldr	r2, [r3, #16]
 800a6bc:	3202      	adds	r2, #2
 800a6be:	f103 010c 	add.w	r1, r3, #12
 800a6c2:	0092      	lsls	r2, r2, #2
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	f7fe f872 	bl	80087ae <memcpy>
 800a6ca:	ec49 8b10 	vmov	d0, r8, r9
 800a6ce:	aa18      	add	r2, sp, #96	; 0x60
 800a6d0:	a917      	add	r1, sp, #92	; 0x5c
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff fbd6 	bl	8009e84 <__d2b>
 800a6d8:	ec49 8b18 	vmov	d8, r8, r9
 800a6dc:	9016      	str	r0, [sp, #88]	; 0x58
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f af02 	beq.w	800a4e8 <_strtod_l+0x488>
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff f930 	bl	800994c <__i2b>
 800a6ec:	4683      	mov	fp, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f aefa 	beq.w	800a4e8 <_strtod_l+0x488>
 800a6f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a6f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	bfab      	itete	ge
 800a6fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a6fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a700:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a702:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a706:	bfac      	ite	ge
 800a708:	eb06 0a03 	addge.w	sl, r6, r3
 800a70c:	1b9f      	sublt	r7, r3, r6
 800a70e:	9b04      	ldr	r3, [sp, #16]
 800a710:	1af6      	subs	r6, r6, r3
 800a712:	4416      	add	r6, r2
 800a714:	4ba0      	ldr	r3, [pc, #640]	; (800a998 <_strtod_l+0x938>)
 800a716:	3e01      	subs	r6, #1
 800a718:	429e      	cmp	r6, r3
 800a71a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a71e:	f280 80c4 	bge.w	800a8aa <_strtod_l+0x84a>
 800a722:	1b9b      	subs	r3, r3, r6
 800a724:	2b1f      	cmp	r3, #31
 800a726:	eba2 0203 	sub.w	r2, r2, r3
 800a72a:	f04f 0101 	mov.w	r1, #1
 800a72e:	f300 80b0 	bgt.w	800a892 <_strtod_l+0x832>
 800a732:	fa01 f303 	lsl.w	r3, r1, r3
 800a736:	930e      	str	r3, [sp, #56]	; 0x38
 800a738:	2300      	movs	r3, #0
 800a73a:	930d      	str	r3, [sp, #52]	; 0x34
 800a73c:	eb0a 0602 	add.w	r6, sl, r2
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	45b2      	cmp	sl, r6
 800a744:	4417      	add	r7, r2
 800a746:	441f      	add	r7, r3
 800a748:	4653      	mov	r3, sl
 800a74a:	bfa8      	it	ge
 800a74c:	4633      	movge	r3, r6
 800a74e:	42bb      	cmp	r3, r7
 800a750:	bfa8      	it	ge
 800a752:	463b      	movge	r3, r7
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfc2      	ittt	gt
 800a758:	1af6      	subgt	r6, r6, r3
 800a75a:	1aff      	subgt	r7, r7, r3
 800a75c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	dd17      	ble.n	800a796 <_strtod_l+0x736>
 800a766:	4659      	mov	r1, fp
 800a768:	461a      	mov	r2, r3
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff f9ae 	bl	8009acc <__pow5mult>
 800a770:	4683      	mov	fp, r0
 800a772:	2800      	cmp	r0, #0
 800a774:	f43f aeb8 	beq.w	800a4e8 <_strtod_l+0x488>
 800a778:	4601      	mov	r1, r0
 800a77a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7ff f8fb 	bl	8009978 <__multiply>
 800a782:	900b      	str	r0, [sp, #44]	; 0x2c
 800a784:	2800      	cmp	r0, #0
 800a786:	f43f aeaf 	beq.w	800a4e8 <_strtod_l+0x488>
 800a78a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a78c:	4620      	mov	r0, r4
 800a78e:	f7fe ffdd 	bl	800974c <_Bfree>
 800a792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a794:	9316      	str	r3, [sp, #88]	; 0x58
 800a796:	2e00      	cmp	r6, #0
 800a798:	f300 808c 	bgt.w	800a8b4 <_strtod_l+0x854>
 800a79c:	9b08      	ldr	r3, [sp, #32]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd08      	ble.n	800a7b4 <_strtod_l+0x754>
 800a7a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7a4:	9905      	ldr	r1, [sp, #20]
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7ff f990 	bl	8009acc <__pow5mult>
 800a7ac:	9005      	str	r0, [sp, #20]
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f ae9a 	beq.w	800a4e8 <_strtod_l+0x488>
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	dd08      	ble.n	800a7ca <_strtod_l+0x76a>
 800a7b8:	9905      	ldr	r1, [sp, #20]
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7ff f9df 	bl	8009b80 <__lshift>
 800a7c2:	9005      	str	r0, [sp, #20]
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f43f ae8f 	beq.w	800a4e8 <_strtod_l+0x488>
 800a7ca:	f1ba 0f00 	cmp.w	sl, #0
 800a7ce:	dd08      	ble.n	800a7e2 <_strtod_l+0x782>
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff f9d3 	bl	8009b80 <__lshift>
 800a7da:	4683      	mov	fp, r0
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f43f ae83 	beq.w	800a4e8 <_strtod_l+0x488>
 800a7e2:	9a05      	ldr	r2, [sp, #20]
 800a7e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff fa52 	bl	8009c90 <__mdiff>
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f43f ae7a 	beq.w	800a4e8 <_strtod_l+0x488>
 800a7f4:	68c3      	ldr	r3, [r0, #12]
 800a7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60c3      	str	r3, [r0, #12]
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	f7ff fa2b 	bl	8009c58 <__mcmp>
 800a802:	2800      	cmp	r0, #0
 800a804:	da60      	bge.n	800a8c8 <_strtod_l+0x868>
 800a806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a808:	ea53 0308 	orrs.w	r3, r3, r8
 800a80c:	f040 8084 	bne.w	800a918 <_strtod_l+0x8b8>
 800a810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a814:	2b00      	cmp	r3, #0
 800a816:	d17f      	bne.n	800a918 <_strtod_l+0x8b8>
 800a818:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a81c:	0d1b      	lsrs	r3, r3, #20
 800a81e:	051b      	lsls	r3, r3, #20
 800a820:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a824:	d978      	bls.n	800a918 <_strtod_l+0x8b8>
 800a826:	696b      	ldr	r3, [r5, #20]
 800a828:	b913      	cbnz	r3, 800a830 <_strtod_l+0x7d0>
 800a82a:	692b      	ldr	r3, [r5, #16]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	dd73      	ble.n	800a918 <_strtod_l+0x8b8>
 800a830:	4629      	mov	r1, r5
 800a832:	2201      	movs	r2, #1
 800a834:	4620      	mov	r0, r4
 800a836:	f7ff f9a3 	bl	8009b80 <__lshift>
 800a83a:	4659      	mov	r1, fp
 800a83c:	4605      	mov	r5, r0
 800a83e:	f7ff fa0b 	bl	8009c58 <__mcmp>
 800a842:	2800      	cmp	r0, #0
 800a844:	dd68      	ble.n	800a918 <_strtod_l+0x8b8>
 800a846:	9904      	ldr	r1, [sp, #16]
 800a848:	4a54      	ldr	r2, [pc, #336]	; (800a99c <_strtod_l+0x93c>)
 800a84a:	464b      	mov	r3, r9
 800a84c:	2900      	cmp	r1, #0
 800a84e:	f000 8084 	beq.w	800a95a <_strtod_l+0x8fa>
 800a852:	ea02 0109 	and.w	r1, r2, r9
 800a856:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a85a:	dc7e      	bgt.n	800a95a <_strtod_l+0x8fa>
 800a85c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a860:	f77f aeb3 	ble.w	800a5ca <_strtod_l+0x56a>
 800a864:	4b4e      	ldr	r3, [pc, #312]	; (800a9a0 <_strtod_l+0x940>)
 800a866:	4640      	mov	r0, r8
 800a868:	4649      	mov	r1, r9
 800a86a:	2200      	movs	r2, #0
 800a86c:	f7f5 fecc 	bl	8000608 <__aeabi_dmul>
 800a870:	4b4a      	ldr	r3, [pc, #296]	; (800a99c <_strtod_l+0x93c>)
 800a872:	400b      	ands	r3, r1
 800a874:	4680      	mov	r8, r0
 800a876:	4689      	mov	r9, r1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f47f ae3f 	bne.w	800a4fc <_strtod_l+0x49c>
 800a87e:	2322      	movs	r3, #34	; 0x22
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	e63b      	b.n	800a4fc <_strtod_l+0x49c>
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	fa02 f303 	lsl.w	r3, r2, r3
 800a88c:	ea03 0808 	and.w	r8, r3, r8
 800a890:	e6e8      	b.n	800a664 <_strtod_l+0x604>
 800a892:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a896:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a89a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a89e:	36e2      	adds	r6, #226	; 0xe2
 800a8a0:	fa01 f306 	lsl.w	r3, r1, r6
 800a8a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a8a8:	e748      	b.n	800a73c <_strtod_l+0x6dc>
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a8b2:	e743      	b.n	800a73c <_strtod_l+0x6dc>
 800a8b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7ff f961 	bl	8009b80 <__lshift>
 800a8be:	9016      	str	r0, [sp, #88]	; 0x58
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f47f af6b 	bne.w	800a79c <_strtod_l+0x73c>
 800a8c6:	e60f      	b.n	800a4e8 <_strtod_l+0x488>
 800a8c8:	46ca      	mov	sl, r9
 800a8ca:	d171      	bne.n	800a9b0 <_strtod_l+0x950>
 800a8cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d2:	b352      	cbz	r2, 800a92a <_strtod_l+0x8ca>
 800a8d4:	4a33      	ldr	r2, [pc, #204]	; (800a9a4 <_strtod_l+0x944>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d12a      	bne.n	800a930 <_strtod_l+0x8d0>
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	4641      	mov	r1, r8
 800a8de:	b1fb      	cbz	r3, 800a920 <_strtod_l+0x8c0>
 800a8e0:	4b2e      	ldr	r3, [pc, #184]	; (800a99c <_strtod_l+0x93c>)
 800a8e2:	ea09 0303 	and.w	r3, r9, r3
 800a8e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ee:	d81a      	bhi.n	800a926 <_strtod_l+0x8c6>
 800a8f0:	0d1b      	lsrs	r3, r3, #20
 800a8f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	d118      	bne.n	800a930 <_strtod_l+0x8d0>
 800a8fe:	4b2a      	ldr	r3, [pc, #168]	; (800a9a8 <_strtod_l+0x948>)
 800a900:	459a      	cmp	sl, r3
 800a902:	d102      	bne.n	800a90a <_strtod_l+0x8aa>
 800a904:	3101      	adds	r1, #1
 800a906:	f43f adef 	beq.w	800a4e8 <_strtod_l+0x488>
 800a90a:	4b24      	ldr	r3, [pc, #144]	; (800a99c <_strtod_l+0x93c>)
 800a90c:	ea0a 0303 	and.w	r3, sl, r3
 800a910:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a914:	f04f 0800 	mov.w	r8, #0
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1a2      	bne.n	800a864 <_strtod_l+0x804>
 800a91e:	e5ed      	b.n	800a4fc <_strtod_l+0x49c>
 800a920:	f04f 33ff 	mov.w	r3, #4294967295
 800a924:	e7e9      	b.n	800a8fa <_strtod_l+0x89a>
 800a926:	4613      	mov	r3, r2
 800a928:	e7e7      	b.n	800a8fa <_strtod_l+0x89a>
 800a92a:	ea53 0308 	orrs.w	r3, r3, r8
 800a92e:	d08a      	beq.n	800a846 <_strtod_l+0x7e6>
 800a930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a932:	b1e3      	cbz	r3, 800a96e <_strtod_l+0x90e>
 800a934:	ea13 0f0a 	tst.w	r3, sl
 800a938:	d0ee      	beq.n	800a918 <_strtod_l+0x8b8>
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	b1c3      	cbz	r3, 800a976 <_strtod_l+0x916>
 800a944:	f7ff fb6f 	bl	800a026 <sulp>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	ec51 0b18 	vmov	r0, r1, d8
 800a950:	f7f5 fca4 	bl	800029c <__adddf3>
 800a954:	4680      	mov	r8, r0
 800a956:	4689      	mov	r9, r1
 800a958:	e7de      	b.n	800a918 <_strtod_l+0x8b8>
 800a95a:	4013      	ands	r3, r2
 800a95c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a960:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a964:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a968:	f04f 38ff 	mov.w	r8, #4294967295
 800a96c:	e7d4      	b.n	800a918 <_strtod_l+0x8b8>
 800a96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a970:	ea13 0f08 	tst.w	r3, r8
 800a974:	e7e0      	b.n	800a938 <_strtod_l+0x8d8>
 800a976:	f7ff fb56 	bl	800a026 <sulp>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	ec51 0b18 	vmov	r0, r1, d8
 800a982:	f7f5 fc89 	bl	8000298 <__aeabi_dsub>
 800a986:	2200      	movs	r2, #0
 800a988:	2300      	movs	r3, #0
 800a98a:	4680      	mov	r8, r0
 800a98c:	4689      	mov	r9, r1
 800a98e:	f7f6 f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a992:	2800      	cmp	r0, #0
 800a994:	d0c0      	beq.n	800a918 <_strtod_l+0x8b8>
 800a996:	e618      	b.n	800a5ca <_strtod_l+0x56a>
 800a998:	fffffc02 	.word	0xfffffc02
 800a99c:	7ff00000 	.word	0x7ff00000
 800a9a0:	39500000 	.word	0x39500000
 800a9a4:	000fffff 	.word	0x000fffff
 800a9a8:	7fefffff 	.word	0x7fefffff
 800a9ac:	0800c268 	.word	0x0800c268
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7ff fac0 	bl	8009f38 <__ratio>
 800a9b8:	ec57 6b10 	vmov	r6, r7, d0
 800a9bc:	ee10 0a10 	vmov	r0, s0
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f6 f89a 	bl	8000b00 <__aeabi_dcmple>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d071      	beq.n	800aab4 <_strtod_l+0xa54>
 800a9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d17c      	bne.n	800aad0 <_strtod_l+0xa70>
 800a9d6:	f1b8 0f00 	cmp.w	r8, #0
 800a9da:	d15a      	bne.n	800aa92 <_strtod_l+0xa32>
 800a9dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d15d      	bne.n	800aaa0 <_strtod_l+0xa40>
 800a9e4:	4b90      	ldr	r3, [pc, #576]	; (800ac28 <_strtod_l+0xbc8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f6 f87e 	bl	8000aec <__aeabi_dcmplt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d15c      	bne.n	800aaae <_strtod_l+0xa4e>
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4b8c      	ldr	r3, [pc, #560]	; (800ac2c <_strtod_l+0xbcc>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fe04 	bl	8000608 <__aeabi_dmul>
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aa08:	9606      	str	r6, [sp, #24]
 800aa0a:	9307      	str	r3, [sp, #28]
 800aa0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aa14:	4b86      	ldr	r3, [pc, #536]	; (800ac30 <_strtod_l+0xbd0>)
 800aa16:	ea0a 0303 	and.w	r3, sl, r3
 800aa1a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa1e:	4b85      	ldr	r3, [pc, #532]	; (800ac34 <_strtod_l+0xbd4>)
 800aa20:	429a      	cmp	r2, r3
 800aa22:	f040 8090 	bne.w	800ab46 <_strtod_l+0xae6>
 800aa26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aa2a:	ec49 8b10 	vmov	d0, r8, r9
 800aa2e:	f7ff f9b9 	bl	8009da4 <__ulp>
 800aa32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa36:	ec51 0b10 	vmov	r0, r1, d0
 800aa3a:	f7f5 fde5 	bl	8000608 <__aeabi_dmul>
 800aa3e:	4642      	mov	r2, r8
 800aa40:	464b      	mov	r3, r9
 800aa42:	f7f5 fc2b 	bl	800029c <__adddf3>
 800aa46:	460b      	mov	r3, r1
 800aa48:	4979      	ldr	r1, [pc, #484]	; (800ac30 <_strtod_l+0xbd0>)
 800aa4a:	4a7b      	ldr	r2, [pc, #492]	; (800ac38 <_strtod_l+0xbd8>)
 800aa4c:	4019      	ands	r1, r3
 800aa4e:	4291      	cmp	r1, r2
 800aa50:	4680      	mov	r8, r0
 800aa52:	d944      	bls.n	800aade <_strtod_l+0xa7e>
 800aa54:	ee18 2a90 	vmov	r2, s17
 800aa58:	4b78      	ldr	r3, [pc, #480]	; (800ac3c <_strtod_l+0xbdc>)
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d104      	bne.n	800aa68 <_strtod_l+0xa08>
 800aa5e:	ee18 3a10 	vmov	r3, s16
 800aa62:	3301      	adds	r3, #1
 800aa64:	f43f ad40 	beq.w	800a4e8 <_strtod_l+0x488>
 800aa68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ac3c <_strtod_l+0xbdc>
 800aa6c:	f04f 38ff 	mov.w	r8, #4294967295
 800aa70:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa72:	4620      	mov	r0, r4
 800aa74:	f7fe fe6a 	bl	800974c <_Bfree>
 800aa78:	9905      	ldr	r1, [sp, #20]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7fe fe66 	bl	800974c <_Bfree>
 800aa80:	4659      	mov	r1, fp
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7fe fe62 	bl	800974c <_Bfree>
 800aa88:	4629      	mov	r1, r5
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f7fe fe5e 	bl	800974c <_Bfree>
 800aa90:	e609      	b.n	800a6a6 <_strtod_l+0x646>
 800aa92:	f1b8 0f01 	cmp.w	r8, #1
 800aa96:	d103      	bne.n	800aaa0 <_strtod_l+0xa40>
 800aa98:	f1b9 0f00 	cmp.w	r9, #0
 800aa9c:	f43f ad95 	beq.w	800a5ca <_strtod_l+0x56a>
 800aaa0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800abf8 <_strtod_l+0xb98>
 800aaa4:	4f60      	ldr	r7, [pc, #384]	; (800ac28 <_strtod_l+0xbc8>)
 800aaa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aaaa:	2600      	movs	r6, #0
 800aaac:	e7ae      	b.n	800aa0c <_strtod_l+0x9ac>
 800aaae:	4f5f      	ldr	r7, [pc, #380]	; (800ac2c <_strtod_l+0xbcc>)
 800aab0:	2600      	movs	r6, #0
 800aab2:	e7a7      	b.n	800aa04 <_strtod_l+0x9a4>
 800aab4:	4b5d      	ldr	r3, [pc, #372]	; (800ac2c <_strtod_l+0xbcc>)
 800aab6:	4630      	mov	r0, r6
 800aab8:	4639      	mov	r1, r7
 800aaba:	2200      	movs	r2, #0
 800aabc:	f7f5 fda4 	bl	8000608 <__aeabi_dmul>
 800aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d09c      	beq.n	800aa04 <_strtod_l+0x9a4>
 800aaca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aace:	e79d      	b.n	800aa0c <_strtod_l+0x9ac>
 800aad0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ac00 <_strtod_l+0xba0>
 800aad4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aad8:	ec57 6b17 	vmov	r6, r7, d7
 800aadc:	e796      	b.n	800aa0c <_strtod_l+0x9ac>
 800aade:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	46ca      	mov	sl, r9
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1c2      	bne.n	800aa70 <_strtod_l+0xa10>
 800aaea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaf0:	0d1b      	lsrs	r3, r3, #20
 800aaf2:	051b      	lsls	r3, r3, #20
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d1bb      	bne.n	800aa70 <_strtod_l+0xa10>
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f6 f8cc 	bl	8000c98 <__aeabi_d2lz>
 800ab00:	f7f5 fd54 	bl	80005ac <__aeabi_l2d>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 fbc4 	bl	8000298 <__aeabi_dsub>
 800ab10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab16:	ea43 0308 	orr.w	r3, r3, r8
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	460f      	mov	r7, r1
 800ab20:	d054      	beq.n	800abcc <_strtod_l+0xb6c>
 800ab22:	a339      	add	r3, pc, #228	; (adr r3, 800ac08 <_strtod_l+0xba8>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 ffe0 	bl	8000aec <__aeabi_dcmplt>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f47f ace5 	bne.w	800a4fc <_strtod_l+0x49c>
 800ab32:	a337      	add	r3, pc, #220	; (adr r3, 800ac10 <_strtod_l+0xbb0>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 fff4 	bl	8000b28 <__aeabi_dcmpgt>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d095      	beq.n	800aa70 <_strtod_l+0xa10>
 800ab44:	e4da      	b.n	800a4fc <_strtod_l+0x49c>
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	b333      	cbz	r3, 800ab98 <_strtod_l+0xb38>
 800ab4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab50:	d822      	bhi.n	800ab98 <_strtod_l+0xb38>
 800ab52:	a331      	add	r3, pc, #196	; (adr r3, 800ac18 <_strtod_l+0xbb8>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f5 ffd0 	bl	8000b00 <__aeabi_dcmple>
 800ab60:	b1a0      	cbz	r0, 800ab8c <_strtod_l+0xb2c>
 800ab62:	4639      	mov	r1, r7
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7f6 f827 	bl	8000bb8 <__aeabi_d2uiz>
 800ab6a:	2801      	cmp	r0, #1
 800ab6c:	bf38      	it	cc
 800ab6e:	2001      	movcc	r0, #1
 800ab70:	f7f5 fcd0 	bl	8000514 <__aeabi_ui2d>
 800ab74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	bb23      	cbnz	r3, 800abc6 <_strtod_l+0xb66>
 800ab7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab80:	9010      	str	r0, [sp, #64]	; 0x40
 800ab82:	9311      	str	r3, [sp, #68]	; 0x44
 800ab84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ab8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab9c:	eeb0 0a48 	vmov.f32	s0, s16
 800aba0:	eef0 0a68 	vmov.f32	s1, s17
 800aba4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aba8:	f7ff f8fc 	bl	8009da4 <__ulp>
 800abac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abb0:	ec53 2b10 	vmov	r2, r3, d0
 800abb4:	f7f5 fd28 	bl	8000608 <__aeabi_dmul>
 800abb8:	ec53 2b18 	vmov	r2, r3, d8
 800abbc:	f7f5 fb6e 	bl	800029c <__adddf3>
 800abc0:	4680      	mov	r8, r0
 800abc2:	4689      	mov	r9, r1
 800abc4:	e78d      	b.n	800aae2 <_strtod_l+0xa82>
 800abc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800abca:	e7db      	b.n	800ab84 <_strtod_l+0xb24>
 800abcc:	a314      	add	r3, pc, #80	; (adr r3, 800ac20 <_strtod_l+0xbc0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 ff8b 	bl	8000aec <__aeabi_dcmplt>
 800abd6:	e7b3      	b.n	800ab40 <_strtod_l+0xae0>
 800abd8:	2300      	movs	r3, #0
 800abda:	930a      	str	r3, [sp, #40]	; 0x28
 800abdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	f7ff ba7c 	b.w	800a0de <_strtod_l+0x7e>
 800abe6:	2a65      	cmp	r2, #101	; 0x65
 800abe8:	f43f ab75 	beq.w	800a2d6 <_strtod_l+0x276>
 800abec:	2a45      	cmp	r2, #69	; 0x45
 800abee:	f43f ab72 	beq.w	800a2d6 <_strtod_l+0x276>
 800abf2:	2301      	movs	r3, #1
 800abf4:	f7ff bbaa 	b.w	800a34c <_strtod_l+0x2ec>
 800abf8:	00000000 	.word	0x00000000
 800abfc:	bff00000 	.word	0xbff00000
 800ac00:	00000000 	.word	0x00000000
 800ac04:	3ff00000 	.word	0x3ff00000
 800ac08:	94a03595 	.word	0x94a03595
 800ac0c:	3fdfffff 	.word	0x3fdfffff
 800ac10:	35afe535 	.word	0x35afe535
 800ac14:	3fe00000 	.word	0x3fe00000
 800ac18:	ffc00000 	.word	0xffc00000
 800ac1c:	41dfffff 	.word	0x41dfffff
 800ac20:	94a03595 	.word	0x94a03595
 800ac24:	3fcfffff 	.word	0x3fcfffff
 800ac28:	3ff00000 	.word	0x3ff00000
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	7fe00000 	.word	0x7fe00000
 800ac38:	7c9fffff 	.word	0x7c9fffff
 800ac3c:	7fefffff 	.word	0x7fefffff

0800ac40 <_strtod_r>:
 800ac40:	4b01      	ldr	r3, [pc, #4]	; (800ac48 <_strtod_r+0x8>)
 800ac42:	f7ff ba0d 	b.w	800a060 <_strtod_l>
 800ac46:	bf00      	nop
 800ac48:	2000006c 	.word	0x2000006c

0800ac4c <_strtol_l.constprop.0>:
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac52:	d001      	beq.n	800ac58 <_strtol_l.constprop.0+0xc>
 800ac54:	2b24      	cmp	r3, #36	; 0x24
 800ac56:	d906      	bls.n	800ac66 <_strtol_l.constprop.0+0x1a>
 800ac58:	f7fd fd7c 	bl	8008754 <__errno>
 800ac5c:	2316      	movs	r3, #22
 800ac5e:	6003      	str	r3, [r0, #0]
 800ac60:	2000      	movs	r0, #0
 800ac62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad4c <_strtol_l.constprop.0+0x100>
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	462e      	mov	r6, r5
 800ac6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ac76:	f017 0708 	ands.w	r7, r7, #8
 800ac7a:	d1f7      	bne.n	800ac6c <_strtol_l.constprop.0+0x20>
 800ac7c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac7e:	d132      	bne.n	800ace6 <_strtol_l.constprop.0+0x9a>
 800ac80:	782c      	ldrb	r4, [r5, #0]
 800ac82:	2701      	movs	r7, #1
 800ac84:	1cb5      	adds	r5, r6, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d05b      	beq.n	800ad42 <_strtol_l.constprop.0+0xf6>
 800ac8a:	2b10      	cmp	r3, #16
 800ac8c:	d109      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ac8e:	2c30      	cmp	r4, #48	; 0x30
 800ac90:	d107      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ac92:	782c      	ldrb	r4, [r5, #0]
 800ac94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac98:	2c58      	cmp	r4, #88	; 0x58
 800ac9a:	d14d      	bne.n	800ad38 <_strtol_l.constprop.0+0xec>
 800ac9c:	786c      	ldrb	r4, [r5, #1]
 800ac9e:	2310      	movs	r3, #16
 800aca0:	3502      	adds	r5, #2
 800aca2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aca6:	f108 38ff 	add.w	r8, r8, #4294967295
 800acaa:	f04f 0e00 	mov.w	lr, #0
 800acae:	fbb8 f9f3 	udiv	r9, r8, r3
 800acb2:	4676      	mov	r6, lr
 800acb4:	fb03 8a19 	mls	sl, r3, r9, r8
 800acb8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acbc:	f1bc 0f09 	cmp.w	ip, #9
 800acc0:	d816      	bhi.n	800acf0 <_strtol_l.constprop.0+0xa4>
 800acc2:	4664      	mov	r4, ip
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	dd24      	ble.n	800ad12 <_strtol_l.constprop.0+0xc6>
 800acc8:	f1be 3fff 	cmp.w	lr, #4294967295
 800accc:	d008      	beq.n	800ace0 <_strtol_l.constprop.0+0x94>
 800acce:	45b1      	cmp	r9, r6
 800acd0:	d31c      	bcc.n	800ad0c <_strtol_l.constprop.0+0xc0>
 800acd2:	d101      	bne.n	800acd8 <_strtol_l.constprop.0+0x8c>
 800acd4:	45a2      	cmp	sl, r4
 800acd6:	db19      	blt.n	800ad0c <_strtol_l.constprop.0+0xc0>
 800acd8:	fb06 4603 	mla	r6, r6, r3, r4
 800acdc:	f04f 0e01 	mov.w	lr, #1
 800ace0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ace4:	e7e8      	b.n	800acb8 <_strtol_l.constprop.0+0x6c>
 800ace6:	2c2b      	cmp	r4, #43	; 0x2b
 800ace8:	bf04      	itt	eq
 800acea:	782c      	ldrbeq	r4, [r5, #0]
 800acec:	1cb5      	addeq	r5, r6, #2
 800acee:	e7ca      	b.n	800ac86 <_strtol_l.constprop.0+0x3a>
 800acf0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800acf4:	f1bc 0f19 	cmp.w	ip, #25
 800acf8:	d801      	bhi.n	800acfe <_strtol_l.constprop.0+0xb2>
 800acfa:	3c37      	subs	r4, #55	; 0x37
 800acfc:	e7e2      	b.n	800acc4 <_strtol_l.constprop.0+0x78>
 800acfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad02:	f1bc 0f19 	cmp.w	ip, #25
 800ad06:	d804      	bhi.n	800ad12 <_strtol_l.constprop.0+0xc6>
 800ad08:	3c57      	subs	r4, #87	; 0x57
 800ad0a:	e7db      	b.n	800acc4 <_strtol_l.constprop.0+0x78>
 800ad0c:	f04f 3eff 	mov.w	lr, #4294967295
 800ad10:	e7e6      	b.n	800ace0 <_strtol_l.constprop.0+0x94>
 800ad12:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad16:	d105      	bne.n	800ad24 <_strtol_l.constprop.0+0xd8>
 800ad18:	2322      	movs	r3, #34	; 0x22
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	4646      	mov	r6, r8
 800ad1e:	b942      	cbnz	r2, 800ad32 <_strtol_l.constprop.0+0xe6>
 800ad20:	4630      	mov	r0, r6
 800ad22:	e79e      	b.n	800ac62 <_strtol_l.constprop.0+0x16>
 800ad24:	b107      	cbz	r7, 800ad28 <_strtol_l.constprop.0+0xdc>
 800ad26:	4276      	negs	r6, r6
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	d0f9      	beq.n	800ad20 <_strtol_l.constprop.0+0xd4>
 800ad2c:	f1be 0f00 	cmp.w	lr, #0
 800ad30:	d000      	beq.n	800ad34 <_strtol_l.constprop.0+0xe8>
 800ad32:	1e69      	subs	r1, r5, #1
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	e7f3      	b.n	800ad20 <_strtol_l.constprop.0+0xd4>
 800ad38:	2430      	movs	r4, #48	; 0x30
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1b1      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad3e:	2308      	movs	r3, #8
 800ad40:	e7af      	b.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad42:	2c30      	cmp	r4, #48	; 0x30
 800ad44:	d0a5      	beq.n	800ac92 <_strtol_l.constprop.0+0x46>
 800ad46:	230a      	movs	r3, #10
 800ad48:	e7ab      	b.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad4a:	bf00      	nop
 800ad4c:	0800c291 	.word	0x0800c291

0800ad50 <_strtol_r>:
 800ad50:	f7ff bf7c 	b.w	800ac4c <_strtol_l.constprop.0>

0800ad54 <__ssputs_r>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	688e      	ldr	r6, [r1, #8]
 800ad5a:	461f      	mov	r7, r3
 800ad5c:	42be      	cmp	r6, r7
 800ad5e:	680b      	ldr	r3, [r1, #0]
 800ad60:	4682      	mov	sl, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4690      	mov	r8, r2
 800ad66:	d82c      	bhi.n	800adc2 <__ssputs_r+0x6e>
 800ad68:	898a      	ldrh	r2, [r1, #12]
 800ad6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad6e:	d026      	beq.n	800adbe <__ssputs_r+0x6a>
 800ad70:	6965      	ldr	r5, [r4, #20]
 800ad72:	6909      	ldr	r1, [r1, #16]
 800ad74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad78:	eba3 0901 	sub.w	r9, r3, r1
 800ad7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad80:	1c7b      	adds	r3, r7, #1
 800ad82:	444b      	add	r3, r9
 800ad84:	106d      	asrs	r5, r5, #1
 800ad86:	429d      	cmp	r5, r3
 800ad88:	bf38      	it	cc
 800ad8a:	461d      	movcc	r5, r3
 800ad8c:	0553      	lsls	r3, r2, #21
 800ad8e:	d527      	bpl.n	800ade0 <__ssputs_r+0x8c>
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7fe fc0f 	bl	80095b4 <_malloc_r>
 800ad96:	4606      	mov	r6, r0
 800ad98:	b360      	cbz	r0, 800adf4 <__ssputs_r+0xa0>
 800ad9a:	6921      	ldr	r1, [r4, #16]
 800ad9c:	464a      	mov	r2, r9
 800ad9e:	f7fd fd06 	bl	80087ae <memcpy>
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ada8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	6126      	str	r6, [r4, #16]
 800adb0:	6165      	str	r5, [r4, #20]
 800adb2:	444e      	add	r6, r9
 800adb4:	eba5 0509 	sub.w	r5, r5, r9
 800adb8:	6026      	str	r6, [r4, #0]
 800adba:	60a5      	str	r5, [r4, #8]
 800adbc:	463e      	mov	r6, r7
 800adbe:	42be      	cmp	r6, r7
 800adc0:	d900      	bls.n	800adc4 <__ssputs_r+0x70>
 800adc2:	463e      	mov	r6, r7
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	4632      	mov	r2, r6
 800adc8:	4641      	mov	r1, r8
 800adca:	f000 f9c9 	bl	800b160 <memmove>
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	1b9b      	subs	r3, r3, r6
 800add2:	60a3      	str	r3, [r4, #8]
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	4433      	add	r3, r6
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	2000      	movs	r0, #0
 800addc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade0:	462a      	mov	r2, r5
 800ade2:	f000 fd9e 	bl	800b922 <_realloc_r>
 800ade6:	4606      	mov	r6, r0
 800ade8:	2800      	cmp	r0, #0
 800adea:	d1e0      	bne.n	800adae <__ssputs_r+0x5a>
 800adec:	6921      	ldr	r1, [r4, #16]
 800adee:	4650      	mov	r0, sl
 800adf0:	f7fe fb6c 	bl	80094cc <_free_r>
 800adf4:	230c      	movs	r3, #12
 800adf6:	f8ca 3000 	str.w	r3, [sl]
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295
 800ae06:	e7e9      	b.n	800addc <__ssputs_r+0x88>

0800ae08 <_svfiprintf_r>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	4698      	mov	r8, r3
 800ae0e:	898b      	ldrh	r3, [r1, #12]
 800ae10:	061b      	lsls	r3, r3, #24
 800ae12:	b09d      	sub	sp, #116	; 0x74
 800ae14:	4607      	mov	r7, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	4614      	mov	r4, r2
 800ae1a:	d50e      	bpl.n	800ae3a <_svfiprintf_r+0x32>
 800ae1c:	690b      	ldr	r3, [r1, #16]
 800ae1e:	b963      	cbnz	r3, 800ae3a <_svfiprintf_r+0x32>
 800ae20:	2140      	movs	r1, #64	; 0x40
 800ae22:	f7fe fbc7 	bl	80095b4 <_malloc_r>
 800ae26:	6028      	str	r0, [r5, #0]
 800ae28:	6128      	str	r0, [r5, #16]
 800ae2a:	b920      	cbnz	r0, 800ae36 <_svfiprintf_r+0x2e>
 800ae2c:	230c      	movs	r3, #12
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e0d0      	b.n	800afd8 <_svfiprintf_r+0x1d0>
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	616b      	str	r3, [r5, #20]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3e:	2320      	movs	r3, #32
 800ae40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae48:	2330      	movs	r3, #48	; 0x30
 800ae4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aff0 <_svfiprintf_r+0x1e8>
 800ae4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae52:	f04f 0901 	mov.w	r9, #1
 800ae56:	4623      	mov	r3, r4
 800ae58:	469a      	mov	sl, r3
 800ae5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae5e:	b10a      	cbz	r2, 800ae64 <_svfiprintf_r+0x5c>
 800ae60:	2a25      	cmp	r2, #37	; 0x25
 800ae62:	d1f9      	bne.n	800ae58 <_svfiprintf_r+0x50>
 800ae64:	ebba 0b04 	subs.w	fp, sl, r4
 800ae68:	d00b      	beq.n	800ae82 <_svfiprintf_r+0x7a>
 800ae6a:	465b      	mov	r3, fp
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff ff6f 	bl	800ad54 <__ssputs_r>
 800ae76:	3001      	adds	r0, #1
 800ae78:	f000 80a9 	beq.w	800afce <_svfiprintf_r+0x1c6>
 800ae7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae7e:	445a      	add	r2, fp
 800ae80:	9209      	str	r2, [sp, #36]	; 0x24
 800ae82:	f89a 3000 	ldrb.w	r3, [sl]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 80a1 	beq.w	800afce <_svfiprintf_r+0x1c6>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae96:	f10a 0a01 	add.w	sl, sl, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9307      	str	r3, [sp, #28]
 800ae9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aea2:	931a      	str	r3, [sp, #104]	; 0x68
 800aea4:	4654      	mov	r4, sl
 800aea6:	2205      	movs	r2, #5
 800aea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeac:	4850      	ldr	r0, [pc, #320]	; (800aff0 <_svfiprintf_r+0x1e8>)
 800aeae:	f7f5 f997 	bl	80001e0 <memchr>
 800aeb2:	9a04      	ldr	r2, [sp, #16]
 800aeb4:	b9d8      	cbnz	r0, 800aeee <_svfiprintf_r+0xe6>
 800aeb6:	06d0      	lsls	r0, r2, #27
 800aeb8:	bf44      	itt	mi
 800aeba:	2320      	movmi	r3, #32
 800aebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec0:	0711      	lsls	r1, r2, #28
 800aec2:	bf44      	itt	mi
 800aec4:	232b      	movmi	r3, #43	; 0x2b
 800aec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeca:	f89a 3000 	ldrb.w	r3, [sl]
 800aece:	2b2a      	cmp	r3, #42	; 0x2a
 800aed0:	d015      	beq.n	800aefe <_svfiprintf_r+0xf6>
 800aed2:	9a07      	ldr	r2, [sp, #28]
 800aed4:	4654      	mov	r4, sl
 800aed6:	2000      	movs	r0, #0
 800aed8:	f04f 0c0a 	mov.w	ip, #10
 800aedc:	4621      	mov	r1, r4
 800aede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee2:	3b30      	subs	r3, #48	; 0x30
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	d94d      	bls.n	800af84 <_svfiprintf_r+0x17c>
 800aee8:	b1b0      	cbz	r0, 800af18 <_svfiprintf_r+0x110>
 800aeea:	9207      	str	r2, [sp, #28]
 800aeec:	e014      	b.n	800af18 <_svfiprintf_r+0x110>
 800aeee:	eba0 0308 	sub.w	r3, r0, r8
 800aef2:	fa09 f303 	lsl.w	r3, r9, r3
 800aef6:	4313      	orrs	r3, r2
 800aef8:	9304      	str	r3, [sp, #16]
 800aefa:	46a2      	mov	sl, r4
 800aefc:	e7d2      	b.n	800aea4 <_svfiprintf_r+0x9c>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	1d19      	adds	r1, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	9103      	str	r1, [sp, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	bfbb      	ittet	lt
 800af0a:	425b      	neglt	r3, r3
 800af0c:	f042 0202 	orrlt.w	r2, r2, #2
 800af10:	9307      	strge	r3, [sp, #28]
 800af12:	9307      	strlt	r3, [sp, #28]
 800af14:	bfb8      	it	lt
 800af16:	9204      	strlt	r2, [sp, #16]
 800af18:	7823      	ldrb	r3, [r4, #0]
 800af1a:	2b2e      	cmp	r3, #46	; 0x2e
 800af1c:	d10c      	bne.n	800af38 <_svfiprintf_r+0x130>
 800af1e:	7863      	ldrb	r3, [r4, #1]
 800af20:	2b2a      	cmp	r3, #42	; 0x2a
 800af22:	d134      	bne.n	800af8e <_svfiprintf_r+0x186>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	1d1a      	adds	r2, r3, #4
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	9203      	str	r2, [sp, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bfb8      	it	lt
 800af30:	f04f 33ff 	movlt.w	r3, #4294967295
 800af34:	3402      	adds	r4, #2
 800af36:	9305      	str	r3, [sp, #20]
 800af38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b000 <_svfiprintf_r+0x1f8>
 800af3c:	7821      	ldrb	r1, [r4, #0]
 800af3e:	2203      	movs	r2, #3
 800af40:	4650      	mov	r0, sl
 800af42:	f7f5 f94d 	bl	80001e0 <memchr>
 800af46:	b138      	cbz	r0, 800af58 <_svfiprintf_r+0x150>
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	eba0 000a 	sub.w	r0, r0, sl
 800af4e:	2240      	movs	r2, #64	; 0x40
 800af50:	4082      	lsls	r2, r0
 800af52:	4313      	orrs	r3, r2
 800af54:	3401      	adds	r4, #1
 800af56:	9304      	str	r3, [sp, #16]
 800af58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5c:	4825      	ldr	r0, [pc, #148]	; (800aff4 <_svfiprintf_r+0x1ec>)
 800af5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af62:	2206      	movs	r2, #6
 800af64:	f7f5 f93c 	bl	80001e0 <memchr>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d038      	beq.n	800afde <_svfiprintf_r+0x1d6>
 800af6c:	4b22      	ldr	r3, [pc, #136]	; (800aff8 <_svfiprintf_r+0x1f0>)
 800af6e:	bb1b      	cbnz	r3, 800afb8 <_svfiprintf_r+0x1b0>
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	3307      	adds	r3, #7
 800af74:	f023 0307 	bic.w	r3, r3, #7
 800af78:	3308      	adds	r3, #8
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7e:	4433      	add	r3, r6
 800af80:	9309      	str	r3, [sp, #36]	; 0x24
 800af82:	e768      	b.n	800ae56 <_svfiprintf_r+0x4e>
 800af84:	fb0c 3202 	mla	r2, ip, r2, r3
 800af88:	460c      	mov	r4, r1
 800af8a:	2001      	movs	r0, #1
 800af8c:	e7a6      	b.n	800aedc <_svfiprintf_r+0xd4>
 800af8e:	2300      	movs	r3, #0
 800af90:	3401      	adds	r4, #1
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	4619      	mov	r1, r3
 800af96:	f04f 0c0a 	mov.w	ip, #10
 800af9a:	4620      	mov	r0, r4
 800af9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa0:	3a30      	subs	r2, #48	; 0x30
 800afa2:	2a09      	cmp	r2, #9
 800afa4:	d903      	bls.n	800afae <_svfiprintf_r+0x1a6>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0c6      	beq.n	800af38 <_svfiprintf_r+0x130>
 800afaa:	9105      	str	r1, [sp, #20]
 800afac:	e7c4      	b.n	800af38 <_svfiprintf_r+0x130>
 800afae:	fb0c 2101 	mla	r1, ip, r1, r2
 800afb2:	4604      	mov	r4, r0
 800afb4:	2301      	movs	r3, #1
 800afb6:	e7f0      	b.n	800af9a <_svfiprintf_r+0x192>
 800afb8:	ab03      	add	r3, sp, #12
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	462a      	mov	r2, r5
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <_svfiprintf_r+0x1f4>)
 800afc0:	a904      	add	r1, sp, #16
 800afc2:	4638      	mov	r0, r7
 800afc4:	f7fc fc22 	bl	800780c <_printf_float>
 800afc8:	1c42      	adds	r2, r0, #1
 800afca:	4606      	mov	r6, r0
 800afcc:	d1d6      	bne.n	800af7c <_svfiprintf_r+0x174>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	065b      	lsls	r3, r3, #25
 800afd2:	f53f af2d 	bmi.w	800ae30 <_svfiprintf_r+0x28>
 800afd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd8:	b01d      	add	sp, #116	; 0x74
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	ab03      	add	r3, sp, #12
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	462a      	mov	r2, r5
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <_svfiprintf_r+0x1f4>)
 800afe6:	a904      	add	r1, sp, #16
 800afe8:	4638      	mov	r0, r7
 800afea:	f7fc feb3 	bl	8007d54 <_printf_i>
 800afee:	e7eb      	b.n	800afc8 <_svfiprintf_r+0x1c0>
 800aff0:	0800c391 	.word	0x0800c391
 800aff4:	0800c39b 	.word	0x0800c39b
 800aff8:	0800780d 	.word	0x0800780d
 800affc:	0800ad55 	.word	0x0800ad55
 800b000:	0800c397 	.word	0x0800c397

0800b004 <__sflush_r>:
 800b004:	898a      	ldrh	r2, [r1, #12]
 800b006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00a:	4605      	mov	r5, r0
 800b00c:	0710      	lsls	r0, r2, #28
 800b00e:	460c      	mov	r4, r1
 800b010:	d458      	bmi.n	800b0c4 <__sflush_r+0xc0>
 800b012:	684b      	ldr	r3, [r1, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc05      	bgt.n	800b024 <__sflush_r+0x20>
 800b018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dc02      	bgt.n	800b024 <__sflush_r+0x20>
 800b01e:	2000      	movs	r0, #0
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b026:	2e00      	cmp	r6, #0
 800b028:	d0f9      	beq.n	800b01e <__sflush_r+0x1a>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b030:	682f      	ldr	r7, [r5, #0]
 800b032:	6a21      	ldr	r1, [r4, #32]
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	d032      	beq.n	800b09e <__sflush_r+0x9a>
 800b038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	075a      	lsls	r2, r3, #29
 800b03e:	d505      	bpl.n	800b04c <__sflush_r+0x48>
 800b040:	6863      	ldr	r3, [r4, #4]
 800b042:	1ac0      	subs	r0, r0, r3
 800b044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b046:	b10b      	cbz	r3, 800b04c <__sflush_r+0x48>
 800b048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b04a:	1ac0      	subs	r0, r0, r3
 800b04c:	2300      	movs	r3, #0
 800b04e:	4602      	mov	r2, r0
 800b050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b052:	6a21      	ldr	r1, [r4, #32]
 800b054:	4628      	mov	r0, r5
 800b056:	47b0      	blx	r6
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	d106      	bne.n	800b06c <__sflush_r+0x68>
 800b05e:	6829      	ldr	r1, [r5, #0]
 800b060:	291d      	cmp	r1, #29
 800b062:	d82b      	bhi.n	800b0bc <__sflush_r+0xb8>
 800b064:	4a29      	ldr	r2, [pc, #164]	; (800b10c <__sflush_r+0x108>)
 800b066:	410a      	asrs	r2, r1
 800b068:	07d6      	lsls	r6, r2, #31
 800b06a:	d427      	bmi.n	800b0bc <__sflush_r+0xb8>
 800b06c:	2200      	movs	r2, #0
 800b06e:	6062      	str	r2, [r4, #4]
 800b070:	04d9      	lsls	r1, r3, #19
 800b072:	6922      	ldr	r2, [r4, #16]
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	d504      	bpl.n	800b082 <__sflush_r+0x7e>
 800b078:	1c42      	adds	r2, r0, #1
 800b07a:	d101      	bne.n	800b080 <__sflush_r+0x7c>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b903      	cbnz	r3, 800b082 <__sflush_r+0x7e>
 800b080:	6560      	str	r0, [r4, #84]	; 0x54
 800b082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b084:	602f      	str	r7, [r5, #0]
 800b086:	2900      	cmp	r1, #0
 800b088:	d0c9      	beq.n	800b01e <__sflush_r+0x1a>
 800b08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b08e:	4299      	cmp	r1, r3
 800b090:	d002      	beq.n	800b098 <__sflush_r+0x94>
 800b092:	4628      	mov	r0, r5
 800b094:	f7fe fa1a 	bl	80094cc <_free_r>
 800b098:	2000      	movs	r0, #0
 800b09a:	6360      	str	r0, [r4, #52]	; 0x34
 800b09c:	e7c0      	b.n	800b020 <__sflush_r+0x1c>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b0      	blx	r6
 800b0a4:	1c41      	adds	r1, r0, #1
 800b0a6:	d1c8      	bne.n	800b03a <__sflush_r+0x36>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0c5      	beq.n	800b03a <__sflush_r+0x36>
 800b0ae:	2b1d      	cmp	r3, #29
 800b0b0:	d001      	beq.n	800b0b6 <__sflush_r+0xb2>
 800b0b2:	2b16      	cmp	r3, #22
 800b0b4:	d101      	bne.n	800b0ba <__sflush_r+0xb6>
 800b0b6:	602f      	str	r7, [r5, #0]
 800b0b8:	e7b1      	b.n	800b01e <__sflush_r+0x1a>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	e7ad      	b.n	800b020 <__sflush_r+0x1c>
 800b0c4:	690f      	ldr	r7, [r1, #16]
 800b0c6:	2f00      	cmp	r7, #0
 800b0c8:	d0a9      	beq.n	800b01e <__sflush_r+0x1a>
 800b0ca:	0793      	lsls	r3, r2, #30
 800b0cc:	680e      	ldr	r6, [r1, #0]
 800b0ce:	bf08      	it	eq
 800b0d0:	694b      	ldreq	r3, [r1, #20]
 800b0d2:	600f      	str	r7, [r1, #0]
 800b0d4:	bf18      	it	ne
 800b0d6:	2300      	movne	r3, #0
 800b0d8:	eba6 0807 	sub.w	r8, r6, r7
 800b0dc:	608b      	str	r3, [r1, #8]
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	dd9c      	ble.n	800b01e <__sflush_r+0x1a>
 800b0e4:	6a21      	ldr	r1, [r4, #32]
 800b0e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0e8:	4643      	mov	r3, r8
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b0      	blx	r6
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	dc06      	bgt.n	800b102 <__sflush_r+0xfe>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e78e      	b.n	800b020 <__sflush_r+0x1c>
 800b102:	4407      	add	r7, r0
 800b104:	eba8 0800 	sub.w	r8, r8, r0
 800b108:	e7e9      	b.n	800b0de <__sflush_r+0xda>
 800b10a:	bf00      	nop
 800b10c:	dfbffffe 	.word	0xdfbffffe

0800b110 <_fflush_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	690b      	ldr	r3, [r1, #16]
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	b913      	cbnz	r3, 800b120 <_fflush_r+0x10>
 800b11a:	2500      	movs	r5, #0
 800b11c:	4628      	mov	r0, r5
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	b118      	cbz	r0, 800b12a <_fflush_r+0x1a>
 800b122:	6a03      	ldr	r3, [r0, #32]
 800b124:	b90b      	cbnz	r3, 800b12a <_fflush_r+0x1a>
 800b126:	f7fd f9d3 	bl	80084d0 <__sinit>
 800b12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f3      	beq.n	800b11a <_fflush_r+0xa>
 800b132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b134:	07d0      	lsls	r0, r2, #31
 800b136:	d404      	bmi.n	800b142 <_fflush_r+0x32>
 800b138:	0599      	lsls	r1, r3, #22
 800b13a:	d402      	bmi.n	800b142 <_fflush_r+0x32>
 800b13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13e:	f7fd fb34 	bl	80087aa <__retarget_lock_acquire_recursive>
 800b142:	4628      	mov	r0, r5
 800b144:	4621      	mov	r1, r4
 800b146:	f7ff ff5d 	bl	800b004 <__sflush_r>
 800b14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14c:	07da      	lsls	r2, r3, #31
 800b14e:	4605      	mov	r5, r0
 800b150:	d4e4      	bmi.n	800b11c <_fflush_r+0xc>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	059b      	lsls	r3, r3, #22
 800b156:	d4e1      	bmi.n	800b11c <_fflush_r+0xc>
 800b158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b15a:	f7fd fb27 	bl	80087ac <__retarget_lock_release_recursive>
 800b15e:	e7dd      	b.n	800b11c <_fflush_r+0xc>

0800b160 <memmove>:
 800b160:	4288      	cmp	r0, r1
 800b162:	b510      	push	{r4, lr}
 800b164:	eb01 0402 	add.w	r4, r1, r2
 800b168:	d902      	bls.n	800b170 <memmove+0x10>
 800b16a:	4284      	cmp	r4, r0
 800b16c:	4623      	mov	r3, r4
 800b16e:	d807      	bhi.n	800b180 <memmove+0x20>
 800b170:	1e43      	subs	r3, r0, #1
 800b172:	42a1      	cmp	r1, r4
 800b174:	d008      	beq.n	800b188 <memmove+0x28>
 800b176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b17e:	e7f8      	b.n	800b172 <memmove+0x12>
 800b180:	4402      	add	r2, r0
 800b182:	4601      	mov	r1, r0
 800b184:	428a      	cmp	r2, r1
 800b186:	d100      	bne.n	800b18a <memmove+0x2a>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b192:	e7f7      	b.n	800b184 <memmove+0x24>

0800b194 <strncmp>:
 800b194:	b510      	push	{r4, lr}
 800b196:	b16a      	cbz	r2, 800b1b4 <strncmp+0x20>
 800b198:	3901      	subs	r1, #1
 800b19a:	1884      	adds	r4, r0, r2
 800b19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d103      	bne.n	800b1b0 <strncmp+0x1c>
 800b1a8:	42a0      	cmp	r0, r4
 800b1aa:	d001      	beq.n	800b1b0 <strncmp+0x1c>
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	d1f5      	bne.n	800b19c <strncmp+0x8>
 800b1b0:	1ad0      	subs	r0, r2, r3
 800b1b2:	bd10      	pop	{r4, pc}
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	e7fc      	b.n	800b1b2 <strncmp+0x1e>

0800b1b8 <_sbrk_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	; (800b1d4 <_sbrk_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7f6 feee 	bl	8001fa4 <_sbrk>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_sbrk_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_sbrk_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	200031e0 	.word	0x200031e0

0800b1d8 <nan>:
 800b1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b1e0 <nan+0x8>
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	7ff80000 	.word	0x7ff80000

0800b1e8 <__assert_func>:
 800b1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ea:	4614      	mov	r4, r2
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <__assert_func+0x2c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	68d8      	ldr	r0, [r3, #12]
 800b1f6:	b14c      	cbz	r4, 800b20c <__assert_func+0x24>
 800b1f8:	4b07      	ldr	r3, [pc, #28]	; (800b218 <__assert_func+0x30>)
 800b1fa:	9100      	str	r1, [sp, #0]
 800b1fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b200:	4906      	ldr	r1, [pc, #24]	; (800b21c <__assert_func+0x34>)
 800b202:	462b      	mov	r3, r5
 800b204:	f000 fbca 	bl	800b99c <fiprintf>
 800b208:	f000 fbda 	bl	800b9c0 <abort>
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <__assert_func+0x38>)
 800b20e:	461c      	mov	r4, r3
 800b210:	e7f3      	b.n	800b1fa <__assert_func+0x12>
 800b212:	bf00      	nop
 800b214:	20000068 	.word	0x20000068
 800b218:	0800c3aa 	.word	0x0800c3aa
 800b21c:	0800c3b7 	.word	0x0800c3b7
 800b220:	0800c3e5 	.word	0x0800c3e5

0800b224 <_calloc_r>:
 800b224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b226:	fba1 2402 	umull	r2, r4, r1, r2
 800b22a:	b94c      	cbnz	r4, 800b240 <_calloc_r+0x1c>
 800b22c:	4611      	mov	r1, r2
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	f7fe f9c0 	bl	80095b4 <_malloc_r>
 800b234:	9a01      	ldr	r2, [sp, #4]
 800b236:	4605      	mov	r5, r0
 800b238:	b930      	cbnz	r0, 800b248 <_calloc_r+0x24>
 800b23a:	4628      	mov	r0, r5
 800b23c:	b003      	add	sp, #12
 800b23e:	bd30      	pop	{r4, r5, pc}
 800b240:	220c      	movs	r2, #12
 800b242:	6002      	str	r2, [r0, #0]
 800b244:	2500      	movs	r5, #0
 800b246:	e7f8      	b.n	800b23a <_calloc_r+0x16>
 800b248:	4621      	mov	r1, r4
 800b24a:	f7fd f9da 	bl	8008602 <memset>
 800b24e:	e7f4      	b.n	800b23a <_calloc_r+0x16>

0800b250 <rshift>:
 800b250:	6903      	ldr	r3, [r0, #16]
 800b252:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b25e:	f100 0414 	add.w	r4, r0, #20
 800b262:	dd45      	ble.n	800b2f0 <rshift+0xa0>
 800b264:	f011 011f 	ands.w	r1, r1, #31
 800b268:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b26c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b270:	d10c      	bne.n	800b28c <rshift+0x3c>
 800b272:	f100 0710 	add.w	r7, r0, #16
 800b276:	4629      	mov	r1, r5
 800b278:	42b1      	cmp	r1, r6
 800b27a:	d334      	bcc.n	800b2e6 <rshift+0x96>
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	1eea      	subs	r2, r5, #3
 800b282:	4296      	cmp	r6, r2
 800b284:	bf38      	it	cc
 800b286:	2300      	movcc	r3, #0
 800b288:	4423      	add	r3, r4
 800b28a:	e015      	b.n	800b2b8 <rshift+0x68>
 800b28c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b290:	f1c1 0820 	rsb	r8, r1, #32
 800b294:	40cf      	lsrs	r7, r1
 800b296:	f105 0e04 	add.w	lr, r5, #4
 800b29a:	46a1      	mov	r9, r4
 800b29c:	4576      	cmp	r6, lr
 800b29e:	46f4      	mov	ip, lr
 800b2a0:	d815      	bhi.n	800b2ce <rshift+0x7e>
 800b2a2:	1a9a      	subs	r2, r3, r2
 800b2a4:	0092      	lsls	r2, r2, #2
 800b2a6:	3a04      	subs	r2, #4
 800b2a8:	3501      	adds	r5, #1
 800b2aa:	42ae      	cmp	r6, r5
 800b2ac:	bf38      	it	cc
 800b2ae:	2200      	movcc	r2, #0
 800b2b0:	18a3      	adds	r3, r4, r2
 800b2b2:	50a7      	str	r7, [r4, r2]
 800b2b4:	b107      	cbz	r7, 800b2b8 <rshift+0x68>
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	1b1a      	subs	r2, r3, r4
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2c0:	bf08      	it	eq
 800b2c2:	2300      	moveq	r3, #0
 800b2c4:	6102      	str	r2, [r0, #16]
 800b2c6:	bf08      	it	eq
 800b2c8:	6143      	streq	r3, [r0, #20]
 800b2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ce:	f8dc c000 	ldr.w	ip, [ip]
 800b2d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2d6:	ea4c 0707 	orr.w	r7, ip, r7
 800b2da:	f849 7b04 	str.w	r7, [r9], #4
 800b2de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2e2:	40cf      	lsrs	r7, r1
 800b2e4:	e7da      	b.n	800b29c <rshift+0x4c>
 800b2e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2ee:	e7c3      	b.n	800b278 <rshift+0x28>
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	e7e1      	b.n	800b2b8 <rshift+0x68>

0800b2f4 <__hexdig_fun>:
 800b2f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2f8:	2b09      	cmp	r3, #9
 800b2fa:	d802      	bhi.n	800b302 <__hexdig_fun+0xe>
 800b2fc:	3820      	subs	r0, #32
 800b2fe:	b2c0      	uxtb	r0, r0
 800b300:	4770      	bx	lr
 800b302:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b306:	2b05      	cmp	r3, #5
 800b308:	d801      	bhi.n	800b30e <__hexdig_fun+0x1a>
 800b30a:	3847      	subs	r0, #71	; 0x47
 800b30c:	e7f7      	b.n	800b2fe <__hexdig_fun+0xa>
 800b30e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b312:	2b05      	cmp	r3, #5
 800b314:	d801      	bhi.n	800b31a <__hexdig_fun+0x26>
 800b316:	3827      	subs	r0, #39	; 0x27
 800b318:	e7f1      	b.n	800b2fe <__hexdig_fun+0xa>
 800b31a:	2000      	movs	r0, #0
 800b31c:	4770      	bx	lr
	...

0800b320 <__gethex>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	4617      	mov	r7, r2
 800b326:	680a      	ldr	r2, [r1, #0]
 800b328:	b085      	sub	sp, #20
 800b32a:	f102 0b02 	add.w	fp, r2, #2
 800b32e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b332:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b336:	4681      	mov	r9, r0
 800b338:	468a      	mov	sl, r1
 800b33a:	9302      	str	r3, [sp, #8]
 800b33c:	32fe      	adds	r2, #254	; 0xfe
 800b33e:	eb02 030b 	add.w	r3, r2, fp
 800b342:	46d8      	mov	r8, fp
 800b344:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	2830      	cmp	r0, #48	; 0x30
 800b34c:	d0f7      	beq.n	800b33e <__gethex+0x1e>
 800b34e:	f7ff ffd1 	bl	800b2f4 <__hexdig_fun>
 800b352:	4604      	mov	r4, r0
 800b354:	2800      	cmp	r0, #0
 800b356:	d138      	bne.n	800b3ca <__gethex+0xaa>
 800b358:	49a7      	ldr	r1, [pc, #668]	; (800b5f8 <__gethex+0x2d8>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	4640      	mov	r0, r8
 800b35e:	f7ff ff19 	bl	800b194 <strncmp>
 800b362:	4606      	mov	r6, r0
 800b364:	2800      	cmp	r0, #0
 800b366:	d169      	bne.n	800b43c <__gethex+0x11c>
 800b368:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b36c:	465d      	mov	r5, fp
 800b36e:	f7ff ffc1 	bl	800b2f4 <__hexdig_fun>
 800b372:	2800      	cmp	r0, #0
 800b374:	d064      	beq.n	800b440 <__gethex+0x120>
 800b376:	465a      	mov	r2, fp
 800b378:	7810      	ldrb	r0, [r2, #0]
 800b37a:	2830      	cmp	r0, #48	; 0x30
 800b37c:	4690      	mov	r8, r2
 800b37e:	f102 0201 	add.w	r2, r2, #1
 800b382:	d0f9      	beq.n	800b378 <__gethex+0x58>
 800b384:	f7ff ffb6 	bl	800b2f4 <__hexdig_fun>
 800b388:	2301      	movs	r3, #1
 800b38a:	fab0 f480 	clz	r4, r0
 800b38e:	0964      	lsrs	r4, r4, #5
 800b390:	465e      	mov	r6, fp
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	4642      	mov	r2, r8
 800b396:	4615      	mov	r5, r2
 800b398:	3201      	adds	r2, #1
 800b39a:	7828      	ldrb	r0, [r5, #0]
 800b39c:	f7ff ffaa 	bl	800b2f4 <__hexdig_fun>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d1f8      	bne.n	800b396 <__gethex+0x76>
 800b3a4:	4994      	ldr	r1, [pc, #592]	; (800b5f8 <__gethex+0x2d8>)
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f7ff fef3 	bl	800b194 <strncmp>
 800b3ae:	b978      	cbnz	r0, 800b3d0 <__gethex+0xb0>
 800b3b0:	b946      	cbnz	r6, 800b3c4 <__gethex+0xa4>
 800b3b2:	1c6e      	adds	r6, r5, #1
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4615      	mov	r5, r2
 800b3b8:	3201      	adds	r2, #1
 800b3ba:	7828      	ldrb	r0, [r5, #0]
 800b3bc:	f7ff ff9a 	bl	800b2f4 <__hexdig_fun>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1f8      	bne.n	800b3b6 <__gethex+0x96>
 800b3c4:	1b73      	subs	r3, r6, r5
 800b3c6:	009e      	lsls	r6, r3, #2
 800b3c8:	e004      	b.n	800b3d4 <__gethex+0xb4>
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	4626      	mov	r6, r4
 800b3ce:	e7e1      	b.n	800b394 <__gethex+0x74>
 800b3d0:	2e00      	cmp	r6, #0
 800b3d2:	d1f7      	bne.n	800b3c4 <__gethex+0xa4>
 800b3d4:	782b      	ldrb	r3, [r5, #0]
 800b3d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3da:	2b50      	cmp	r3, #80	; 0x50
 800b3dc:	d13d      	bne.n	800b45a <__gethex+0x13a>
 800b3de:	786b      	ldrb	r3, [r5, #1]
 800b3e0:	2b2b      	cmp	r3, #43	; 0x2b
 800b3e2:	d02f      	beq.n	800b444 <__gethex+0x124>
 800b3e4:	2b2d      	cmp	r3, #45	; 0x2d
 800b3e6:	d031      	beq.n	800b44c <__gethex+0x12c>
 800b3e8:	1c69      	adds	r1, r5, #1
 800b3ea:	f04f 0b00 	mov.w	fp, #0
 800b3ee:	7808      	ldrb	r0, [r1, #0]
 800b3f0:	f7ff ff80 	bl	800b2f4 <__hexdig_fun>
 800b3f4:	1e42      	subs	r2, r0, #1
 800b3f6:	b2d2      	uxtb	r2, r2
 800b3f8:	2a18      	cmp	r2, #24
 800b3fa:	d82e      	bhi.n	800b45a <__gethex+0x13a>
 800b3fc:	f1a0 0210 	sub.w	r2, r0, #16
 800b400:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b404:	f7ff ff76 	bl	800b2f4 <__hexdig_fun>
 800b408:	f100 3cff 	add.w	ip, r0, #4294967295
 800b40c:	fa5f fc8c 	uxtb.w	ip, ip
 800b410:	f1bc 0f18 	cmp.w	ip, #24
 800b414:	d91d      	bls.n	800b452 <__gethex+0x132>
 800b416:	f1bb 0f00 	cmp.w	fp, #0
 800b41a:	d000      	beq.n	800b41e <__gethex+0xfe>
 800b41c:	4252      	negs	r2, r2
 800b41e:	4416      	add	r6, r2
 800b420:	f8ca 1000 	str.w	r1, [sl]
 800b424:	b1dc      	cbz	r4, 800b45e <__gethex+0x13e>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	bf14      	ite	ne
 800b42c:	f04f 0800 	movne.w	r8, #0
 800b430:	f04f 0806 	moveq.w	r8, #6
 800b434:	4640      	mov	r0, r8
 800b436:	b005      	add	sp, #20
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	4645      	mov	r5, r8
 800b43e:	4626      	mov	r6, r4
 800b440:	2401      	movs	r4, #1
 800b442:	e7c7      	b.n	800b3d4 <__gethex+0xb4>
 800b444:	f04f 0b00 	mov.w	fp, #0
 800b448:	1ca9      	adds	r1, r5, #2
 800b44a:	e7d0      	b.n	800b3ee <__gethex+0xce>
 800b44c:	f04f 0b01 	mov.w	fp, #1
 800b450:	e7fa      	b.n	800b448 <__gethex+0x128>
 800b452:	230a      	movs	r3, #10
 800b454:	fb03 0002 	mla	r0, r3, r2, r0
 800b458:	e7d0      	b.n	800b3fc <__gethex+0xdc>
 800b45a:	4629      	mov	r1, r5
 800b45c:	e7e0      	b.n	800b420 <__gethex+0x100>
 800b45e:	eba5 0308 	sub.w	r3, r5, r8
 800b462:	3b01      	subs	r3, #1
 800b464:	4621      	mov	r1, r4
 800b466:	2b07      	cmp	r3, #7
 800b468:	dc0a      	bgt.n	800b480 <__gethex+0x160>
 800b46a:	4648      	mov	r0, r9
 800b46c:	f7fe f92e 	bl	80096cc <_Balloc>
 800b470:	4604      	mov	r4, r0
 800b472:	b940      	cbnz	r0, 800b486 <__gethex+0x166>
 800b474:	4b61      	ldr	r3, [pc, #388]	; (800b5fc <__gethex+0x2dc>)
 800b476:	4602      	mov	r2, r0
 800b478:	21e4      	movs	r1, #228	; 0xe4
 800b47a:	4861      	ldr	r0, [pc, #388]	; (800b600 <__gethex+0x2e0>)
 800b47c:	f7ff feb4 	bl	800b1e8 <__assert_func>
 800b480:	3101      	adds	r1, #1
 800b482:	105b      	asrs	r3, r3, #1
 800b484:	e7ef      	b.n	800b466 <__gethex+0x146>
 800b486:	f100 0a14 	add.w	sl, r0, #20
 800b48a:	2300      	movs	r3, #0
 800b48c:	495a      	ldr	r1, [pc, #360]	; (800b5f8 <__gethex+0x2d8>)
 800b48e:	f8cd a004 	str.w	sl, [sp, #4]
 800b492:	469b      	mov	fp, r3
 800b494:	45a8      	cmp	r8, r5
 800b496:	d342      	bcc.n	800b51e <__gethex+0x1fe>
 800b498:	9801      	ldr	r0, [sp, #4]
 800b49a:	f840 bb04 	str.w	fp, [r0], #4
 800b49e:	eba0 000a 	sub.w	r0, r0, sl
 800b4a2:	1080      	asrs	r0, r0, #2
 800b4a4:	6120      	str	r0, [r4, #16]
 800b4a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f7fe fa00 	bl	80098b0 <__hi0bits>
 800b4b0:	683d      	ldr	r5, [r7, #0]
 800b4b2:	eba8 0000 	sub.w	r0, r8, r0
 800b4b6:	42a8      	cmp	r0, r5
 800b4b8:	dd59      	ble.n	800b56e <__gethex+0x24e>
 800b4ba:	eba0 0805 	sub.w	r8, r0, r5
 800b4be:	4641      	mov	r1, r8
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7fe fd8f 	bl	8009fe4 <__any_on>
 800b4c6:	4683      	mov	fp, r0
 800b4c8:	b1b8      	cbz	r0, 800b4fa <__gethex+0x1da>
 800b4ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800b4ce:	1159      	asrs	r1, r3, #5
 800b4d0:	f003 021f 	and.w	r2, r3, #31
 800b4d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4d8:	f04f 0b01 	mov.w	fp, #1
 800b4dc:	fa0b f202 	lsl.w	r2, fp, r2
 800b4e0:	420a      	tst	r2, r1
 800b4e2:	d00a      	beq.n	800b4fa <__gethex+0x1da>
 800b4e4:	455b      	cmp	r3, fp
 800b4e6:	dd06      	ble.n	800b4f6 <__gethex+0x1d6>
 800b4e8:	f1a8 0102 	sub.w	r1, r8, #2
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7fe fd79 	bl	8009fe4 <__any_on>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d138      	bne.n	800b568 <__gethex+0x248>
 800b4f6:	f04f 0b02 	mov.w	fp, #2
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7ff fea7 	bl	800b250 <rshift>
 800b502:	4446      	add	r6, r8
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	42b3      	cmp	r3, r6
 800b508:	da41      	bge.n	800b58e <__gethex+0x26e>
 800b50a:	4621      	mov	r1, r4
 800b50c:	4648      	mov	r0, r9
 800b50e:	f7fe f91d 	bl	800974c <_Bfree>
 800b512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b514:	2300      	movs	r3, #0
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b51c:	e78a      	b.n	800b434 <__gethex+0x114>
 800b51e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b522:	2a2e      	cmp	r2, #46	; 0x2e
 800b524:	d014      	beq.n	800b550 <__gethex+0x230>
 800b526:	2b20      	cmp	r3, #32
 800b528:	d106      	bne.n	800b538 <__gethex+0x218>
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	f843 bb04 	str.w	fp, [r3], #4
 800b530:	f04f 0b00 	mov.w	fp, #0
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	465b      	mov	r3, fp
 800b538:	7828      	ldrb	r0, [r5, #0]
 800b53a:	9303      	str	r3, [sp, #12]
 800b53c:	f7ff feda 	bl	800b2f4 <__hexdig_fun>
 800b540:	9b03      	ldr	r3, [sp, #12]
 800b542:	f000 000f 	and.w	r0, r0, #15
 800b546:	4098      	lsls	r0, r3
 800b548:	ea4b 0b00 	orr.w	fp, fp, r0
 800b54c:	3304      	adds	r3, #4
 800b54e:	e7a1      	b.n	800b494 <__gethex+0x174>
 800b550:	45a8      	cmp	r8, r5
 800b552:	d8e8      	bhi.n	800b526 <__gethex+0x206>
 800b554:	2201      	movs	r2, #1
 800b556:	4628      	mov	r0, r5
 800b558:	9303      	str	r3, [sp, #12]
 800b55a:	f7ff fe1b 	bl	800b194 <strncmp>
 800b55e:	4926      	ldr	r1, [pc, #152]	; (800b5f8 <__gethex+0x2d8>)
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	2800      	cmp	r0, #0
 800b564:	d1df      	bne.n	800b526 <__gethex+0x206>
 800b566:	e795      	b.n	800b494 <__gethex+0x174>
 800b568:	f04f 0b03 	mov.w	fp, #3
 800b56c:	e7c5      	b.n	800b4fa <__gethex+0x1da>
 800b56e:	da0b      	bge.n	800b588 <__gethex+0x268>
 800b570:	eba5 0800 	sub.w	r8, r5, r0
 800b574:	4621      	mov	r1, r4
 800b576:	4642      	mov	r2, r8
 800b578:	4648      	mov	r0, r9
 800b57a:	f7fe fb01 	bl	8009b80 <__lshift>
 800b57e:	eba6 0608 	sub.w	r6, r6, r8
 800b582:	4604      	mov	r4, r0
 800b584:	f100 0a14 	add.w	sl, r0, #20
 800b588:	f04f 0b00 	mov.w	fp, #0
 800b58c:	e7ba      	b.n	800b504 <__gethex+0x1e4>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	42b3      	cmp	r3, r6
 800b592:	dd73      	ble.n	800b67c <__gethex+0x35c>
 800b594:	1b9e      	subs	r6, r3, r6
 800b596:	42b5      	cmp	r5, r6
 800b598:	dc34      	bgt.n	800b604 <__gethex+0x2e4>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d023      	beq.n	800b5e8 <__gethex+0x2c8>
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d025      	beq.n	800b5f0 <__gethex+0x2d0>
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d115      	bne.n	800b5d4 <__gethex+0x2b4>
 800b5a8:	42b5      	cmp	r5, r6
 800b5aa:	d113      	bne.n	800b5d4 <__gethex+0x2b4>
 800b5ac:	2d01      	cmp	r5, #1
 800b5ae:	d10b      	bne.n	800b5c8 <__gethex+0x2a8>
 800b5b0:	9a02      	ldr	r2, [sp, #8]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	f8ca 3000 	str.w	r3, [sl]
 800b5be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b5c4:	601c      	str	r4, [r3, #0]
 800b5c6:	e735      	b.n	800b434 <__gethex+0x114>
 800b5c8:	1e69      	subs	r1, r5, #1
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7fe fd0a 	bl	8009fe4 <__any_on>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d1ed      	bne.n	800b5b0 <__gethex+0x290>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4648      	mov	r0, r9
 800b5d8:	f7fe f8b8 	bl	800974c <_Bfree>
 800b5dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5de:	2300      	movs	r3, #0
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b5e6:	e725      	b.n	800b434 <__gethex+0x114>
 800b5e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1f2      	bne.n	800b5d4 <__gethex+0x2b4>
 800b5ee:	e7df      	b.n	800b5b0 <__gethex+0x290>
 800b5f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1dc      	bne.n	800b5b0 <__gethex+0x290>
 800b5f6:	e7ed      	b.n	800b5d4 <__gethex+0x2b4>
 800b5f8:	0800c23c 	.word	0x0800c23c
 800b5fc:	0800c0d5 	.word	0x0800c0d5
 800b600:	0800c3e6 	.word	0x0800c3e6
 800b604:	f106 38ff 	add.w	r8, r6, #4294967295
 800b608:	f1bb 0f00 	cmp.w	fp, #0
 800b60c:	d133      	bne.n	800b676 <__gethex+0x356>
 800b60e:	f1b8 0f00 	cmp.w	r8, #0
 800b612:	d004      	beq.n	800b61e <__gethex+0x2fe>
 800b614:	4641      	mov	r1, r8
 800b616:	4620      	mov	r0, r4
 800b618:	f7fe fce4 	bl	8009fe4 <__any_on>
 800b61c:	4683      	mov	fp, r0
 800b61e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b622:	2301      	movs	r3, #1
 800b624:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b628:	f008 081f 	and.w	r8, r8, #31
 800b62c:	fa03 f308 	lsl.w	r3, r3, r8
 800b630:	4213      	tst	r3, r2
 800b632:	4631      	mov	r1, r6
 800b634:	4620      	mov	r0, r4
 800b636:	bf18      	it	ne
 800b638:	f04b 0b02 	orrne.w	fp, fp, #2
 800b63c:	1bad      	subs	r5, r5, r6
 800b63e:	f7ff fe07 	bl	800b250 <rshift>
 800b642:	687e      	ldr	r6, [r7, #4]
 800b644:	f04f 0802 	mov.w	r8, #2
 800b648:	f1bb 0f00 	cmp.w	fp, #0
 800b64c:	d04a      	beq.n	800b6e4 <__gethex+0x3c4>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b02      	cmp	r3, #2
 800b652:	d016      	beq.n	800b682 <__gethex+0x362>
 800b654:	2b03      	cmp	r3, #3
 800b656:	d018      	beq.n	800b68a <__gethex+0x36a>
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d109      	bne.n	800b670 <__gethex+0x350>
 800b65c:	f01b 0f02 	tst.w	fp, #2
 800b660:	d006      	beq.n	800b670 <__gethex+0x350>
 800b662:	f8da 3000 	ldr.w	r3, [sl]
 800b666:	ea4b 0b03 	orr.w	fp, fp, r3
 800b66a:	f01b 0f01 	tst.w	fp, #1
 800b66e:	d10f      	bne.n	800b690 <__gethex+0x370>
 800b670:	f048 0810 	orr.w	r8, r8, #16
 800b674:	e036      	b.n	800b6e4 <__gethex+0x3c4>
 800b676:	f04f 0b01 	mov.w	fp, #1
 800b67a:	e7d0      	b.n	800b61e <__gethex+0x2fe>
 800b67c:	f04f 0801 	mov.w	r8, #1
 800b680:	e7e2      	b.n	800b648 <__gethex+0x328>
 800b682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b684:	f1c3 0301 	rsb	r3, r3, #1
 800b688:	930f      	str	r3, [sp, #60]	; 0x3c
 800b68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d0ef      	beq.n	800b670 <__gethex+0x350>
 800b690:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b694:	f104 0214 	add.w	r2, r4, #20
 800b698:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4694      	mov	ip, r2
 800b6a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b6aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b6ae:	d01e      	beq.n	800b6ee <__gethex+0x3ce>
 800b6b0:	3101      	adds	r1, #1
 800b6b2:	f8cc 1000 	str.w	r1, [ip]
 800b6b6:	f1b8 0f02 	cmp.w	r8, #2
 800b6ba:	f104 0214 	add.w	r2, r4, #20
 800b6be:	d13d      	bne.n	800b73c <__gethex+0x41c>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	42ab      	cmp	r3, r5
 800b6c6:	d10b      	bne.n	800b6e0 <__gethex+0x3c0>
 800b6c8:	1169      	asrs	r1, r5, #5
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f005 051f 	and.w	r5, r5, #31
 800b6d0:	fa03 f505 	lsl.w	r5, r3, r5
 800b6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d8:	421d      	tst	r5, r3
 800b6da:	bf18      	it	ne
 800b6dc:	f04f 0801 	movne.w	r8, #1
 800b6e0:	f048 0820 	orr.w	r8, r8, #32
 800b6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6e6:	601c      	str	r4, [r3, #0]
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	601e      	str	r6, [r3, #0]
 800b6ec:	e6a2      	b.n	800b434 <__gethex+0x114>
 800b6ee:	4290      	cmp	r0, r2
 800b6f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b6f4:	d8d6      	bhi.n	800b6a4 <__gethex+0x384>
 800b6f6:	68a2      	ldr	r2, [r4, #8]
 800b6f8:	4593      	cmp	fp, r2
 800b6fa:	db17      	blt.n	800b72c <__gethex+0x40c>
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4648      	mov	r0, r9
 800b700:	3101      	adds	r1, #1
 800b702:	f7fd ffe3 	bl	80096cc <_Balloc>
 800b706:	4682      	mov	sl, r0
 800b708:	b918      	cbnz	r0, 800b712 <__gethex+0x3f2>
 800b70a:	4b1b      	ldr	r3, [pc, #108]	; (800b778 <__gethex+0x458>)
 800b70c:	4602      	mov	r2, r0
 800b70e:	2184      	movs	r1, #132	; 0x84
 800b710:	e6b3      	b.n	800b47a <__gethex+0x15a>
 800b712:	6922      	ldr	r2, [r4, #16]
 800b714:	3202      	adds	r2, #2
 800b716:	f104 010c 	add.w	r1, r4, #12
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	300c      	adds	r0, #12
 800b71e:	f7fd f846 	bl	80087ae <memcpy>
 800b722:	4621      	mov	r1, r4
 800b724:	4648      	mov	r0, r9
 800b726:	f7fe f811 	bl	800974c <_Bfree>
 800b72a:	4654      	mov	r4, sl
 800b72c:	6922      	ldr	r2, [r4, #16]
 800b72e:	1c51      	adds	r1, r2, #1
 800b730:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b734:	6121      	str	r1, [r4, #16]
 800b736:	2101      	movs	r1, #1
 800b738:	6151      	str	r1, [r2, #20]
 800b73a:	e7bc      	b.n	800b6b6 <__gethex+0x396>
 800b73c:	6921      	ldr	r1, [r4, #16]
 800b73e:	4559      	cmp	r1, fp
 800b740:	dd0b      	ble.n	800b75a <__gethex+0x43a>
 800b742:	2101      	movs	r1, #1
 800b744:	4620      	mov	r0, r4
 800b746:	f7ff fd83 	bl	800b250 <rshift>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	3601      	adds	r6, #1
 800b74e:	42b3      	cmp	r3, r6
 800b750:	f6ff aedb 	blt.w	800b50a <__gethex+0x1ea>
 800b754:	f04f 0801 	mov.w	r8, #1
 800b758:	e7c2      	b.n	800b6e0 <__gethex+0x3c0>
 800b75a:	f015 051f 	ands.w	r5, r5, #31
 800b75e:	d0f9      	beq.n	800b754 <__gethex+0x434>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	441a      	add	r2, r3
 800b764:	f1c5 0520 	rsb	r5, r5, #32
 800b768:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b76c:	f7fe f8a0 	bl	80098b0 <__hi0bits>
 800b770:	42a8      	cmp	r0, r5
 800b772:	dbe6      	blt.n	800b742 <__gethex+0x422>
 800b774:	e7ee      	b.n	800b754 <__gethex+0x434>
 800b776:	bf00      	nop
 800b778:	0800c0d5 	.word	0x0800c0d5

0800b77c <L_shift>:
 800b77c:	f1c2 0208 	rsb	r2, r2, #8
 800b780:	0092      	lsls	r2, r2, #2
 800b782:	b570      	push	{r4, r5, r6, lr}
 800b784:	f1c2 0620 	rsb	r6, r2, #32
 800b788:	6843      	ldr	r3, [r0, #4]
 800b78a:	6804      	ldr	r4, [r0, #0]
 800b78c:	fa03 f506 	lsl.w	r5, r3, r6
 800b790:	432c      	orrs	r4, r5
 800b792:	40d3      	lsrs	r3, r2
 800b794:	6004      	str	r4, [r0, #0]
 800b796:	f840 3f04 	str.w	r3, [r0, #4]!
 800b79a:	4288      	cmp	r0, r1
 800b79c:	d3f4      	bcc.n	800b788 <L_shift+0xc>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}

0800b7a0 <__match>:
 800b7a0:	b530      	push	{r4, r5, lr}
 800b7a2:	6803      	ldr	r3, [r0, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7aa:	b914      	cbnz	r4, 800b7b2 <__match+0x12>
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	bd30      	pop	{r4, r5, pc}
 800b7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b7ba:	2d19      	cmp	r5, #25
 800b7bc:	bf98      	it	ls
 800b7be:	3220      	addls	r2, #32
 800b7c0:	42a2      	cmp	r2, r4
 800b7c2:	d0f0      	beq.n	800b7a6 <__match+0x6>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7f3      	b.n	800b7b0 <__match+0x10>

0800b7c8 <__hexnan>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	680b      	ldr	r3, [r1, #0]
 800b7ce:	6801      	ldr	r1, [r0, #0]
 800b7d0:	115e      	asrs	r6, r3, #5
 800b7d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7d6:	f013 031f 	ands.w	r3, r3, #31
 800b7da:	b087      	sub	sp, #28
 800b7dc:	bf18      	it	ne
 800b7de:	3604      	addne	r6, #4
 800b7e0:	2500      	movs	r5, #0
 800b7e2:	1f37      	subs	r7, r6, #4
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	4690      	mov	r8, r2
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7ee:	46b9      	mov	r9, r7
 800b7f0:	463c      	mov	r4, r7
 800b7f2:	9502      	str	r5, [sp, #8]
 800b7f4:	46ab      	mov	fp, r5
 800b7f6:	784a      	ldrb	r2, [r1, #1]
 800b7f8:	1c4b      	adds	r3, r1, #1
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	b342      	cbz	r2, 800b850 <__hexnan+0x88>
 800b7fe:	4610      	mov	r0, r2
 800b800:	9105      	str	r1, [sp, #20]
 800b802:	9204      	str	r2, [sp, #16]
 800b804:	f7ff fd76 	bl	800b2f4 <__hexdig_fun>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d14f      	bne.n	800b8ac <__hexnan+0xe4>
 800b80c:	9a04      	ldr	r2, [sp, #16]
 800b80e:	9905      	ldr	r1, [sp, #20]
 800b810:	2a20      	cmp	r2, #32
 800b812:	d818      	bhi.n	800b846 <__hexnan+0x7e>
 800b814:	9b02      	ldr	r3, [sp, #8]
 800b816:	459b      	cmp	fp, r3
 800b818:	dd13      	ble.n	800b842 <__hexnan+0x7a>
 800b81a:	454c      	cmp	r4, r9
 800b81c:	d206      	bcs.n	800b82c <__hexnan+0x64>
 800b81e:	2d07      	cmp	r5, #7
 800b820:	dc04      	bgt.n	800b82c <__hexnan+0x64>
 800b822:	462a      	mov	r2, r5
 800b824:	4649      	mov	r1, r9
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ffa8 	bl	800b77c <L_shift>
 800b82c:	4544      	cmp	r4, r8
 800b82e:	d950      	bls.n	800b8d2 <__hexnan+0x10a>
 800b830:	2300      	movs	r3, #0
 800b832:	f1a4 0904 	sub.w	r9, r4, #4
 800b836:	f844 3c04 	str.w	r3, [r4, #-4]
 800b83a:	f8cd b008 	str.w	fp, [sp, #8]
 800b83e:	464c      	mov	r4, r9
 800b840:	461d      	mov	r5, r3
 800b842:	9903      	ldr	r1, [sp, #12]
 800b844:	e7d7      	b.n	800b7f6 <__hexnan+0x2e>
 800b846:	2a29      	cmp	r2, #41	; 0x29
 800b848:	d155      	bne.n	800b8f6 <__hexnan+0x12e>
 800b84a:	3102      	adds	r1, #2
 800b84c:	f8ca 1000 	str.w	r1, [sl]
 800b850:	f1bb 0f00 	cmp.w	fp, #0
 800b854:	d04f      	beq.n	800b8f6 <__hexnan+0x12e>
 800b856:	454c      	cmp	r4, r9
 800b858:	d206      	bcs.n	800b868 <__hexnan+0xa0>
 800b85a:	2d07      	cmp	r5, #7
 800b85c:	dc04      	bgt.n	800b868 <__hexnan+0xa0>
 800b85e:	462a      	mov	r2, r5
 800b860:	4649      	mov	r1, r9
 800b862:	4620      	mov	r0, r4
 800b864:	f7ff ff8a 	bl	800b77c <L_shift>
 800b868:	4544      	cmp	r4, r8
 800b86a:	d934      	bls.n	800b8d6 <__hexnan+0x10e>
 800b86c:	f1a8 0204 	sub.w	r2, r8, #4
 800b870:	4623      	mov	r3, r4
 800b872:	f853 1b04 	ldr.w	r1, [r3], #4
 800b876:	f842 1f04 	str.w	r1, [r2, #4]!
 800b87a:	429f      	cmp	r7, r3
 800b87c:	d2f9      	bcs.n	800b872 <__hexnan+0xaa>
 800b87e:	1b3b      	subs	r3, r7, r4
 800b880:	f023 0303 	bic.w	r3, r3, #3
 800b884:	3304      	adds	r3, #4
 800b886:	3e03      	subs	r6, #3
 800b888:	3401      	adds	r4, #1
 800b88a:	42a6      	cmp	r6, r4
 800b88c:	bf38      	it	cc
 800b88e:	2304      	movcc	r3, #4
 800b890:	4443      	add	r3, r8
 800b892:	2200      	movs	r2, #0
 800b894:	f843 2b04 	str.w	r2, [r3], #4
 800b898:	429f      	cmp	r7, r3
 800b89a:	d2fb      	bcs.n	800b894 <__hexnan+0xcc>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	b91b      	cbnz	r3, 800b8a8 <__hexnan+0xe0>
 800b8a0:	4547      	cmp	r7, r8
 800b8a2:	d126      	bne.n	800b8f2 <__hexnan+0x12a>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	2005      	movs	r0, #5
 800b8aa:	e025      	b.n	800b8f8 <__hexnan+0x130>
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	2d08      	cmp	r5, #8
 800b8b0:	f10b 0b01 	add.w	fp, fp, #1
 800b8b4:	dd06      	ble.n	800b8c4 <__hexnan+0xfc>
 800b8b6:	4544      	cmp	r4, r8
 800b8b8:	d9c3      	bls.n	800b842 <__hexnan+0x7a>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8c0:	2501      	movs	r5, #1
 800b8c2:	3c04      	subs	r4, #4
 800b8c4:	6822      	ldr	r2, [r4, #0]
 800b8c6:	f000 000f 	and.w	r0, r0, #15
 800b8ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8ce:	6020      	str	r0, [r4, #0]
 800b8d0:	e7b7      	b.n	800b842 <__hexnan+0x7a>
 800b8d2:	2508      	movs	r5, #8
 800b8d4:	e7b5      	b.n	800b842 <__hexnan+0x7a>
 800b8d6:	9b01      	ldr	r3, [sp, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0df      	beq.n	800b89c <__hexnan+0xd4>
 800b8dc:	f1c3 0320 	rsb	r3, r3, #32
 800b8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e4:	40da      	lsrs	r2, r3
 800b8e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8f0:	e7d4      	b.n	800b89c <__hexnan+0xd4>
 800b8f2:	3f04      	subs	r7, #4
 800b8f4:	e7d2      	b.n	800b89c <__hexnan+0xd4>
 800b8f6:	2004      	movs	r0, #4
 800b8f8:	b007      	add	sp, #28
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8fe <__ascii_mbtowc>:
 800b8fe:	b082      	sub	sp, #8
 800b900:	b901      	cbnz	r1, 800b904 <__ascii_mbtowc+0x6>
 800b902:	a901      	add	r1, sp, #4
 800b904:	b142      	cbz	r2, 800b918 <__ascii_mbtowc+0x1a>
 800b906:	b14b      	cbz	r3, 800b91c <__ascii_mbtowc+0x1e>
 800b908:	7813      	ldrb	r3, [r2, #0]
 800b90a:	600b      	str	r3, [r1, #0]
 800b90c:	7812      	ldrb	r2, [r2, #0]
 800b90e:	1e10      	subs	r0, r2, #0
 800b910:	bf18      	it	ne
 800b912:	2001      	movne	r0, #1
 800b914:	b002      	add	sp, #8
 800b916:	4770      	bx	lr
 800b918:	4610      	mov	r0, r2
 800b91a:	e7fb      	b.n	800b914 <__ascii_mbtowc+0x16>
 800b91c:	f06f 0001 	mvn.w	r0, #1
 800b920:	e7f8      	b.n	800b914 <__ascii_mbtowc+0x16>

0800b922 <_realloc_r>:
 800b922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	4680      	mov	r8, r0
 800b928:	4614      	mov	r4, r2
 800b92a:	460e      	mov	r6, r1
 800b92c:	b921      	cbnz	r1, 800b938 <_realloc_r+0x16>
 800b92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b932:	4611      	mov	r1, r2
 800b934:	f7fd be3e 	b.w	80095b4 <_malloc_r>
 800b938:	b92a      	cbnz	r2, 800b946 <_realloc_r+0x24>
 800b93a:	f7fd fdc7 	bl	80094cc <_free_r>
 800b93e:	4625      	mov	r5, r4
 800b940:	4628      	mov	r0, r5
 800b942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b946:	f000 f842 	bl	800b9ce <_malloc_usable_size_r>
 800b94a:	4284      	cmp	r4, r0
 800b94c:	4607      	mov	r7, r0
 800b94e:	d802      	bhi.n	800b956 <_realloc_r+0x34>
 800b950:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b954:	d812      	bhi.n	800b97c <_realloc_r+0x5a>
 800b956:	4621      	mov	r1, r4
 800b958:	4640      	mov	r0, r8
 800b95a:	f7fd fe2b 	bl	80095b4 <_malloc_r>
 800b95e:	4605      	mov	r5, r0
 800b960:	2800      	cmp	r0, #0
 800b962:	d0ed      	beq.n	800b940 <_realloc_r+0x1e>
 800b964:	42bc      	cmp	r4, r7
 800b966:	4622      	mov	r2, r4
 800b968:	4631      	mov	r1, r6
 800b96a:	bf28      	it	cs
 800b96c:	463a      	movcs	r2, r7
 800b96e:	f7fc ff1e 	bl	80087ae <memcpy>
 800b972:	4631      	mov	r1, r6
 800b974:	4640      	mov	r0, r8
 800b976:	f7fd fda9 	bl	80094cc <_free_r>
 800b97a:	e7e1      	b.n	800b940 <_realloc_r+0x1e>
 800b97c:	4635      	mov	r5, r6
 800b97e:	e7df      	b.n	800b940 <_realloc_r+0x1e>

0800b980 <__ascii_wctomb>:
 800b980:	b149      	cbz	r1, 800b996 <__ascii_wctomb+0x16>
 800b982:	2aff      	cmp	r2, #255	; 0xff
 800b984:	bf85      	ittet	hi
 800b986:	238a      	movhi	r3, #138	; 0x8a
 800b988:	6003      	strhi	r3, [r0, #0]
 800b98a:	700a      	strbls	r2, [r1, #0]
 800b98c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b990:	bf98      	it	ls
 800b992:	2001      	movls	r0, #1
 800b994:	4770      	bx	lr
 800b996:	4608      	mov	r0, r1
 800b998:	4770      	bx	lr
	...

0800b99c <fiprintf>:
 800b99c:	b40e      	push	{r1, r2, r3}
 800b99e:	b503      	push	{r0, r1, lr}
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	ab03      	add	r3, sp, #12
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <fiprintf+0x20>)
 800b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	f000 f83f 	bl	800ba30 <_vfiprintf_r>
 800b9b2:	b002      	add	sp, #8
 800b9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b8:	b003      	add	sp, #12
 800b9ba:	4770      	bx	lr
 800b9bc:	20000068 	.word	0x20000068

0800b9c0 <abort>:
 800b9c0:	b508      	push	{r3, lr}
 800b9c2:	2006      	movs	r0, #6
 800b9c4:	f000 fa0c 	bl	800bde0 <raise>
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	f7f6 fa74 	bl	8001eb6 <_exit>

0800b9ce <_malloc_usable_size_r>:
 800b9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d2:	1f18      	subs	r0, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfbc      	itt	lt
 800b9d8:	580b      	ldrlt	r3, [r1, r0]
 800b9da:	18c0      	addlt	r0, r0, r3
 800b9dc:	4770      	bx	lr

0800b9de <__sfputc_r>:
 800b9de:	6893      	ldr	r3, [r2, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	b410      	push	{r4}
 800b9e6:	6093      	str	r3, [r2, #8]
 800b9e8:	da08      	bge.n	800b9fc <__sfputc_r+0x1e>
 800b9ea:	6994      	ldr	r4, [r2, #24]
 800b9ec:	42a3      	cmp	r3, r4
 800b9ee:	db01      	blt.n	800b9f4 <__sfputc_r+0x16>
 800b9f0:	290a      	cmp	r1, #10
 800b9f2:	d103      	bne.n	800b9fc <__sfputc_r+0x1e>
 800b9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f8:	f000 b934 	b.w	800bc64 <__swbuf_r>
 800b9fc:	6813      	ldr	r3, [r2, #0]
 800b9fe:	1c58      	adds	r0, r3, #1
 800ba00:	6010      	str	r0, [r2, #0]
 800ba02:	7019      	strb	r1, [r3, #0]
 800ba04:	4608      	mov	r0, r1
 800ba06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <__sfputs_r>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	4614      	mov	r4, r2
 800ba14:	18d5      	adds	r5, r2, r3
 800ba16:	42ac      	cmp	r4, r5
 800ba18:	d101      	bne.n	800ba1e <__sfputs_r+0x12>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	e007      	b.n	800ba2e <__sfputs_r+0x22>
 800ba1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba22:	463a      	mov	r2, r7
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff ffda 	bl	800b9de <__sfputc_r>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	d1f3      	bne.n	800ba16 <__sfputs_r+0xa>
 800ba2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba30 <_vfiprintf_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	460d      	mov	r5, r1
 800ba36:	b09d      	sub	sp, #116	; 0x74
 800ba38:	4614      	mov	r4, r2
 800ba3a:	4698      	mov	r8, r3
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b118      	cbz	r0, 800ba48 <_vfiprintf_r+0x18>
 800ba40:	6a03      	ldr	r3, [r0, #32]
 800ba42:	b90b      	cbnz	r3, 800ba48 <_vfiprintf_r+0x18>
 800ba44:	f7fc fd44 	bl	80084d0 <__sinit>
 800ba48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba4a:	07d9      	lsls	r1, r3, #31
 800ba4c:	d405      	bmi.n	800ba5a <_vfiprintf_r+0x2a>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	059a      	lsls	r2, r3, #22
 800ba52:	d402      	bmi.n	800ba5a <_vfiprintf_r+0x2a>
 800ba54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba56:	f7fc fea8 	bl	80087aa <__retarget_lock_acquire_recursive>
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	071b      	lsls	r3, r3, #28
 800ba5e:	d501      	bpl.n	800ba64 <_vfiprintf_r+0x34>
 800ba60:	692b      	ldr	r3, [r5, #16]
 800ba62:	b99b      	cbnz	r3, 800ba8c <_vfiprintf_r+0x5c>
 800ba64:	4629      	mov	r1, r5
 800ba66:	4630      	mov	r0, r6
 800ba68:	f000 f93a 	bl	800bce0 <__swsetup_r>
 800ba6c:	b170      	cbz	r0, 800ba8c <_vfiprintf_r+0x5c>
 800ba6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba70:	07dc      	lsls	r4, r3, #31
 800ba72:	d504      	bpl.n	800ba7e <_vfiprintf_r+0x4e>
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	b01d      	add	sp, #116	; 0x74
 800ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	0598      	lsls	r0, r3, #22
 800ba82:	d4f7      	bmi.n	800ba74 <_vfiprintf_r+0x44>
 800ba84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba86:	f7fc fe91 	bl	80087ac <__retarget_lock_release_recursive>
 800ba8a:	e7f3      	b.n	800ba74 <_vfiprintf_r+0x44>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba90:	2320      	movs	r3, #32
 800ba92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba9a:	2330      	movs	r3, #48	; 0x30
 800ba9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc50 <_vfiprintf_r+0x220>
 800baa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa4:	f04f 0901 	mov.w	r9, #1
 800baa8:	4623      	mov	r3, r4
 800baaa:	469a      	mov	sl, r3
 800baac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab0:	b10a      	cbz	r2, 800bab6 <_vfiprintf_r+0x86>
 800bab2:	2a25      	cmp	r2, #37	; 0x25
 800bab4:	d1f9      	bne.n	800baaa <_vfiprintf_r+0x7a>
 800bab6:	ebba 0b04 	subs.w	fp, sl, r4
 800baba:	d00b      	beq.n	800bad4 <_vfiprintf_r+0xa4>
 800babc:	465b      	mov	r3, fp
 800babe:	4622      	mov	r2, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff ffa2 	bl	800ba0c <__sfputs_r>
 800bac8:	3001      	adds	r0, #1
 800baca:	f000 80a9 	beq.w	800bc20 <_vfiprintf_r+0x1f0>
 800bace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad0:	445a      	add	r2, fp
 800bad2:	9209      	str	r2, [sp, #36]	; 0x24
 800bad4:	f89a 3000 	ldrb.w	r3, [sl]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80a1 	beq.w	800bc20 <_vfiprintf_r+0x1f0>
 800bade:	2300      	movs	r3, #0
 800bae0:	f04f 32ff 	mov.w	r2, #4294967295
 800bae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae8:	f10a 0a01 	add.w	sl, sl, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	9307      	str	r3, [sp, #28]
 800baf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf4:	931a      	str	r3, [sp, #104]	; 0x68
 800baf6:	4654      	mov	r4, sl
 800baf8:	2205      	movs	r2, #5
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	4854      	ldr	r0, [pc, #336]	; (800bc50 <_vfiprintf_r+0x220>)
 800bb00:	f7f4 fb6e 	bl	80001e0 <memchr>
 800bb04:	9a04      	ldr	r2, [sp, #16]
 800bb06:	b9d8      	cbnz	r0, 800bb40 <_vfiprintf_r+0x110>
 800bb08:	06d1      	lsls	r1, r2, #27
 800bb0a:	bf44      	itt	mi
 800bb0c:	2320      	movmi	r3, #32
 800bb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb12:	0713      	lsls	r3, r2, #28
 800bb14:	bf44      	itt	mi
 800bb16:	232b      	movmi	r3, #43	; 0x2b
 800bb18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb20:	2b2a      	cmp	r3, #42	; 0x2a
 800bb22:	d015      	beq.n	800bb50 <_vfiprintf_r+0x120>
 800bb24:	9a07      	ldr	r2, [sp, #28]
 800bb26:	4654      	mov	r4, sl
 800bb28:	2000      	movs	r0, #0
 800bb2a:	f04f 0c0a 	mov.w	ip, #10
 800bb2e:	4621      	mov	r1, r4
 800bb30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb34:	3b30      	subs	r3, #48	; 0x30
 800bb36:	2b09      	cmp	r3, #9
 800bb38:	d94d      	bls.n	800bbd6 <_vfiprintf_r+0x1a6>
 800bb3a:	b1b0      	cbz	r0, 800bb6a <_vfiprintf_r+0x13a>
 800bb3c:	9207      	str	r2, [sp, #28]
 800bb3e:	e014      	b.n	800bb6a <_vfiprintf_r+0x13a>
 800bb40:	eba0 0308 	sub.w	r3, r0, r8
 800bb44:	fa09 f303 	lsl.w	r3, r9, r3
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	9304      	str	r3, [sp, #16]
 800bb4c:	46a2      	mov	sl, r4
 800bb4e:	e7d2      	b.n	800baf6 <_vfiprintf_r+0xc6>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d19      	adds	r1, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9103      	str	r1, [sp, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfbb      	ittet	lt
 800bb5c:	425b      	neglt	r3, r3
 800bb5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb62:	9307      	strge	r3, [sp, #28]
 800bb64:	9307      	strlt	r3, [sp, #28]
 800bb66:	bfb8      	it	lt
 800bb68:	9204      	strlt	r2, [sp, #16]
 800bb6a:	7823      	ldrb	r3, [r4, #0]
 800bb6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6e:	d10c      	bne.n	800bb8a <_vfiprintf_r+0x15a>
 800bb70:	7863      	ldrb	r3, [r4, #1]
 800bb72:	2b2a      	cmp	r3, #42	; 0x2a
 800bb74:	d134      	bne.n	800bbe0 <_vfiprintf_r+0x1b0>
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9203      	str	r2, [sp, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfb8      	it	lt
 800bb82:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb86:	3402      	adds	r4, #2
 800bb88:	9305      	str	r3, [sp, #20]
 800bb8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc60 <_vfiprintf_r+0x230>
 800bb8e:	7821      	ldrb	r1, [r4, #0]
 800bb90:	2203      	movs	r2, #3
 800bb92:	4650      	mov	r0, sl
 800bb94:	f7f4 fb24 	bl	80001e0 <memchr>
 800bb98:	b138      	cbz	r0, 800bbaa <_vfiprintf_r+0x17a>
 800bb9a:	9b04      	ldr	r3, [sp, #16]
 800bb9c:	eba0 000a 	sub.w	r0, r0, sl
 800bba0:	2240      	movs	r2, #64	; 0x40
 800bba2:	4082      	lsls	r2, r0
 800bba4:	4313      	orrs	r3, r2
 800bba6:	3401      	adds	r4, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4829      	ldr	r0, [pc, #164]	; (800bc54 <_vfiprintf_r+0x224>)
 800bbb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb4:	2206      	movs	r2, #6
 800bbb6:	f7f4 fb13 	bl	80001e0 <memchr>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d03f      	beq.n	800bc3e <_vfiprintf_r+0x20e>
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <_vfiprintf_r+0x228>)
 800bbc0:	bb1b      	cbnz	r3, 800bc0a <_vfiprintf_r+0x1da>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	3307      	adds	r3, #7
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	3308      	adds	r3, #8
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd0:	443b      	add	r3, r7
 800bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd4:	e768      	b.n	800baa8 <_vfiprintf_r+0x78>
 800bbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7a6      	b.n	800bb2e <_vfiprintf_r+0xfe>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	9305      	str	r3, [sp, #20]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f04f 0c0a 	mov.w	ip, #10
 800bbec:	4620      	mov	r0, r4
 800bbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf2:	3a30      	subs	r2, #48	; 0x30
 800bbf4:	2a09      	cmp	r2, #9
 800bbf6:	d903      	bls.n	800bc00 <_vfiprintf_r+0x1d0>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c6      	beq.n	800bb8a <_vfiprintf_r+0x15a>
 800bbfc:	9105      	str	r1, [sp, #20]
 800bbfe:	e7c4      	b.n	800bb8a <_vfiprintf_r+0x15a>
 800bc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc04:	4604      	mov	r4, r0
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7f0      	b.n	800bbec <_vfiprintf_r+0x1bc>
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <_vfiprintf_r+0x22c>)
 800bc12:	a904      	add	r1, sp, #16
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7fb fdf9 	bl	800780c <_printf_float>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	1c78      	adds	r0, r7, #1
 800bc1e:	d1d6      	bne.n	800bbce <_vfiprintf_r+0x19e>
 800bc20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc22:	07d9      	lsls	r1, r3, #31
 800bc24:	d405      	bmi.n	800bc32 <_vfiprintf_r+0x202>
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d402      	bmi.n	800bc32 <_vfiprintf_r+0x202>
 800bc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2e:	f7fc fdbd 	bl	80087ac <__retarget_lock_release_recursive>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	065b      	lsls	r3, r3, #25
 800bc36:	f53f af1d 	bmi.w	800ba74 <_vfiprintf_r+0x44>
 800bc3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3c:	e71c      	b.n	800ba78 <_vfiprintf_r+0x48>
 800bc3e:	ab03      	add	r3, sp, #12
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	462a      	mov	r2, r5
 800bc44:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <_vfiprintf_r+0x22c>)
 800bc46:	a904      	add	r1, sp, #16
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f7fc f883 	bl	8007d54 <_printf_i>
 800bc4e:	e7e4      	b.n	800bc1a <_vfiprintf_r+0x1ea>
 800bc50:	0800c391 	.word	0x0800c391
 800bc54:	0800c39b 	.word	0x0800c39b
 800bc58:	0800780d 	.word	0x0800780d
 800bc5c:	0800ba0d 	.word	0x0800ba0d
 800bc60:	0800c397 	.word	0x0800c397

0800bc64 <__swbuf_r>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	460e      	mov	r6, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	b118      	cbz	r0, 800bc76 <__swbuf_r+0x12>
 800bc6e:	6a03      	ldr	r3, [r0, #32]
 800bc70:	b90b      	cbnz	r3, 800bc76 <__swbuf_r+0x12>
 800bc72:	f7fc fc2d 	bl	80084d0 <__sinit>
 800bc76:	69a3      	ldr	r3, [r4, #24]
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	071a      	lsls	r2, r3, #28
 800bc7e:	d525      	bpl.n	800bccc <__swbuf_r+0x68>
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	b31b      	cbz	r3, 800bccc <__swbuf_r+0x68>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	6922      	ldr	r2, [r4, #16]
 800bc88:	1a98      	subs	r0, r3, r2
 800bc8a:	6963      	ldr	r3, [r4, #20]
 800bc8c:	b2f6      	uxtb	r6, r6
 800bc8e:	4283      	cmp	r3, r0
 800bc90:	4637      	mov	r7, r6
 800bc92:	dc04      	bgt.n	800bc9e <__swbuf_r+0x3a>
 800bc94:	4621      	mov	r1, r4
 800bc96:	4628      	mov	r0, r5
 800bc98:	f7ff fa3a 	bl	800b110 <_fflush_r>
 800bc9c:	b9e0      	cbnz	r0, 800bcd8 <__swbuf_r+0x74>
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	60a3      	str	r3, [r4, #8]
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	6022      	str	r2, [r4, #0]
 800bcaa:	701e      	strb	r6, [r3, #0]
 800bcac:	6962      	ldr	r2, [r4, #20]
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d004      	beq.n	800bcbe <__swbuf_r+0x5a>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	07db      	lsls	r3, r3, #31
 800bcb8:	d506      	bpl.n	800bcc8 <__swbuf_r+0x64>
 800bcba:	2e0a      	cmp	r6, #10
 800bcbc:	d104      	bne.n	800bcc8 <__swbuf_r+0x64>
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f7ff fa25 	bl	800b110 <_fflush_r>
 800bcc6:	b938      	cbnz	r0, 800bcd8 <__swbuf_r+0x74>
 800bcc8:	4638      	mov	r0, r7
 800bcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bccc:	4621      	mov	r1, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 f806 	bl	800bce0 <__swsetup_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d0d5      	beq.n	800bc84 <__swbuf_r+0x20>
 800bcd8:	f04f 37ff 	mov.w	r7, #4294967295
 800bcdc:	e7f4      	b.n	800bcc8 <__swbuf_r+0x64>
	...

0800bce0 <__swsetup_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <__swsetup_r+0xac>)
 800bce4:	4605      	mov	r5, r0
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	460c      	mov	r4, r1
 800bcea:	b118      	cbz	r0, 800bcf4 <__swsetup_r+0x14>
 800bcec:	6a03      	ldr	r3, [r0, #32]
 800bcee:	b90b      	cbnz	r3, 800bcf4 <__swsetup_r+0x14>
 800bcf0:	f7fc fbee 	bl	80084d0 <__sinit>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcfa:	0718      	lsls	r0, r3, #28
 800bcfc:	d422      	bmi.n	800bd44 <__swsetup_r+0x64>
 800bcfe:	06d9      	lsls	r1, r3, #27
 800bd00:	d407      	bmi.n	800bd12 <__swsetup_r+0x32>
 800bd02:	2309      	movs	r3, #9
 800bd04:	602b      	str	r3, [r5, #0]
 800bd06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e034      	b.n	800bd7c <__swsetup_r+0x9c>
 800bd12:	0758      	lsls	r0, r3, #29
 800bd14:	d512      	bpl.n	800bd3c <__swsetup_r+0x5c>
 800bd16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd18:	b141      	cbz	r1, 800bd2c <__swsetup_r+0x4c>
 800bd1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	d002      	beq.n	800bd28 <__swsetup_r+0x48>
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7fd fbd2 	bl	80094cc <_free_r>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	6363      	str	r3, [r4, #52]	; 0x34
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd32:	81a3      	strh	r3, [r4, #12]
 800bd34:	2300      	movs	r3, #0
 800bd36:	6063      	str	r3, [r4, #4]
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f043 0308 	orr.w	r3, r3, #8
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	b94b      	cbnz	r3, 800bd5c <__swsetup_r+0x7c>
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd52:	d003      	beq.n	800bd5c <__swsetup_r+0x7c>
 800bd54:	4621      	mov	r1, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 f884 	bl	800be64 <__smakebuf_r>
 800bd5c:	89a0      	ldrh	r0, [r4, #12]
 800bd5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd62:	f010 0301 	ands.w	r3, r0, #1
 800bd66:	d00a      	beq.n	800bd7e <__swsetup_r+0x9e>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60a3      	str	r3, [r4, #8]
 800bd6c:	6963      	ldr	r3, [r4, #20]
 800bd6e:	425b      	negs	r3, r3
 800bd70:	61a3      	str	r3, [r4, #24]
 800bd72:	6923      	ldr	r3, [r4, #16]
 800bd74:	b943      	cbnz	r3, 800bd88 <__swsetup_r+0xa8>
 800bd76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd7a:	d1c4      	bne.n	800bd06 <__swsetup_r+0x26>
 800bd7c:	bd38      	pop	{r3, r4, r5, pc}
 800bd7e:	0781      	lsls	r1, r0, #30
 800bd80:	bf58      	it	pl
 800bd82:	6963      	ldrpl	r3, [r4, #20]
 800bd84:	60a3      	str	r3, [r4, #8]
 800bd86:	e7f4      	b.n	800bd72 <__swsetup_r+0x92>
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e7f7      	b.n	800bd7c <__swsetup_r+0x9c>
 800bd8c:	20000068 	.word	0x20000068

0800bd90 <_raise_r>:
 800bd90:	291f      	cmp	r1, #31
 800bd92:	b538      	push	{r3, r4, r5, lr}
 800bd94:	4604      	mov	r4, r0
 800bd96:	460d      	mov	r5, r1
 800bd98:	d904      	bls.n	800bda4 <_raise_r+0x14>
 800bd9a:	2316      	movs	r3, #22
 800bd9c:	6003      	str	r3, [r0, #0]
 800bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bda6:	b112      	cbz	r2, 800bdae <_raise_r+0x1e>
 800bda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdac:	b94b      	cbnz	r3, 800bdc2 <_raise_r+0x32>
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f830 	bl	800be14 <_getpid_r>
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	4620      	mov	r0, r4
 800bdba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdbe:	f000 b817 	b.w	800bdf0 <_kill_r>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d00a      	beq.n	800bddc <_raise_r+0x4c>
 800bdc6:	1c59      	adds	r1, r3, #1
 800bdc8:	d103      	bne.n	800bdd2 <_raise_r+0x42>
 800bdca:	2316      	movs	r3, #22
 800bdcc:	6003      	str	r3, [r0, #0]
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e7e7      	b.n	800bda2 <_raise_r+0x12>
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdd8:	4628      	mov	r0, r5
 800bdda:	4798      	blx	r3
 800bddc:	2000      	movs	r0, #0
 800bdde:	e7e0      	b.n	800bda2 <_raise_r+0x12>

0800bde0 <raise>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <raise+0xc>)
 800bde2:	4601      	mov	r1, r0
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f7ff bfd3 	b.w	800bd90 <_raise_r>
 800bdea:	bf00      	nop
 800bdec:	20000068 	.word	0x20000068

0800bdf0 <_kill_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4d07      	ldr	r5, [pc, #28]	; (800be10 <_kill_r+0x20>)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	f7f6 f84a 	bl	8001e96 <_kill>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d102      	bne.n	800be0c <_kill_r+0x1c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b103      	cbz	r3, 800be0c <_kill_r+0x1c>
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	bf00      	nop
 800be10:	200031e0 	.word	0x200031e0

0800be14 <_getpid_r>:
 800be14:	f7f6 b837 	b.w	8001e86 <_getpid>

0800be18 <__swhatbuf_r>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	460c      	mov	r4, r1
 800be1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be20:	2900      	cmp	r1, #0
 800be22:	b096      	sub	sp, #88	; 0x58
 800be24:	4615      	mov	r5, r2
 800be26:	461e      	mov	r6, r3
 800be28:	da0d      	bge.n	800be46 <__swhatbuf_r+0x2e>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be30:	f04f 0100 	mov.w	r1, #0
 800be34:	bf0c      	ite	eq
 800be36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be3a:	2340      	movne	r3, #64	; 0x40
 800be3c:	2000      	movs	r0, #0
 800be3e:	6031      	str	r1, [r6, #0]
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	b016      	add	sp, #88	; 0x58
 800be44:	bd70      	pop	{r4, r5, r6, pc}
 800be46:	466a      	mov	r2, sp
 800be48:	f000 f848 	bl	800bedc <_fstat_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	dbec      	blt.n	800be2a <__swhatbuf_r+0x12>
 800be50:	9901      	ldr	r1, [sp, #4]
 800be52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800be5a:	4259      	negs	r1, r3
 800be5c:	4159      	adcs	r1, r3
 800be5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be62:	e7eb      	b.n	800be3c <__swhatbuf_r+0x24>

0800be64 <__smakebuf_r>:
 800be64:	898b      	ldrh	r3, [r1, #12]
 800be66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be68:	079d      	lsls	r5, r3, #30
 800be6a:	4606      	mov	r6, r0
 800be6c:	460c      	mov	r4, r1
 800be6e:	d507      	bpl.n	800be80 <__smakebuf_r+0x1c>
 800be70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	6123      	str	r3, [r4, #16]
 800be78:	2301      	movs	r3, #1
 800be7a:	6163      	str	r3, [r4, #20]
 800be7c:	b002      	add	sp, #8
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	ab01      	add	r3, sp, #4
 800be82:	466a      	mov	r2, sp
 800be84:	f7ff ffc8 	bl	800be18 <__swhatbuf_r>
 800be88:	9900      	ldr	r1, [sp, #0]
 800be8a:	4605      	mov	r5, r0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7fd fb91 	bl	80095b4 <_malloc_r>
 800be92:	b948      	cbnz	r0, 800bea8 <__smakebuf_r+0x44>
 800be94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d4ef      	bmi.n	800be7c <__smakebuf_r+0x18>
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	e7e3      	b.n	800be70 <__smakebuf_r+0xc>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	6020      	str	r0, [r4, #0]
 800beac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	9b00      	ldr	r3, [sp, #0]
 800beb4:	6163      	str	r3, [r4, #20]
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	6120      	str	r0, [r4, #16]
 800beba:	b15b      	cbz	r3, 800bed4 <__smakebuf_r+0x70>
 800bebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bec0:	4630      	mov	r0, r6
 800bec2:	f000 f81d 	bl	800bf00 <_isatty_r>
 800bec6:	b128      	cbz	r0, 800bed4 <__smakebuf_r+0x70>
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	f023 0303 	bic.w	r3, r3, #3
 800bece:	f043 0301 	orr.w	r3, r3, #1
 800bed2:	81a3      	strh	r3, [r4, #12]
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	431d      	orrs	r5, r3
 800bed8:	81a5      	strh	r5, [r4, #12]
 800beda:	e7cf      	b.n	800be7c <__smakebuf_r+0x18>

0800bedc <_fstat_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	; (800befc <_fstat_r+0x20>)
 800bee0:	2300      	movs	r3, #0
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	f7f6 f833 	bl	8001f54 <_fstat>
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	d102      	bne.n	800bef8 <_fstat_r+0x1c>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	b103      	cbz	r3, 800bef8 <_fstat_r+0x1c>
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	bd38      	pop	{r3, r4, r5, pc}
 800befa:	bf00      	nop
 800befc:	200031e0 	.word	0x200031e0

0800bf00 <_isatty_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d06      	ldr	r5, [pc, #24]	; (800bf1c <_isatty_r+0x1c>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	f7f6 f832 	bl	8001f74 <_isatty>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_isatty_r+0x1a>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_isatty_r+0x1a>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	200031e0 	.word	0x200031e0

0800bf20 <_init>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	bf00      	nop
 800bf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf26:	bc08      	pop	{r3}
 800bf28:	469e      	mov	lr, r3
 800bf2a:	4770      	bx	lr

0800bf2c <_fini>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	bf00      	nop
 800bf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf32:	bc08      	pop	{r3}
 800bf34:	469e      	mov	lr, r3
 800bf36:	4770      	bx	lr
